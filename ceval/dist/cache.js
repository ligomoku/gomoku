import * as idb from 'idb-keyval';
export class Cache {
    constructor(name) {
        this.store = idb.createStore(`${name}--db`, `${name}--store`);
    }
    async get(key, version) {
        const cachedVersion = await idb.get(`${key}--version`, this.store);
        if (cachedVersion !== version) {
            return [false, undefined];
        }
        const data = await idb.get(`${key}--data`, this.store);
        return [true, data];
    }
    async set(key, version, data) {
        const cachedVersion = await idb.get(`${key}--version`, this.store);
        if (cachedVersion === version) {
            return;
        }
        await idb.del(`${key}--version`, this.store);
        await idb.set(`${key}--data`, data, this.store);
        await idb.set(`${key}--version`, version, this.store);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvY2FjaGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEdBQUcsTUFBTSxZQUFZLENBQUM7QUFFbEMsTUFBTSxPQUFPLEtBQUs7SUFHaEIsWUFBWSxJQUFZO1FBQ3RCLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLElBQUksTUFBTSxFQUFFLEdBQUcsSUFBSSxTQUFTLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRUQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFXLEVBQUUsT0FBZTtRQUNwQyxNQUFNLGFBQWEsR0FBRyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLFdBQVcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkUsSUFBSSxhQUFhLEtBQUssT0FBTyxFQUFFO1lBQzdCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7U0FDM0I7UUFDRCxNQUFNLElBQUksR0FBRyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkQsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRUQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFXLEVBQUUsT0FBZSxFQUFFLElBQVM7UUFDL0MsTUFBTSxhQUFhLEdBQUcsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxXQUFXLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25FLElBQUksYUFBYSxLQUFLLE9BQU8sRUFBRTtZQUM3QixPQUFPO1NBQ1I7UUFDRCxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLFdBQVcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0MsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxRQUFRLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoRCxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLFdBQVcsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hELENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGlkYiBmcm9tICdpZGIta2V5dmFsJztcblxuZXhwb3J0IGNsYXNzIENhY2hlIHtcbiAgcHJpdmF0ZSBzdG9yZTtcblxuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLnN0b3JlID0gaWRiLmNyZWF0ZVN0b3JlKGAke25hbWV9LS1kYmAsIGAke25hbWV9LS1zdG9yZWApO1xuICB9XG5cbiAgYXN5bmMgZ2V0KGtleTogc3RyaW5nLCB2ZXJzaW9uOiBzdHJpbmcpOiBQcm9taXNlPFtib29sZWFuLCBhbnldPiB7XG4gICAgY29uc3QgY2FjaGVkVmVyc2lvbiA9IGF3YWl0IGlkYi5nZXQoYCR7a2V5fS0tdmVyc2lvbmAsIHRoaXMuc3RvcmUpO1xuICAgIGlmIChjYWNoZWRWZXJzaW9uICE9PSB2ZXJzaW9uKSB7XG4gICAgICByZXR1cm4gW2ZhbHNlLCB1bmRlZmluZWRdO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgaWRiLmdldChgJHtrZXl9LS1kYXRhYCwgdGhpcy5zdG9yZSk7XG4gICAgcmV0dXJuIFt0cnVlLCBkYXRhXTtcbiAgfVxuXG4gIGFzeW5jIHNldChrZXk6IHN0cmluZywgdmVyc2lvbjogc3RyaW5nLCBkYXRhOiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBjYWNoZWRWZXJzaW9uID0gYXdhaXQgaWRiLmdldChgJHtrZXl9LS12ZXJzaW9uYCwgdGhpcy5zdG9yZSk7XG4gICAgaWYgKGNhY2hlZFZlcnNpb24gPT09IHZlcnNpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYXdhaXQgaWRiLmRlbChgJHtrZXl9LS12ZXJzaW9uYCwgdGhpcy5zdG9yZSk7XG4gICAgYXdhaXQgaWRiLnNldChgJHtrZXl9LS1kYXRhYCwgZGF0YSwgdGhpcy5zdG9yZSk7XG4gICAgYXdhaXQgaWRiLnNldChgJHtrZXl9LS12ZXJzaW9uYCwgdmVyc2lvbiwgdGhpcy5zdG9yZSk7XG4gIH1cbn1cbiJdfQ==