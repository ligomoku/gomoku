import throttle from 'common/throttle';
import { CevalState, WebWorker, ThreadedWasmWorker, ExternalWorker } from './worker';
import { Cache } from './cache';
import { defaultDepth, engineName, sanIrreversible, sharedWasmMemory } from './util';
import { defaultPosition, setupPosition } from 'chessops/variant';
import { parseFen } from 'chessops/fen';
import { isStandardMaterial } from 'chessops/chess';
import { lichessRules } from 'chessops/compat';
import { povChances } from './winningChances';
import { prop, toggle } from 'common';
import { Result } from '@badrap/result';
import { storedBooleanProp, storedIntProp, storedStringProp } from 'common/storage';
import { detectPlatform } from './platform';
const cevalDisabledSentinel = '1';
function enabledAfterDisable() {
    const enabledAfter = lichess.tempStorage.get('ceval.enabled-after');
    const disable = lichess.storage.get('ceval.disable') || cevalDisabledSentinel;
    return enabledAfter === disable;
}
export default class CevalCtrl {
    constructor(opts) {
        var _a, _b, _c;
        this.opts = opts;
        this.selectedEngine = storedStringProp('ceval.engine', 'lichess');
        this.enableNnue = storedBooleanProp('ceval.enable-nnue', !((_a = navigator.connection) === null || _a === void 0 ? void 0 : _a.saveData));
        this.infinite = storedBooleanProp('ceval.infinite', false);
        this.allowed = toggle(true);
        this.downloadProgress = prop(0);
        this.hovering = prop(null);
        this.pvBoard = prop(null);
        this.isDeeper = toggle(false);
        this.curEval = null;
        this.lastStarted = false; // last started object (for going deeper even if stopped)
        this.storageKey = (k) => (this.opts.storageKeyPrefix ? `${this.opts.storageKeyPrefix}.${k}` : k);
        this.threads = () => {
            const stored = lichess.storage.get(this.storageKey('ceval.threads'));
            return Math.min(this.platform.maxThreads, stored ? parseInt(stored, 10) : Math.ceil((navigator.hardwareConcurrency || 1) / 4));
        };
        this.hashSize = () => {
            const stored = lichess.storage.get(this.storageKey('ceval.hash-size'));
            return Math.min(this.platform.maxHashSize(), stored ? parseInt(stored, 10) : 16);
        };
        this.lastEmitFen = null;
        this.sortPvsInPlace = (pvs, color) => pvs.sort((a, b) => povChances(color, b) - povChances(color, a));
        this.onEmit = throttle(200, (ev, work) => {
            this.sortPvsInPlace(ev.pvs, work.ply % 2 === (work.threatMode ? 1 : 0) ? 'white' : 'black');
            this.curEval = ev;
            this.opts.emit(ev, work);
            if (ev.fen !== this.lastEmitFen && enabledAfterDisable()) {
                // amnesty while auto disable not processed
                this.lastEmitFen = ev.fen;
                lichess.storage.fire('ceval.fen', ev.fen);
            }
        });
        this.curDepth = () => { var _a; return ((_a = this.curEval) === null || _a === void 0 ? void 0 : _a.depth) || 0; };
        this.effectiveMaxDepth = () => this.isDeeper() || this.infinite() ? 99 : defaultDepth(this.technology, this.threads(), this.multiPv());
        this.doStart = (path, steps, threatMode) => {
            if (!this.enabled() || !this.possible || !enabledAfterDisable())
                return;
            const maxDepth = this.effectiveMaxDepth();
            const step = steps[steps.length - 1];
            const existing = threatMode ? step.threat : step.ceval;
            if (existing && existing.depth >= maxDepth) {
                this.lastStarted = {
                    path,
                    steps,
                    threatMode,
                };
                return;
            }
            const work = {
                variant: this.opts.variant.key,
                threads: this.threads(),
                hashSize: this.hashSize(),
                stopRequested: false,
                initialFen: steps[0].fen,
                moves: [],
                currentFen: step.fen,
                path,
                ply: step.ply,
                maxDepth,
                multiPv: this.multiPv(),
                threatMode,
                emit: (ev) => {
                    if (this.enabled())
                        this.onEmit(ev, work);
                },
            };
            if (threatMode) {
                const c = step.ply % 2 === 1 ? 'w' : 'b';
                const fen = step.fen.replace(/ (w|b) /, ' ' + c + ' ');
                work.currentFen = fen;
                work.initialFen = fen;
            }
            else {
                // send fen after latest castling move and the following moves
                for (let i = 1; i < steps.length; i++) {
                    const s = steps[i];
                    if (sanIrreversible(this.opts.variant.key, s.san)) {
                        work.moves = [];
                        work.initialFen = s.fen;
                    }
                    else
                        work.moves.push(s.uci);
                }
            }
            // Notify all other tabs to disable ceval.
            lichess.storage.fire('ceval.disable');
            lichess.tempStorage.set('ceval.enabled-after', lichess.storage.get('ceval.disable'));
            if (!this.worker) {
                if (this.externalEngine)
                    this.worker = new ExternalWorker(this.externalEngine, this.opts.redraw);
                else if (this.technology == 'nnue')
                    this.worker = new ThreadedWasmWorker({
                        baseUrl: 'vendor/stockfish-nnue.wasm/',
                        module: 'Stockfish',
                        downloadProgress: throttle(200, mb => {
                            this.downloadProgress(mb);
                            this.opts.redraw();
                        }),
                        version: 'b6939d',
                        wasmMemory: sharedWasmMemory(2048, this.platform.maxWasmPages(2048)),
                        cache: window.indexedDB && new Cache('ceval-wasm-cache'),
                    }, this.opts.redraw);
                else if (this.technology == 'hce')
                    this.worker = new ThreadedWasmWorker({
                        baseUrl: this.officialStockfish ? 'vendor/stockfish.wasm/' : 'vendor/stockfish-mv.wasm/',
                        module: this.officialStockfish ? 'Stockfish' : 'StockfishMv',
                        version: 'a022fa',
                        wasmMemory: sharedWasmMemory(1024, this.platform.maxWasmPages(1088)),
                    }, this.opts.redraw);
                else
                    this.worker = new WebWorker({
                        url: this.technology == 'wasm' ? 'vendor/stockfish.js/stockfish.wasm.js' : 'vendor/stockfish.js/stockfish.js',
                    }, this.opts.redraw);
            }
            this.worker.start(work);
            this.lastStarted = {
                path,
                steps,
                threatMode,
            };
        };
        this.goDeeper = () => {
            this.isDeeper(true);
            if (this.lastStarted) {
                if (this.infinite()) {
                    if (this.curEval)
                        this.opts.emit(this.curEval, this.lastStarted);
                }
                else {
                    this.stop();
                    this.doStart(this.lastStarted.path, this.lastStarted.steps, this.lastStarted.threatMode);
                }
            }
            this.opts.redraw();
        };
        this.stop = () => {
            var _a;
            (_a = this.worker) === null || _a === void 0 ? void 0 : _a.stop();
        };
        this.showingCloud = () => {
            var _a;
            if (!this.lastStarted)
                return false;
            const curr = this.lastStarted.steps[this.lastStarted.steps.length - 1];
            return !!((_a = curr.ceval) === null || _a === void 0 ? void 0 : _a.cloud);
        };
        this.start = (path, steps, threatMode) => {
            this.isDeeper(false);
            this.doStart(path, steps, !!threatMode);
        };
        this.setThreads = (threads) => lichess.storage.set(this.storageKey('ceval.threads'), threads.toString());
        this.setHashSize = (hash) => lichess.storage.set(this.storageKey('ceval.hash-size'), hash.toString());
        this.setHovering = (fen, uci) => {
            this.hovering(uci ? { fen, uci } : null);
            this.opts.setAutoShapes();
        };
        this.setPvBoard = (pvBoard) => {
            this.pvBoard(pvBoard);
            this.opts.redraw();
        };
        this.toggle = () => {
            if (!this.possible || !this.allowed())
                return;
            this.stop();
            if (!this.enabled() && !document.hidden) {
                const disable = lichess.storage.get('ceval.disable') || cevalDisabledSentinel;
                if (disable)
                    lichess.tempStorage.set('ceval.enabled-after', disable);
                this.enabled(true);
            }
            else {
                lichess.tempStorage.set('ceval.enabled-after', '');
                this.enabled(false);
            }
        };
        this.selectEngine = (id) => {
            var _a;
            this.selectedEngine(((_a = this.opts.externalEngines) === null || _a === void 0 ? void 0 : _a.find(e => e.id == id)) ? id : 'lichess');
            lichess.reload();
        };
        this.canGoDeeper = () => this.curDepth() < 99 &&
            !this.isDeeper() &&
            ((!this.infinite() && this.getState() !== CevalState.Computing) || this.showingCloud());
        this.shortEngineName = () => engineName(this.technology, this.externalEngine);
        this.longEngineName = () => { var _a; return (_a = this.worker) === null || _a === void 0 ? void 0 : _a.engineName(); };
        this.destroy = () => { var _a; return (_a = this.worker) === null || _a === void 0 ? void 0 : _a.destroy(); };
        this.possible = this.opts.possible;
        // check root position
        this.rules = lichessRules(this.opts.variant.key);
        const pos = this.opts.initialFen
            ? parseFen(this.opts.initialFen).chain(setup => setupPosition(this.rules, setup))
            : Result.ok(defaultPosition(this.rules));
        this.analysable = pos.isOk;
        this.officialStockfish = this.rules == 'chess' && (pos.isErr || isStandardMaterial(pos.value));
        this.enabled = toggle(this.possible && this.analysable && this.allowed() && enabledAfterDisable());
        this.externalEngine = (_b = this.opts.externalEngines) === null || _b === void 0 ? void 0 : _b.find(e => e.id == this.selectedEngine() && (this.officialStockfish || e.variants.map(lichessRules).includes(this.rules)));
        this.platform = detectPlatform(this.officialStockfish, this.enableNnue(), this.externalEngine);
        this.technology = this.platform.technology;
        this.multiPv = storedIntProp(this.storageKey('ceval.multipv'), this.opts.multiPvDefault || 1);
        this.cachable = this.technology == 'nnue' || this.technology == 'hce' || !!((_c = this.externalEngine) === null || _c === void 0 ? void 0 : _c.officialStockfish);
    }
    getState() {
        return this.worker ? this.worker.getState() : CevalState.Initial;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3RybC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jdHJsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sUUFBUSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxVQUFVLEVBQWUsU0FBUyxFQUFFLGtCQUFrQixFQUFrQixjQUFjLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDbEgsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVoQyxPQUFPLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDckYsT0FBTyxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDOUMsT0FBTyxFQUFFLElBQUksRUFBVSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDOUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxhQUFhLEVBQWMsZ0JBQWdCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVoRyxPQUFPLEVBQWtDLGNBQWMsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUU1RSxNQUFNLHFCQUFxQixHQUFHLEdBQUcsQ0FBQztBQUVsQyxTQUFTLG1CQUFtQjtJQUMxQixNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQ3BFLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFP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QUFRLEdBQUcsSUFBSSxDQUFDLFVBQVUsSUFBSSxNQUFNLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUEsTUFBQSxJQUFJLENBQUMsY0FBYywwQ0FBRSxpQkFBaUIsQ0FBQSxDQUFDO0lBQ3BILENBQUM7SUFzS0QsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQztJQUNuRSxDQUFDO0NBb0NGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHRocm90dGxlIGZyb20gJ2NvbW1vbi90aHJvdHRsZSc7XG5pbXBvcnQgeyBDZXZhbFN0YXRlLCBDZXZhbFdvcmtlciwgV2ViV29ya2VyLCBUaHJlYWRlZFdhc21Xb3JrZXIsIEV4dGVybmFsRW5naW5lLCBFeHRlcm5hbFdvcmtlciB9IGZyb20gJy4vd29ya2VyJztcbmltcG9ydCB7IENhY2hlIH0gZnJvbSAnLi9jYWNoZSc7XG5pbXBvcnQgeyBDZXZhbE9wdHMsIFdvcmssIFN0ZXAsIEhvdmVyaW5nLCBQdkJvYXJkLCBTdGFydGVkIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBkZWZhdWx0RGVwdGgsIGVuZ2luZU5hbWUsIHNhbklycmV2ZXJzaWJsZSwgc2hhcmVkV2FzbU1lbW9yeSB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgeyBkZWZhdWx0UG9zaXRpb24sIHNldHVwUG9zaXRpb24gfSBmcm9tICdjaGVzc29wcy92YXJpYW50JztcbmltcG9ydCB7IHBhcnNlRmVuIH0gZnJvbSAnY2hlc3NvcHMvZmVuJztcbmltcG9ydCB7IGlzU3RhbmRhcmRNYXRlcmlhbCB9IGZyb20gJ2NoZXNzb3BzL2NoZXNzJztcbmltcG9ydCB7IGxpY2hlc3NSdWxlcyB9IGZyb20gJ2NoZXNzb3BzL2NvbXBhdCc7XG5pbXBvcnQgeyBwb3ZDaGFuY2VzIH0gZnJvbSAnLi93aW5uaW5nQ2hhbmNlcyc7XG5pbXBvcnQgeyBwcm9wLCBUb2dnbGUsIHRvZ2dsZSB9IGZyb20gJ2NvbW1vbic7XG5pbXBvcnQgeyBSZXN1bHQgfSBmcm9tICdAYmFkcmFwL3Jlc3VsdCc7XG5pbXBvcnQgeyBzdG9yZWRCb29sZWFuUHJvcCwgc3RvcmVkSW50UHJvcCwgU3RvcmVkUHJvcCwgc3RvcmVkU3RyaW5nUHJvcCB9IGZyb20gJ2NvbW1vbi9zdG9yYWdlJztcbmltcG9ydCB7IFJ1bGVzIH0gZnJvbSAnY2hlc3NvcHMnO1xuaW1wb3J0IHsgQ2V2YWxQbGF0Zm9ybSwgQ2V2YWxUZWNobm9sb2d5LCBkZXRlY3RQbGF0Zm9ybSB9IGZyb20gJy4vcGxhdGZvcm0nO1xuXG5jb25zdCBjZXZhbERpc2FibGVkU2VudGluZWwgPSAnMSc7XG5cbmZ1bmN0aW9uIGVuYWJsZWRBZnRlckRpc2FibGUoKSB7XG4gIGNvbnN0IGVuYWJsZWRBZnRlciA9IGxpY2hlc3MudGVtcFN0b3JhZ2UuZ2V0KCdjZXZhbC5lbmFibGVkLWFmdGVyJyk7XG4gIGNvbnN0IGRpc2FibGUgPSBsaWNoZXNzLnN0b3JhZ2UuZ2V0KCdjZXZhbC5kaXNhYmxlJykgfHwgY2V2YWxEaXNhYmxlZFNlbnRpbmVsO1xuICByZXR1cm4gZW5hYmxlZEFmdGVyID09PSBkaXNhYmxlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDZXZhbEN0cmwge1xuICBydWxlczogUnVsZXM7XG4gIGFuYWx5c2FibGU6IGJvb2xlYW47XG4gIHBvc3NpYmxlOiBib29sZWFuO1xuICBjYWNoYWJsZTogYm9vbGVhbjtcbiAgcHJpdmF0ZSBvZmZpY2lhbFN0b2NrZmlzaDogYm9vbGVhbjtcblxuICBwbGF0Zm9ybTogQ2V2YWxQbGF0Zm9ybTtcbiAgdGVjaG5vbG9neTogQ2V2YWxUZWNobm9sb2d5O1xuXG4gIHNlbGVjdGVkRW5naW5lOiBTdG9yZWRQcm9wPHN0cmluZz4gPSBzdG9yZWRTdHJpbmdQcm9wKCdjZXZhbC5lbmdpbmUnLCAnbGljaGVzcycpO1xuICBleHRlcm5hbEVuZ2luZT86IEV4dGVybmFsRW5naW5lOyAvLyBpZiBzZWxlY3RlZCwgYXZhaWxhYmxlLCBhbmQgdXNhYmxlIGZvciBjdXJyZW50IHJ1bGVzXG5cbiAgZW5hYmxlTm51ZSA9IHN0b3JlZEJvb2xlYW5Qcm9wKCdjZXZhbC5lbmFibGUtbm51ZScsICEobmF2aWdhdG9yIGFzIGFueSkuY29ubmVjdGlvbj8uc2F2ZURhdGEpO1xuICBpbmZpbml0ZSA9IHN0b3JlZEJvb2xlYW5Qcm9wKCdjZXZhbC5pbmZpbml0ZScsIGZhbHNlKTtcbiAgbXVsdGlQdjogU3RvcmVkUHJvcDxudW1iZXI+O1xuICBhbGxvd2VkID0gdG9nZ2xlKHRydWUpO1xuICBlbmFibGVkOiBUb2dnbGU7XG4gIGRvd25sb2FkUHJvZ3Jlc3MgPSBwcm9wKDApO1xuICBob3ZlcmluZyA9IHByb3A8SG92ZXJpbmcgfCBudWxsPihudWxsKTtcbiAgcHZCb2FyZCA9IHByb3A8UHZCb2FyZCB8IG51bGw+KG51bGwpO1xuICBpc0RlZXBlciA9IHRvZ2dsZShmYWxzZSk7XG5cbiAgY3VyRXZhbDogVHJlZS5Mb2NhbEV2YWwgfCBudWxsID0gbnVsbDtcbiAgbGFzdFN0YXJ0ZWQ6IFN0YXJ0ZWQgfCBmYWxzZSA9IGZhbHNlOyAvLyBsYXN0IHN0YXJ0ZWQgb2JqZWN0IChmb3IgZ29pbmcgZGVlcGVyIGV2ZW4gaWYgc3RvcHBlZClcblxuICBwcml2YXRlIHdvcmtlcjogQ2V2YWxXb3JrZXIgfCB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IocmVhZG9ubHkgb3B0czogQ2V2YWxPcHRzKSB7XG4gICAgdGhpcy5wb3NzaWJsZSA9IHRoaXMub3B0cy5wb3NzaWJsZTtcblxuICAgIC8vIGNoZWNrIHJvb3QgcG9zaXRpb25cbiAgICB0aGlzLnJ1bGVzID0gbGljaGVzc1J1bGVzKHRoaXMub3B0cy52YXJpYW50LmtleSk7XG4gICAgY29uc3QgcG9zID0gdGhpcy5vcHRzLmluaXRpYWxGZW5cbiAgICAgID8gcGFyc2VGZW4odGhpcy5vcHRzLmluaXRpYWxGZW4pLmNoYWluKHNldHVwID0+IHNldHVwUG9zaXRpb24odGhpcy5ydWxlcywgc2V0dXApKVxuICAgICAgOiBSZXN1bHQub2soZGVmYXVsdFBvc2l0aW9uKHRoaXMucnVsZXMpKTtcbiAgICB0aGlzLmFuYWx5c2FibGUgPSBwb3MuaXNPaztcbiAgICB0aGlzLm9mZmljaWFsU3RvY2tmaXNoID0gdGhpcy5ydWxlcyA9PSAnY2hlc3MnICYmIChwb3MuaXNFcnIgfHwgaXNTdGFuZGFyZE1hdGVyaWFsKHBvcy52YWx1ZSkpO1xuICAgIHRoaXMuZW5hYmxlZCA9IHRvZ2dsZSh0aGlzLnBvc3NpYmxlICYmIHRoaXMuYW5hbHlzYWJsZSAmJiB0aGlzLmFsbG93ZWQoKSAmJiBlbmFibGVkQWZ0ZXJEaXNhYmxlKCkpO1xuXG4gICAgdGhpcy5leHRlcm5hbEVuZ2luZSA9IHRoaXMub3B0cy5leHRlcm5hbEVuZ2luZXM/LmZpbmQoXG4gICAgICBlID0+XG4gICAgICAgIGUuaWQgPT0gdGhpcy5zZWxlY3RlZEVuZ2luZSgpICYmICh0aGlzLm9mZmljaWFsU3RvY2tmaXNoIHx8IGUudmFyaWFudHMubWFwKGxpY2hlc3NSdWxlcykuaW5jbHVkZXModGhpcy5ydWxlcykpXG4gICAgKTtcbiAgICB0aGlzLnBsYXRmb3JtID0gZGV0ZWN0UGxhdGZvcm0odGhpcy5vZmZpY2lhbFN0b2NrZmlzaCwgdGhpcy5lbmFibGVObnVlKCksIHRoaXMuZXh0ZXJuYWxFbmdpbmUpO1xuICAgIHRoaXMudGVjaG5vbG9neSA9IHRoaXMucGxhdGZvcm0udGVjaG5vbG9neTtcblxuICAgIHRoaXMubXVsdGlQdiA9IHN0b3JlZEludFByb3AodGhpcy5zdG9yYWdlS2V5KCdjZXZhbC5tdWx0aXB2JyksIHRoaXMub3B0cy5tdWx0aVB2RGVmYXVsdCB8fCAxKTtcbiAgICB0aGlzLmNhY2hhYmxlID0gdGhpcy50ZWNobm9sb2d5ID09ICdubnVlJyB8fCB0aGlzLnRlY2hub2xvZ3kgPT0gJ2hjZScgfHwgISF0aGlzLmV4dGVybmFsRW5naW5lPy5vZmZpY2lhbFN0b2NrZmlzaDtcbiAgfVxuXG4gIHN0b3JhZ2VLZXkgPSAoazogc3RyaW5nKSA9PiAodGhpcy5vcHRzLnN0b3JhZ2VLZXlQcmVmaXggPyBgJHt0aGlzLm9wdHMuc3RvcmFnZUtleVByZWZpeH0uJHtrfWAgOiBrKTtcblxuICB0aHJlYWRzID0gKCkgPT4ge1xuICAgIGNvbnN0IHN0b3JlZCA9IGxpY2hlc3Muc3RvcmFnZS5nZXQodGhpcy5zdG9yYWdlS2V5KCdjZXZhbC50aHJlYWRzJykpO1xuICAgIHJldHVybiBNYXRoLm1pbihcbiAgICAgIHRoaXMucGxhdGZvcm0ubWF4VGhyZWFkcyxcbiAgICAgIHN0b3JlZCA/IHBhcnNlSW50KHN0b3JlZCwgMTApIDogTWF0aC5jZWlsKChuYXZpZ2F0b3IuaGFyZHdhcmVDb25jdXJyZW5jeSB8fCAxKSAvIDQpXG4gICAgKTtcbiAgfTtcblxuICBoYXNoU2l6ZSA9ICgpID0+IHtcbiAgICBjb25zdCBzdG9yZWQgPSBsaWNoZXNzLnN0b3JhZ2UuZ2V0KHRoaXMuc3RvcmFnZUtleSgnY2V2YWwuaGFzaC1zaXplJykpO1xuICAgIHJldHVybiBNYXRoLm1pbih0aGlzLnBsYXRmb3JtLm1heEhhc2hTaXplKCksIHN0b3JlZCA/IHBhcnNlSW50KHN0b3JlZCwgMTApIDogMTYpO1xuICB9O1xuXG4gIHByaXZhdGUgbGFzdEVtaXRGZW46IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIHNvcnRQdnNJblBsYWNlID0gKHB2czogVHJlZS5QdkRhdGFbXSwgY29sb3I6IENvbG9yKSA9PlxuICAgIHB2cy5zb3J0KChhLCBiKSA9PiBwb3ZDaGFuY2VzKGNvbG9yLCBiKSAtIHBvdkNoYW5jZXMoY29sb3IsIGEpKTtcblxuICBvbkVtaXQgPSB0aHJvdHRsZSgyMDAsIChldjogVHJlZS5Mb2NhbEV2YWwsIHdvcms6IFdvcmspID0+IHtcbiAgICB0aGlzLnNvcnRQdnNJblBsYWNlKGV2LnB2cywgd29yay5wbHkgJSAyID09PSAod29yay50aHJlYXRNb2RlID8gMSA6IDApID8gJ3doaXRlJyA6ICdibGFjaycpO1xuICAgIHRoaXMuY3VyRXZhbCA9IGV2O1xuICAgIHRoaXMub3B0cy5lbWl0KGV2LCB3b3JrKTtcbiAgICBpZiAoZXYuZmVuICE9PSB0aGlzLmxhc3RFbWl0RmVuICYmIGVuYWJsZWRBZnRlckRpc2FibGUoKSkge1xuICAgICAgLy8gYW1uZXN0eSB3aGlsZSBhdXRvIGRpc2FibGUgbm90IHByb2Nlc3NlZFxuICAgICAgdGhpcy5sYXN0RW1pdEZlbiA9IGV2LmZlbjtcbiAgICAgIGxpY2hlc3Muc3RvcmFnZS5maXJlKCdjZXZhbC5mZW4nLCBldi5mZW4pO1xuICAgIH1cbiAgfSk7XG5cbiAgY3VyRGVwdGggPSAoKSA9PiB0aGlzLmN1ckV2YWw/LmRlcHRoIHx8IDA7XG5cbiAgZWZmZWN0aXZlTWF4RGVwdGggPSAoKSA9PlxuICAgIHRoaXMuaXNEZWVwZXIoKSB8fCB0aGlzLmluZmluaXRlKCkgPyA5OSA6IGRlZmF1bHREZXB0aCh0aGlzLnRlY2hub2xvZ3ksIHRoaXMudGhyZWFkcygpLCB0aGlzLm11bHRpUHYoKSk7XG5cbiAgcHJpdmF0ZSBkb1N0YXJ0ID0gKHBhdGg6IFRyZWUuUGF0aCwgc3RlcHM6IFN0ZXBbXSwgdGhyZWF0TW9kZTogYm9vbGVhbikgPT4ge1xuICAgIGlmICghdGhpcy5lbmFibGVkKCkgfHwgIXRoaXMucG9zc2libGUgfHwgIWVuYWJsZWRBZnRlckRpc2FibGUoKSkgcmV0dXJuO1xuXG4gICAgY29uc3QgbWF4RGVwdGggPSB0aGlzLmVmZmVjdGl2ZU1heERlcHRoKCk7XG5cbiAgICBjb25zdCBzdGVwID0gc3RlcHNbc3RlcHMubGVuZ3RoIC0gMV07XG5cbiAgICBjb25zdCBleGlzdGluZyA9IHRocmVhdE1vZGUgPyBzdGVwLnRocmVhdCA6IHN0ZXAuY2V2YWw7XG4gICAgaWYgKGV4aXN0aW5nICYmIGV4aXN0aW5nLmRlcHRoID49IG1heERlcHRoKSB7XG4gICAgICB0aGlzLmxhc3RTdGFydGVkID0ge1xuICAgICAgICBwYXRoLFxuICAgICAgICBzdGVwcyxcbiAgICAgICAgdGhyZWF0TW9kZSxcbiAgICAgIH07XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgd29yazogV29yayA9IHtcbiAgICAgIHZhcmlhbnQ6IHRoaXMub3B0cy52YXJpYW50LmtleSxcbiAgICAgIHRocmVhZHM6IHRoaXMudGhyZWFkcygpLFxuICAgICAgaGFzaFNpemU6IHRoaXMuaGFzaFNpemUoKSxcbiAgICAgIHN0b3BSZXF1ZXN0ZWQ6IGZhbHNlLFxuICAgICAgaW5pdGlhbEZlbjogc3RlcHNbMF0uZmVuLFxuICAgICAgbW92ZXM6IFtdLFxuICAgICAgY3VycmVudEZlbjogc3RlcC5mZW4sXG4gICAgICBwYXRoLFxuICAgICAgcGx5OiBzdGVwLnBseSxcbiAgICAgIG1heERlcHRoLFxuICAgICAgbXVsdGlQdjogdGhpcy5tdWx0aVB2KCksXG4gICAgICB0aHJlYXRNb2RlLFxuICAgICAgZW1pdDogKGV2OiBUcmVlLkxvY2FsRXZhbCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5lbmFibGVkKCkpIHRoaXMub25FbWl0KGV2LCB3b3JrKTtcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGlmICh0aHJlYXRNb2RlKSB7XG4gICAgICBjb25zdCBjID0gc3RlcC5wbHkgJSAyID09PSAxID8gJ3cnIDogJ2InO1xuICAgICAgY29uc3QgZmVuID0gc3RlcC5mZW4ucmVwbGFjZSgvICh3fGIpIC8sICcgJyArIGMgKyAnICcpO1xuICAgICAgd29yay5jdXJyZW50RmVuID0gZmVuO1xuICAgICAgd29yay5pbml0aWFsRmVuID0gZmVuO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzZW5kIGZlbiBhZnRlciBsYXRlc3QgY2FzdGxpbmcgbW92ZSBhbmQgdGhlIGZvbGxvd2luZyBtb3Zlc1xuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzdGVwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBzID0gc3RlcHNbaV07XG4gICAgICAgIGlmIChzYW5JcnJldmVyc2libGUodGhpcy5vcHRzLnZhcmlhbnQua2V5LCBzLnNhbiEpKSB7XG4gICAgICAgICAgd29yay5tb3ZlcyA9IFtdO1xuICAgICAgICAgIHdvcmsuaW5pdGlhbEZlbiA9IHMuZmVuO1xuICAgICAgICB9IGVsc2Ugd29yay5tb3Zlcy5wdXNoKHMudWNpISk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTm90aWZ5IGFsbCBvdGhlciB0YWJzIHRvIGRpc2FibGUgY2V2YWwuXG4gICAgbGljaGVzcy5zdG9yYWdlLmZpcmUoJ2NldmFsLmRpc2FibGUnKTtcbiAgICBsaWNoZXNzLnRlbXBTdG9yYWdlLnNldCgnY2V2YWwuZW5hYmxlZC1hZnRlcicsIGxpY2hlc3Muc3RvcmFnZS5nZXQoJ2NldmFsLmRpc2FibGUnKSEpO1xuXG4gICAgaWYgKCF0aGlzLndvcmtlcikge1xuICAgICAgaWYgKHRoaXMuZXh0ZXJuYWxFbmdpbmUpIHRoaXMud29ya2VyID0gbmV3IEV4dGVybmFsV29ya2VyKHRoaXMuZXh0ZXJuYWxFbmdpbmUsIHRoaXMub3B0cy5yZWRyYXcpO1xuICAgICAgZWxzZSBpZiAodGhpcy50ZWNobm9sb2d5ID09ICdubnVlJylcbiAgICAgICAgdGhpcy53b3JrZXIgPSBuZXcgVGhyZWFkZWRXYXNtV29ya2VyKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGJhc2VVcmw6ICd2ZW5kb3Ivc3RvY2tmaXNoLW5udWUud2FzbS8nLFxuICAgICAgICAgICAgbW9kdWxlOiAnU3RvY2tmaXNoJyxcbiAgICAgICAgICAgIGRvd25sb2FkUHJvZ3Jlc3M6IHRocm90dGxlKDIwMCwgbWIgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmRvd25sb2FkUHJvZ3Jlc3MobWIpO1xuICAgICAgICAgICAgICB0aGlzLm9wdHMucmVkcmF3KCk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHZlcnNpb246ICdiNjkzOWQnLFxuICAgICAgICAgICAgd2FzbU1lbW9yeTogc2hhcmVkV2FzbU1lbW9yeSgyMDQ4LCB0aGlzLnBsYXRmb3JtLm1heFdhc21QYWdlcygyMDQ4KSksXG4gICAgICAgICAgICBjYWNoZTogd2luZG93LmluZGV4ZWREQiAmJiBuZXcgQ2FjaGUoJ2NldmFsLXdhc20tY2FjaGUnKSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRoaXMub3B0cy5yZWRyYXdcbiAgICAgICAgKTtcbiAgICAgIGVsc2UgaWYgKHRoaXMudGVjaG5vbG9neSA9PSAnaGNlJylcbiAgICAgICAgdGhpcy53b3JrZXIgPSBuZXcgVGhyZWFkZWRXYXNtV29ya2VyKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGJhc2VVcmw6IHRoaXMub2ZmaWNpYWxTdG9ja2Zpc2ggPyAndmVuZG9yL3N0b2NrZmlzaC53YXNtLycgOiAndmVuZG9yL3N0b2NrZmlzaC1tdi53YXNtLycsXG4gICAgICAgICAgICBtb2R1bGU6IHRoaXMub2ZmaWNpYWxTdG9ja2Zpc2ggPyAnU3RvY2tmaXNoJyA6ICdTdG9ja2Zpc2hNdicsXG4gICAgICAgICAgICB2ZXJzaW9uOiAnYTAyMmZhJyxcbiAgICAgICAgICAgIHdhc21NZW1vcnk6IHNoYXJlZFdhc21NZW1vcnkoMTAyNCwgdGhpcy5wbGF0Zm9ybS5tYXhXYXNtUGFnZXMoMTA4OCkpLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdGhpcy5vcHRzLnJlZHJhd1xuICAgICAgICApO1xuICAgICAgZWxzZVxuICAgICAgICB0aGlzLndvcmtlciA9IG5ldyBXZWJXb3JrZXIoXG4gICAgICAgICAge1xuICAgICAgICAgICAgdXJsOlxuICAgICAgICAgICAgICB0aGlzLnRlY2hub2xvZ3kgPT0gJ3dhc20nID8gJ3ZlbmRvci9zdG9ja2Zpc2guanMvc3RvY2tmaXNoLndhc20uanMnIDogJ3ZlbmRvci9zdG9ja2Zpc2guanMvc3RvY2tmaXNoLmpzJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRoaXMub3B0cy5yZWRyYXdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLndvcmtlci5zdGFydCh3b3JrKTtcblxuICAgIHRoaXMubGFzdFN0YXJ0ZWQgPSB7XG4gICAgICBwYXRoLFxuICAgICAgc3RlcHMsXG4gICAgICB0aHJlYXRNb2RlLFxuICAgIH07XG4gIH07XG5cbiAgZ29EZWVwZXIgPSAoKSA9PiB7XG4gICAgdGhpcy5pc0RlZXBlcih0cnVlKTtcbiAgICBpZiAodGhpcy5sYXN0U3RhcnRlZCkge1xuICAgICAgaWYgKHRoaXMuaW5maW5pdGUoKSkge1xuICAgICAgICBpZiAodGhpcy5jdXJFdmFsKSB0aGlzLm9wdHMuZW1pdCh0aGlzLmN1ckV2YWwsIHRoaXMubGFzdFN0YXJ0ZWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIHRoaXMuZG9TdGFydCh0aGlzLmxhc3RTdGFydGVkLnBhdGgsIHRoaXMubGFzdFN0YXJ0ZWQuc3RlcHMsIHRoaXMubGFzdFN0YXJ0ZWQudGhyZWF0TW9kZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMub3B0cy5yZWRyYXcoKTtcbiAgfTtcblxuICBzdG9wID0gKCkgPT4ge1xuICAgIHRoaXMud29ya2VyPy5zdG9wKCk7XG4gIH07XG5cbiAgc2hvd2luZ0Nsb3VkID0gKCk6IGJvb2xlYW4gPT4ge1xuICAgIGlmICghdGhpcy5sYXN0U3RhcnRlZCkgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IGN1cnIgPSB0aGlzLmxhc3RTdGFydGVkLnN0ZXBzW3RoaXMubGFzdFN0YXJ0ZWQuc3RlcHMubGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuICEhY3Vyci5jZXZhbD8uY2xvdWQ7XG4gIH07XG5cbiAgc3RhcnQgPSAocGF0aDogc3RyaW5nLCBzdGVwczogU3RlcFtdLCB0aHJlYXRNb2RlPzogYm9vbGVhbikgPT4ge1xuICAgIHRoaXMuaXNEZWVwZXIoZmFsc2UpO1xuICAgIHRoaXMuZG9TdGFydChwYXRoLCBzdGVwcywgISF0aHJlYXRNb2RlKTtcbiAgfTtcblxuICBnZXRTdGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy53b3JrZXIgPyB0aGlzLndvcmtlci5nZXRTdGF0ZSgpIDogQ2V2YWxTdGF0ZS5Jbml0aWFsO1xuICB9XG5cbiAgc2V0VGhyZWFkcyA9ICh0aHJlYWRzOiBudW1iZXIpID0+IGxpY2hlc3Muc3RvcmFnZS5zZXQodGhpcy5zdG9yYWdlS2V5KCdjZXZhbC50aHJlYWRzJyksIHRocmVhZHMudG9TdHJpbmcoKSk7XG4gIHNldEhhc2hTaXplID0gKGhhc2g6IG51bWJlcikgPT4gbGljaGVzcy5zdG9yYWdlLnNldCh0aGlzLnN0b3JhZ2VLZXkoJ2NldmFsLmhhc2gtc2l6ZScpLCBoYXNoLnRvU3RyaW5nKCkpO1xuXG4gIHNldEhvdmVyaW5nID0gKGZlbjogRmVuLCB1Y2k/OiBVY2kpID0+IHtcbiAgICB0aGlzLmhvdmVyaW5nKHVjaSA/IHsgZmVuLCB1Y2kgfSA6IG51bGwpO1xuICAgIHRoaXMub3B0cy5zZXRBdXRvU2hhcGVzKCk7XG4gIH07XG4gIHNldFB2Qm9hcmQgPSAocHZCb2FyZDogUHZCb2FyZCB8IG51bGwpID0+IHtcbiAgICB0aGlzLnB2Qm9hcmQocHZCb2FyZCk7XG4gICAgdGhpcy5vcHRzLnJlZHJhdygpO1xuICB9O1xuICB0b2dnbGUgPSAoKSA9PiB7XG4gICAgaWYgKCF0aGlzLnBvc3NpYmxlIHx8ICF0aGlzLmFsbG93ZWQoKSkgcmV0dXJuO1xuICAgIHRoaXMuc3RvcCgpO1xuICAgIGlmICghdGhpcy5lbmFibGVkKCkgJiYgIWRvY3VtZW50LmhpZGRlbikge1xuICAgICAgY29uc3QgZGlzYWJsZSA9IGxpY2hlc3Muc3RvcmFnZS5nZXQoJ2NldmFsLmRpc2FibGUnKSB8fCBjZXZhbERpc2FibGVkU2VudGluZWw7XG4gICAgICBpZiAoZGlzYWJsZSkgbGljaGVzcy50ZW1wU3RvcmFnZS5zZXQoJ2NldmFsLmVuYWJsZWQtYWZ0ZXInLCBkaXNhYmxlKTtcbiAgICAgIHRoaXMuZW5hYmxlZCh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGljaGVzcy50ZW1wU3RvcmFnZS5zZXQoJ2NldmFsLmVuYWJsZWQtYWZ0ZXInLCAnJyk7XG4gICAgICB0aGlzLmVuYWJsZWQoZmFsc2UpO1xuICAgIH1cbiAgfTtcbiAgc2VsZWN0RW5naW5lID0gKGlkOiBzdHJpbmcpID0+IHtcbiAgICB0aGlzLnNlbGVjdGVkRW5naW5lKHRoaXMub3B0cy5leHRlcm5hbEVuZ2luZXM/LmZpbmQoZSA9PiBlLmlkID09IGlkKSA/IGlkIDogJ2xpY2hlc3MnKTtcbiAgICBsaWNoZXNzLnJlbG9hZCgpO1xuICB9O1xuICBjYW5Hb0RlZXBlciA9ICgpID0+XG4gICAgdGhpcy5jdXJEZXB0aCgpIDwgOTkgJiZcbiAgICAhdGhpcy5pc0RlZXBlcigpICYmXG4gICAgKCghdGhpcy5pbmZpbml0ZSgpICYmIHRoaXMuZ2V0U3RhdGUoKSAhPT0gQ2V2YWxTdGF0ZS5Db21wdXRpbmcpIHx8IHRoaXMuc2hvd2luZ0Nsb3VkKCkpO1xuICBzaG9ydEVuZ2luZU5hbWUgPSAoKSA9PiBlbmdpbmVOYW1lKHRoaXMudGVjaG5vbG9neSwgdGhpcy5leHRlcm5hbEVuZ2luZSk7XG4gIGxvbmdFbmdpbmVOYW1lID0gKCkgPT4gdGhpcy53b3JrZXI/LmVuZ2luZU5hbWUoKTtcbiAgZGVzdHJveSA9ICgpID0+IHRoaXMud29ya2VyPy5kZXN0cm95KCk7XG59XG4iXX0=