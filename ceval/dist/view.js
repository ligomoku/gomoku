import * as winningChances from './winningChances';
import stepwiseScroll from 'common/wheel';
import { bind } from 'common/snabbdom';
import { defined, notNull } from 'common';
import { h } from 'snabbdom';
import { lichessRules } from 'chessops/compat';
import { makeSanAndPlay } from 'chessops/san';
import { opposite, parseUci } from 'chessops/util';
import { parseFen, makeBoardFen } from 'chessops/fen';
import { renderEval } from './util';
import { setupPosition } from 'chessops/variant';
import { uciToMove } from 'chessground/util';
import { CevalState } from './worker';
let gaugeLast = 0;
const gaugeTicks = [...Array(8).keys()].map(i => h(i === 3 ? 'tick.zero' : 'tick', { attrs: { style: `height: ${(i + 1) * 12.5}%` } }));
function localEvalInfo(ctrl, evs) {
    const ceval = ctrl.getCeval(), state = ceval.getState(), trans = ctrl.trans;
    if (!evs.client) {
        if (!ceval.analysable)
            return ['Engine cannot analyze this position'];
        if (state == CevalState.Failed)
            return [trans.noarg('engineFailed')];
        const mb = ceval.downloadProgress() / 1024 / 1024;
        const localEvalText = state == CevalState.Loading
            ? trans.noarg('loadingEngine') + (mb >= 1 ? ` (${mb.toFixed(1)} MiB)` : '')
            : trans.noarg('calculatingMoves');
        return [evs.server && ctrl.nextNodeBest() ? trans.noarg('usingServerAnalysis') : localEvalText];
    }
    const depth = evs.client.depth || 0;
    const t = evs.client.cloud
        ? [trans('depthX', depth), h('span.cloud', { attrs: { title: trans.noarg('cloudAnalysis') } }, 'Cloud')]
        : [trans('depthX', depth + '/' + Math.max(depth, evs.client.maxDepth))];
    if (ceval.canGoDeeper())
        t.push(h('a.deeper', {
            attrs: {
                title: trans.noarg('goDeeper'),
                'data-icon': '',
            },
            hook: bind('click', ceval.goDeeper),
        }));
    else if (!evs.client.cloud && evs.client.knps)
        t.push(', ' + Math.round(evs.client.knps) + 'k nodes/s');
    return t;
}
function threatInfo(ctrl, threat) {
    if (!threat)
        return ctrl.trans.noarg('calculatingMoves');
    let t = ctrl.trans('depthX', (threat.depth || 0) + '/' + threat.maxDepth);
    if (threat.knps)
        t += ', ' + Math.round(threat.knps) + 'k nodes/s';
    return t;
}
function threatButton(ctrl) {
    if (ctrl.disableThreatMode && ctrl.disableThreatMode())
        return null;
    return h('a.show-threat', {
        class: {
            active: ctrl.threatMode(),
            hidden: !!ctrl.getNode().check,
        },
        attrs: {
            'data-icon': '',
            title: ctrl.trans.noarg('showThreat') + ' (x)',
        },
        hook: bind('click', ctrl.toggleThreatMode),
    });
}
function engineName(ctrl) {
    return [
        h('span', { attrs: { title: ctrl.longEngineName() || '' } }, ctrl.shortEngineName()),
        ctrl.technology == 'external'
            ? h('span.technology.good', {
                attrs: {
                    title: 'Engine running outside of the browser',
                },
            }, 'EXTERNAL')
            : ctrl.technology == 'nnue'
                ? h('span.technology.good', {
                    attrs: {
                        title: 'Multi-threaded WebAssembly with SIMD (efficiently updatable neural network, using 4x smaller net by Sopel97)',
                    },
                }, 'NNUE')
                : ctrl.technology == 'hce'
                    ? h('span.technology.good', { attrs: { title: 'Multi-threaded WebAssembly (classical hand crafted evaluation)' } }, 'HCE')
                    : ctrl.technology == 'wasm'
                        ? h('span.technology', { attrs: { title: 'Single-threaded WebAssembly fallback (slow)' } }, 'WASM')
                        : h('span.technology', { attrs: { title: 'Single-threaded JavaScript fallback (very slow)' } }, 'ASMJS'),
    ];
}
const serverNodes = 4e6;
export function getBestEval(evs) {
    const serverEv = evs.server, localEv = evs.client;
    if (!serverEv)
        return localEv;
    if (!localEv)
        return serverEv;
    // Prefer localEv if it exceeds fishnet node limit or finds a better mate.
    if (localEv.nodes > serverNodes ||
        (typeof localEv.mate !== 'undefined' &&
            (typeof serverEv.mate === 'undefined' || Math.abs(localEv.mate) < Math.abs(serverEv.mate))))
        return localEv;
    return serverEv;
}
export function renderGauge(ctrl) {
    if (ctrl.ongoing || !ctrl.showEvalGauge())
        return;
    const bestEv = getBestEval(ctrl.currentEvals());
    let ev;
    if (bestEv) {
        ev = winningChances.povChances('white', bestEv);
        gaugeLast = ev;
    }
    else
        ev = gaugeLast;
    return h('div.eval-gauge', {
        class: {
            empty: ev === null,
            reverse: ctrl.getOrientation() === 'black',
        },
    }, [h('div.black', { attrs: { style: `height: ${100 - (ev + 1) * 50}%` } }), ...gaugeTicks]);
}
export function renderCeval(ctrl) {
    const instance = ctrl.getCeval(), trans = ctrl.trans;
    if (!instance.allowed() || !instance.possible || !ctrl.showComputer())
        return;
    const enabled = instance.enabled(), evs = ctrl.currentEvals(), threatMode = ctrl.threatMode(), threat = threatMode && ctrl.getNode().threat, bestEv = threat || getBestEval(evs);
    let pearl, percent;
    if (bestEv && typeof bestEv.cp !== 'undefined') {
        pearl = renderEval(bestEv.cp);
        percent = evs.client
            ? evs.client.cloud
                ? 100
                : Math.min(100, Math.round((100 * evs.client.depth) / evs.client.maxDepth))
            : 0;
    }
    else if (bestEv && defined(bestEv.mate)) {
        pearl = '#' + bestEv.mate;
        percent = 100;
    }
    else {
        if (!enabled)
            pearl = h('i');
        else if (ctrl.outcome() || ctrl.getNode().threefold)
            pearl = '-';
        else if (instance.getState() === CevalState.Failed)
            pearl = h('i.is-red', { attrs: { 'data-icon': '\ue05d' } });
        else
            pearl = h('i.ddloader');
        percent = 0;
    }
    if (threatMode) {
        if (threat)
            percent = Math.min(100, Math.round((100 * threat.depth) / threat.maxDepth));
        else
            percent = 0;
    }
    const progressBar = enabled
        ? h('div.bar', h('span', {
            class: { threat: threatMode },
            attrs: { style: `width: ${percent}%` },
            hook: {
                postpatch: (old, vnode) => {
                    if (old.data.percent > percent || !!old.data.threatMode != threatMode) {
                        const el = vnode.elm;
                        const p = el.parentNode;
                        p.removeChild(el);
                        p.appendChild(el);
                    }
                    vnode.data.percent = percent;
                    vnode.data.threatMode = threatMode;
                },
            },
        }))
        : null;
    const body = enabled
        ? [
            h('pearl', [pearl]),
            h('div.engine', [
                ...(threatMode ? [trans.noarg('showThreat')] : engineName(instance)),
                h('span.info', ctrl.outcome()
                    ? [trans.noarg('gameOver')]
                    : ctrl.getNode().threefold
                        ? [trans.noarg('threefoldRepetition')]
                        : threatMode
                            ? [threatInfo(ctrl, threat)]
                            : localEvalInfo(ctrl, evs)),
            ]),
        ]
        : [
            pearl ? h('pearl', [pearl]) : null,
            h('help', [
                ...engineName(instance),
                h('br'),
                instance.analysable ? trans.noarg('inLocalBrowser') : 'Engine cannot analyse this game',
            ]),
        ];
    const switchButton = ctrl.mandatoryCeval && ctrl.mandatoryCeval()
        ? null
        : h('div.switch', {
            attrs: { title: trans.noarg('toggleLocalEvaluation') + ' (L)' },
        }, [
            h('input#analyse-toggle-ceval.cmn-toggle.cmn-toggle--subtle', {
                attrs: {
                    type: 'checkbox',
                    checked: enabled,
                    disabled: !instance.analysable,
                },
                hook: bind('change', ctrl.toggleCeval),
            }),
            h('label', { attrs: { for: 'analyse-toggle-ceval' } }),
        ]);
    return h('div.ceval' + (enabled ? '.enabled' : ''), {
        class: {
            computing: percent < 100 && instance.getState() === CevalState.Computing,
        },
    }, [progressBar, ...body, threatButton(ctrl), switchButton]);
}
function getElFen(el) {
    return el.getAttribute('data-fen');
}
function getElUci(e) {
    return ($(e.target)
        .closest('div.pv')
        .attr('data-uci') || undefined);
}
function getElUciList(e) {
    return getElPvMoves(e)
        .filter(notNull)
        .map(move => move.split('|')[1]);
}
function getElPvMoves(e) {
    const pvMoves = [];
    $(e.target)
        .closest('div.pv')
        .children()
        .filter('span.pv-san')
        .each(function () {
        pvMoves.push($(this).attr('data-board'));
    });
    return pvMoves;
}
function checkHover(el, instance) {
    lichess.requestIdleCallback(() => instance.setHovering(getElFen(el), $(el).find('div.pv:hover').attr('data-uci') || undefined), 500);
}
export function renderPvs(ctrl) {
    const instance = ctrl.getCeval();
    if (!instance.allowed() || !instance.possible || !instance.enabled())
        return;
    const multiPv = instance.multiPv(), node = ctrl.getNode(), setup = parseFen(node.fen).unwrap();
    let pvs, threat = false, pvMoves, pvIndex;
    if (ctrl.threatMode() && node.threat) {
        pvs = node.threat.pvs;
        threat = true;
    }
    else if (node.ceval)
        pvs = node.ceval.pvs;
    else
        pvs = [];
    if (threat) {
        setup.turn = opposite(setup.turn);
        if (setup.turn == 'white')
            setup.fullmoves += 1;
    }
    const pos = setupPosition(lichessRules(instance.opts.variant.key), setup);
    return h('div.pv_box', {
        attrs: { 'data-fen': node.fen },
        hook: {
            insert: vnode => {
                const el = vnode.elm;
                el.addEventListener('mouseover', (e) => {
                    const instance = ctrl.getCeval();
                    instance.setHovering(getElFen(el), getElUci(e));
                    const pvBoard = e.target.dataset.board;
                    if (pvBoard) {
                        pvIndex = Number(e.target.dataset.moveIndex);
                        pvMoves = getElPvMoves(e);
                        const [fen, uci] = pvBoard.split('|');
                        instance.setPvBoard({ fen, uci });
                    }
                });
                el.addEventListener('wheel', stepwiseScroll((e, scroll) => {
                    e.preventDefault();
                    if (pvIndex != null && pvMoves != null) {
                        if (e.deltaY < 0 && pvIndex > 0 && scroll)
                            pvIndex -= 1;
                        else if (e.deltaY > 0 && pvIndex < pvMoves.length - 1 && scroll)
                            pvIndex += 1;
                        const pvBoard = pvMoves[pvIndex];
                        if (pvBoard) {
                            const [fen, uci] = pvBoard.split('|');
                            ctrl.getCeval().setPvBoard({ fen, uci });
                        }
                    }
                }));
                el.addEventListener('mouseout', () => ctrl.getCeval().setHovering(getElFen(el)));
                for (const event of ['touchstart', 'mousedown']) {
                    el.addEventListener(event, (e) => {
                        const uciList = getElUciList(e);
                        if (uciList.length > (pvIndex !== null && pvIndex !== void 0 ? pvIndex : 0) && !ctrl.threatMode()) {
                            ctrl.playUciList(uciList.slice(0, (pvIndex !== null && pvIndex !== void 0 ? pvIndex : 0) + 1));
                            e.preventDefault();
                        }
                    });
                }
                el.addEventListener('mouseleave', () => {
                    ctrl.getCeval().setPvBoard(null);
                    pvIndex = null;
                });
                checkHover(el, instance);
            },
            postpatch: (_, vnode) => checkHover(vnode.elm, instance),
        },
    }, [
        ...[...Array(multiPv).keys()].map(i => renderPv(threat, multiPv, pvs[i], pos.isOk ? pos.value : undefined)),
        renderPvBoard(ctrl),
    ]);
}
const MAX_NUM_MOVES = 16;
function renderPv(threat, multiPv, pv, pos) {
    const data = {};
    const children = [renderPvWrapToggle()];
    if (pv) {
        if (!threat) {
            data.attrs = { 'data-uci': pv.moves[0] };
        }
        if (multiPv > 1) {
            children.push(h('strong', defined(pv.mate) ? '#' + pv.mate : renderEval(pv.cp)));
        }
        if (pos) {
            children.push(...renderPvMoves(pos.clone(), pv.moves.slice(0, MAX_NUM_MOVES)));
        }
    }
    return h('div.pv.pv--nowrap', data, children);
}
function renderPvWrapToggle() {
    return h('span.pv-wrap-toggle', {
        hook: {
            insert: (vnode) => {
                const el = vnode.elm;
                for (const event of ['touchstart', 'mousedown']) {
                    el.addEventListener(event, (e) => {
                        e.stopPropagation();
                        e.preventDefault();
                        $(el).closest('.pv').toggleClass('pv--nowrap');
                    });
                }
            },
        },
    });
}
function renderPvMoves(pos, pv) {
    const vnodes = [];
    let key = makeBoardFen(pos.board);
    for (let i = 0; i < pv.length; i++) {
        let text;
        if (pos.turn === 'white') {
            text = `${pos.fullmoves}.`;
        }
        else if (i === 0) {
            text = `${pos.fullmoves}...`;
        }
        if (text) {
            vnodes.push(h('span', { key: text }, text));
        }
        const uci = pv[i];
        const san = makeSanAndPlay(pos, parseUci(uci));
        const fen = makeBoardFen(pos.board); // Chessground uses only board fen
        if (san === '--') {
            break;
        }
        key += '|' + uci;
        vnodes.push(h('span.pv-san', {
            key,
            attrs: {
                'data-move-index': i,
                'data-board': `${fen}|${uci}`,
            },
        }, san));
    }
    return vnodes;
}
function renderPvBoard(ctrl) {
    const instance = ctrl.getCeval();
    const pvBoard = instance.pvBoard();
    if (!pvBoard) {
        return;
    }
    const { fen, uci } = pvBoard;
    const orientation = ctrl.getOrientation();
    const cgConfig = {
        fen,
        lastMove: uciToMove(uci),
        orientation,
        coordinates: false,
        viewOnly: true,
        drawable: {
            enabled: false,
            visible: false,
        },
    };
    const cgVNode = h('div.cg-wrap.is2d', {
        hook: {
            insert: (vnode) => (vnode.elm._cg = window.Chessground(vnode.elm, cgConfig)),
            update: (vnode) => vnode.elm._cg.set(cgConfig),
            destroy: (vnode) => vnode.elm._cg.destroy(),
        },
    });
    return h('div.pv-board', h('div.pv-board-square', cgVNode));
}
//# sourceMappingURL=data:application/json;base64,