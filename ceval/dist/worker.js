import { Protocol } from './protocol';
import { randomToken } from 'common/random';
import { readNdJson } from 'common/ndjson';
export var CevalState;
(function (CevalState) {
    CevalState[CevalState["Initial"] = 0] = "Initial";
    CevalState[CevalState["Loading"] = 1] = "Loading";
    CevalState[CevalState["Idle"] = 2] = "Idle";
    CevalState[CevalState["Computing"] = 3] = "Computing";
    CevalState[CevalState["Failed"] = 4] = "Failed";
})(CevalState || (CevalState = {}));
export class WebWorker {
    constructor(opts, redraw) {
        this.opts = opts;
        this.redraw = redraw;
        this.failed = false;
        this.protocol = new Protocol();
    }
    getState() {
        return !this.worker
            ? CevalState.Initial
            : this.failed
                ? CevalState.Failed
                : !this.protocol.engineName
                    ? CevalState.Loading
                    : this.protocol.isComputing()
                        ? CevalState.Computing
                        : CevalState.Idle;
    }
    start(work) {
        this.protocol.compute(work);
        if (!this.worker) {
            this.worker = new Worker(lichess.assetUrl(this.opts.url, { sameDomain: true }));
            this.worker.addEventListener('message', e => this.protocol.received(e.data), true);
            this.worker.addEventListener('error', err => {
                console.error(err);
                this.failed = true;
                this.redraw();
            }, true);
            this.protocol.connected(cmd => { var _a; return (_a = this.worker) === null || _a === void 0 ? void 0 : _a.postMessage(cmd); });
        }
    }
    stop() {
        this.protocol.compute(undefined);
    }
    engineName() {
        return this.protocol.engineName;
    }
    destroy() {
        var _a;
        (_a = this.worker) === null || _a === void 0 ? void 0 : _a.terminate();
    }
}
export class ThreadedWasmWorker {
    constructor(opts, redraw) {
        this.opts = opts;
        this.redraw = redraw;
    }
    getState() {
        return !ThreadedWasmWorker.sf[this.opts.module]
            ? CevalState.Initial
            : ThreadedWasmWorker.failed[this.opts.module]
                ? CevalState.Failed
                : !this.getProtocol().engineName
                    ? CevalState.Loading
                    : this.getProtocol().isComputing()
                        ? CevalState.Computing
                        : CevalState.Idle;
    }
    getProtocol() {
        return ThreadedWasmWorker.protocols[this.opts.module];
    }
    async boot() {
        const version = this.opts.version;
        const cache = this.opts.cache;
        // Fetch WASM file ourselves, for caching and progress indication.
        let wasmBinary;
        if (cache) {
            const wasmPath = this.opts.baseUrl + 'stockfish.wasm';
            try {
                const [found, data] = await cache.get(wasmPath, version);
                if (found)
                    wasmBinary = data;
            }
            catch (e) {
                console.log('ceval: idb cache load failed:', e);
            }
            if (!wasmBinary) {
                wasmBinary = await new Promise((resolve, reject) => {
                    const req = new XMLHttpRequest();
                    req.open('GET', lichess.assetUrl(wasmPath, { version }), true);
                    req.responseType = 'arraybuffer';
                    req.onerror = event => reject(event);
                    req.onprogress = event => { var _a, _b; return (_b = (_a = this.opts).downloadProgress) === null || _b === void 0 ? void 0 : _b.call(_a, event.loaded); };
                    req.onload = _ => {
                        var _a, _b;
                        (_b = (_a = this.opts).downloadProgress) === null || _b === void 0 ? void 0 : _b.call(_a, 0);
                        resolve(req.response);
                    };
                    req.send();
                });
            }
            try {
                await cache.set(wasmPath, version, wasmBinary);
            }
            catch (e) {
                console.log('ceval: idb cache store failed:', e);
            }
        }
        // Load Emscripten module.
        await lichess.loadScript(this.opts.baseUrl + 'stockfish.js', { version });
        const sf = await window[this.opts.module]({
            wasmBinary,
            locateFile: (path) => lichess.assetUrl(this.opts.baseUrl + path, { version, sameDomain: path.endsWith('.worker.js') }),
            wasmMemory: this.opts.wasmMemory,
        });
        const protocol = this.getProtocol();
        sf.addMessageListener(protocol.received.bind(protocol));
        protocol.connected(msg => sf.postMessage(msg));
        return sf;
    }
    start(work) {
        this.getProtocol().compute(work);
        if (!ThreadedWasmWorker.sf[this.opts.module]) {
            ThreadedWasmWorker.sf[this.opts.module] = this.boot().then(() => { }, err => {
                console.error(err);
                ThreadedWasmWorker.failed[this.opts.module] = true;
                this.redraw();
            });
        }
    }
    stop() {
        this.getProtocol().compute(undefined);
    }
    engineName() {
        return this.getProtocol().engineName;
    }
    destroy() {
        // Terminated instances to not get freed reliably
        // (https://github.com/lichess-org/lila/issues/7334). So instead of
        // destroying, just stop instances and keep them around for reuse.
        this.stop();
    }
}
ThreadedWasmWorker.failed = { Stockfish: false, StockfishMv: false };
ThreadedWasmWorker.protocols = { Stockfish: new Protocol(), StockfishMv: new Protocol() };
ThreadedWasmWorker.sf = {};
export class ExternalWorker {
    constructor(opts, redraw) {
        this.opts = opts;
        this.redraw = redraw;
        this.state = CevalState.Initial;
        this.sessionId = randomToken();
    }
    getState() {
        return this.state;
    }
    start(work) {
        this.stop();
        this.state = CevalState.Loading;
        this.req = new AbortController();
        this.analyse(work, this.req.signal);
    }
    async analyse(work, signal) {
        try {
            const url = new URL(`${this.opts.endpoint}/api/external-engine/${this.opts.id}/analyse`);
            const infinite = work.maxDepth >= 99;
            const res = await fetch(url.href, {
                signal,
                method: 'post',
                cache: 'default',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'omit',
                body: JSON.stringify({
                    clientSecret: this.opts.clientSecret,
                    work: {
                        sessionId: this.sessionId,
                        threads: work.threads,
                        hash: work.hashSize || 16,
                        infinite,
                        multiPv: work.multiPv,
                        variant: work.variant,
                        initialFen: work.initialFen,
                        moves: work.moves,
                    },
                }),
            });
            await readNdJson(res, line => {
                var _a, _b, _c;
                this.state = CevalState.Computing;
                work.emit({
                    fen: work.currentFen,
                    maxDepth: infinite ? 99 : this.opts.defaultDepth,
                    depth: ((_a = line.pvs[0]) === null || _a === void 0 ? void 0 : _a.depth) || 0,
                    knps: line.nodes / Math.max(line.time, 1),
                    nodes: line.nodes,
                    cp: (_b = line.pvs[0]) === null || _b === void 0 ? void 0 : _b.cp,
                    mate: (_c = line.pvs[0]) === null || _c === void 0 ? void 0 : _c.mate,
                    millis: line.time,
                    pvs: line.pvs,
                });
            });
            this.state = CevalState.Initial;
        }
        catch (err) {
            if (err.name !== 'AbortError') {
                this.state = CevalState.Failed;
            }
            else {
                this.state = CevalState.Initial;
            }
        }
        this.redraw();
    }
    stop() {
        var _a;
        (_a = this.req) === null || _a === void 0 ? void 0 : _a.abort();
    }
    engineName() {
        return this.opts.name;
    }
    destroy() {
        this.stop();
    }
}
//# sourceMappingURL=data:application/json;base64,