export function isEvalBetter(a, b) {
    return a.depth > b.depth || (a.depth === b.depth && a.nodes > b.nodes);
}
export function renderEval(e) {
    e = Math.max(Math.min(Math.round(e / 10) / 10, 99), -99);
    return (e > 0 ? '+' : '') + e.toFixed(1);
}
export function sanIrreversible(variant, san) {
    if (san.startsWith('O-O'))
        return true;
    if (variant === 'crazyhouse')
        return false;
    if (san.includes('x'))
        return true; // capture
    if (san[0].toLowerCase() === san[0])
        return true; // pawn move
    return variant === 'threeCheck' && san.includes('+');
}
export const pow2floor = (n) => {
    let pow2 = 1;
    while (pow2 * 2 <= n)
        pow2 *= 2;
    return pow2;
};
export const sharedWasmMemory = (initial, maximum) => {
    while (true) {
        try {
            return new WebAssembly.Memory({ shared: true, initial, maximum });
        }
        catch (e) {
            if (e instanceof RangeError) {
                if (initial === maximum)
                    throw e;
                maximum = Math.max(initial, Math.floor(maximum / 2));
            }
            else
                throw e;
        }
    }
};
export function defaultDepth(technology, threads, multiPv) {
    const extraDepth = Math.min(Math.max(threads - multiPv, 0), 6);
    switch (technology) {
        case 'asmjs':
            return 18;
        case 'wasm':
            return 20;
        case 'external':
            return 24 + extraDepth;
        default:
            return 22 + extraDepth;
    }
}
export function engineName(technology, externalEngine) {
    if (externalEngine)
        return externalEngine.name;
    switch (technology) {
        case 'wasm':
        case 'asmjs':
            return 'Stockfish 10+';
        case 'hce':
            return 'Stockfish 11+';
        default:
            return 'Stockfish 14+';
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sVUFBVSxZQUFZLENBQUMsQ0FBa0IsRUFBRSxDQUFrQjtJQUNqRSxPQUFPLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN6RSxDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxDQUFTO0lBQ2xDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDekQsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBRUQsTUFBTSxVQUFVLGVBQWUsQ0FBQyxPQUFtQixFQUFFLEdBQVc7SUFDOUQsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQztRQUFFLE9BQU8sSUFBSSxDQUFDO0lBQ3ZDLElBQUksT0FBTyxLQUFLLFlBQVk7UUFBRSxPQUFPLEtBQUssQ0FBQztJQUMzQyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO1FBQUUsT0FBTyxJQUFJLENBQUMsQ0FBQyxVQUFVO0lBQzlDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFBRSxPQUFPLElBQUksQ0FBQyxDQUFDLFlBQVk7SUFDOUQsT0FBTyxPQUFPLEtBQUssWUFBWSxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdkQsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFDLENBQVMsRUFBRSxFQUFFO0lBQ3JDLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQztJQUNiLE9BQU8sSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQUUsSUFBSSxJQUFJLENBQUMsQ0FBQztJQUNoQyxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsT0FBZSxFQUFFLE9BQWUsRUFBc0IsRUFBRTtJQUN2RixPQUFPLElBQUksRUFBRTtRQUNYLElBQUk7WUFDRixPQUFPLElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDbkU7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLElBQUksQ0FBQyxZQUFZLFVBQVUsRUFBRTtnQkFDM0IsSUFBSSxPQUFPLEtBQUssT0FBTztvQkFBRSxNQUFNLENBQUMsQ0FBQztnQkFDakMsT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDdEQ7O2dCQUFNLE1BQU0sQ0FBQyxDQUFDO1NBQ2hCO0tBQ0Y7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLFVBQVUsWUFBWSxDQUFDLFVBQTJCLEVBQUUsT0FBZSxFQUFFLE9BQWU7SUFDeEYsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sR0FBRyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDL0QsUUFBUSxVQUFVLEVBQUU7UUFDbEIsS0FBSyxPQUFPO1lBQ1YsT0FBTyxFQUFFLENBQUM7UUFDWixLQUFLLE1BQU07WUFDVCxPQUFPLEVBQUUsQ0FBQztRQUNaLEtBQUssVUFBVTtZQUNiLE9BQU8sRUFBRSxHQUFHLFVBQVUsQ0FBQztRQUN6QjtZQUNFLE9BQU8sRUFBRSxHQUFHLFVBQVUsQ0FBQztLQUMxQjtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFDLFVBQTJCLEVBQUUsY0FBK0I7SUFDckYsSUFBSSxjQUFjO1FBQUUsT0FBTyxjQUFjLENBQUMsSUFBSSxDQUFDO0lBQy9DLFFBQVEsVUFBVSxFQUFFO1FBQ2xCLEtBQUssTUFBTSxDQUFDO1FBQ1osS0FBSyxPQUFPO1lBQ1YsT0FBTyxlQUFlLENBQUM7UUFDekIsS0FBSyxLQUFLO1lBQ1IsT0FBTyxlQUFlLENBQUM7UUFDekI7WUFDRSxPQUFPLGVBQWUsQ0FBQztLQUMxQjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDZXZhbFRlY2hub2xvZ3kgfSBmcm9tICcuL3BsYXRmb3JtJztcbmltcG9ydCB7IEV4dGVybmFsRW5naW5lIH0gZnJvbSAnLi93b3JrZXInO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNFdmFsQmV0dGVyKGE6IFRyZWUuQ2xpZW50RXZhbCwgYjogVHJlZS5DbGllbnRFdmFsKTogYm9vbGVhbiB7XG4gIHJldHVybiBhLmRlcHRoID4gYi5kZXB0aCB8fCAoYS5kZXB0aCA9PT0gYi5kZXB0aCAmJiBhLm5vZGVzID4gYi5ub2Rlcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJFdmFsKGU6IG51bWJlcik6IHN0cmluZyB7XG4gIGUgPSBNYXRoLm1heChNYXRoLm1pbihNYXRoLnJvdW5kKGUgLyAxMCkgLyAxMCwgOTkpLCAtOTkpO1xuICByZXR1cm4gKGUgPiAwID8gJysnIDogJycpICsgZS50b0ZpeGVkKDEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2FuSXJyZXZlcnNpYmxlKHZhcmlhbnQ6IFZhcmlhbnRLZXksIHNhbjogc3RyaW5nKTogYm9vbGVhbiB7XG4gIGlmIChzYW4uc3RhcnRzV2l0aCgnTy1PJykpIHJldHVybiB0cnVlO1xuICBpZiAodmFyaWFudCA9PT0gJ2NyYXp5aG91c2UnKSByZXR1cm4gZmFsc2U7XG4gIGlmIChzYW4uaW5jbHVkZXMoJ3gnKSkgcmV0dXJuIHRydWU7IC8vIGNhcHR1cmVcbiAgaWYgKHNhblswXS50b0xvd2VyQ2FzZSgpID09PSBzYW5bMF0pIHJldHVybiB0cnVlOyAvLyBwYXduIG1vdmVcbiAgcmV0dXJuIHZhcmlhbnQgPT09ICd0aHJlZUNoZWNrJyAmJiBzYW4uaW5jbHVkZXMoJysnKTtcbn1cblxuZXhwb3J0IGNvbnN0IHBvdzJmbG9vciA9IChuOiBudW1iZXIpID0+IHtcbiAgbGV0IHBvdzIgPSAxO1xuICB3aGlsZSAocG93MiAqIDIgPD0gbikgcG93MiAqPSAyO1xuICByZXR1cm4gcG93Mjtcbn07XG5cbmV4cG9ydCBjb25zdCBzaGFyZWRXYXNtTWVtb3J5ID0gKGluaXRpYWw6IG51bWJlciwgbWF4aW11bTogbnVtYmVyKTogV2ViQXNzZW1ibHkuTWVtb3J5ID0+IHtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG5ldyBXZWJBc3NlbWJseS5NZW1vcnkoeyBzaGFyZWQ6IHRydWUsIGluaXRpYWwsIG1heGltdW0gfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUgaW5zdGFuY2VvZiBSYW5nZUVycm9yKSB7XG4gICAgICAgIGlmIChpbml0aWFsID09PSBtYXhpbXVtKSB0aHJvdyBlO1xuICAgICAgICBtYXhpbXVtID0gTWF0aC5tYXgoaW5pdGlhbCwgTWF0aC5mbG9vcihtYXhpbXVtIC8gMikpO1xuICAgICAgfSBlbHNlIHRocm93IGU7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdERlcHRoKHRlY2hub2xvZ3k6IENldmFsVGVjaG5vbG9neSwgdGhyZWFkczogbnVtYmVyLCBtdWx0aVB2OiBudW1iZXIpOiBudW1iZXIge1xuICBjb25zdCBleHRyYURlcHRoID0gTWF0aC5taW4oTWF0aC5tYXgodGhyZWFkcyAtIG11bHRpUHYsIDApLCA2KTtcbiAgc3dpdGNoICh0ZWNobm9sb2d5KSB7XG4gICAgY2FzZSAnYXNtanMnOlxuICAgICAgcmV0dXJuIDE4O1xuICAgIGNhc2UgJ3dhc20nOlxuICAgICAgcmV0dXJuIDIwO1xuICAgIGNhc2UgJ2V4dGVybmFsJzpcbiAgICAgIHJldHVybiAyNCArIGV4dHJhRGVwdGg7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAyMiArIGV4dHJhRGVwdGg7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVuZ2luZU5hbWUodGVjaG5vbG9neTogQ2V2YWxUZWNobm9sb2d5LCBleHRlcm5hbEVuZ2luZT86IEV4dGVybmFsRW5naW5lKTogc3RyaW5nIHtcbiAgaWYgKGV4dGVybmFsRW5naW5lKSByZXR1cm4gZXh0ZXJuYWxFbmdpbmUubmFtZTtcbiAgc3dpdGNoICh0ZWNobm9sb2d5KSB7XG4gICAgY2FzZSAnd2FzbSc6XG4gICAgY2FzZSAnYXNtanMnOlxuICAgICAgcmV0dXJuICdTdG9ja2Zpc2ggMTArJztcbiAgICBjYXNlICdoY2UnOlxuICAgICAgcmV0dXJuICdTdG9ja2Zpc2ggMTErJztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICdTdG9ja2Zpc2ggMTQrJztcbiAgfVxufVxuIl19