/// <reference types="lichess" />
import { CevalState, ExternalEngine } from './worker';
import { CevalOpts, Work, Step, Hovering, PvBoard, Started } from './types';
import { Toggle } from 'common';
import { StoredProp } from 'common/storage';
import { Rules } from 'chessops';
import { CevalPlatform, CevalTechnology } from './platform';
export default class CevalCtrl {
    readonly opts: CevalOpts;
    rules: Rules;
    analysable: boolean;
    possible: boolean;
    cachable: boolean;
    private officialStockfish;
    platform: CevalPlatform;
    technology: CevalTechnology;
    selectedEngine: StoredProp<string>;
    externalEngine?: ExternalEngine;
    enableNnue: StoredProp<boolean>;
    infinite: StoredProp<boolean>;
    multiPv: StoredProp<number>;
    allowed: Toggle;
    enabled: Toggle;
    downloadProgress: import("common").Prop<number>;
    hovering: import("common").Prop<Hovering | null>;
    pvBoard: import("common").Prop<PvBoard | null>;
    isDeeper: Toggle;
    curEval: Tree.LocalEval | null;
    lastStarted: Started | false;
    private worker;
    constructor(opts: CevalOpts);
    storageKey: (k: string) => string;
    threads: () => number;
    hashSize: () => number;
    private lastEmitFen;
    private sortPvsInPlace;
    onEmit: (ev: Tree.LocalEval, work: Work) => void;
    curDepth: () => number;
    effectiveMaxDepth: () => number;
    private doStart;
    goDeeper: () => void;
    stop: () => void;
    showingCloud: () => boolean;
    start: (path: string, steps: Step[], threatMode?: boolean) => void;
    getState(): CevalState;
    setThreads: (threads: number) => void;
    setHashSize: (hash: number) => void;
    setHovering: (fen: Fen, uci?: Uci) => void;
    setPvBoard: (pvBoard: PvBoard | null) => void;
    toggle: () => void;
    selectEngine: (id: string) => void;
    canGoDeeper: () => boolean;
    shortEngineName: () => string;
    longEngineName: () => string | undefined;
    destroy: () => void | undefined;
}
