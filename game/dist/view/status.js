function bishopOnColor(expandedFen, offset) {
    for (let row = 0; row < 8; row++) {
        for (let col = row % 2 === offset ? 0 : 1; col < 8; col += 2) {
            if (/[bB]/.test(expandedFen[row * 8 + col]))
                return true;
        }
    }
    return false;
}
function insufficientMaterial(variant, fullFen) {
    // TODO: atomic and antichess
    if (variant === 'horde' ||
        variant === 'kingOfTheHill' ||
        variant === 'racingKings' ||
        variant === 'crazyhouse' ||
        variant === 'atomic' ||
        variant === 'antichess')
        return false;
    let fen = fullFen.split(' ')[0].replace(/[^a-z]/gi, '');
    if (variant === 'threeCheck')
        return !/[pbnrq]/.test(fen) || !/[PBNRQ]/.test(fen);
    if (/[prq]/i.test(fen))
        return false;
    if (/n/.test(fen))
        return fen.length - fen.replace(/[a-z]/g, '').length <= 2 && !/[PBNR]/.test(fen);
    if (/N/.test(fen))
        return fen.length - fen.replace(/[A-Z]/g, '').length <= 2 && !/[pbnr]/.test(fen);
    if (/b/i.test(fen)) {
        for (let i = 8; i > 1; i--)
            fen = fen.replace('' + i, '1' + (i - 1));
        return (!bishopOnColor(fen, 0) || !bishopOnColor(fen, 1)) && !/[pPnN]/.test(fen);
    }
    return false;
}
export default function status(ctrl) {
    var _a;
    const noarg = ctrl.trans.noarg, d = ctrl.data;
    switch (d.game.status.name) {
        case 'started':
            return noarg('playingRightNow');
        case 'aborted':
            return noarg('gameAborted');
        case 'mate':
            return noarg('checkmate');
        case 'resign':
            return noarg(d.game.winner == 'white' ? 'blackResigned' : 'whiteResigned');
        case 'stalemate':
            return noarg('stalemate');
        case 'timeout':
            switch (d.game.winner) {
                case 'white':
                    return noarg('blackLeftTheGame');
                case 'black':
                    return noarg('whiteLeftTheGame');
            }
            return `${d.game.turns % 2 === 0 ? noarg('whiteLeftTheGame') : noarg('blackLeftTheGame')}${d.game.winner ? '' : ` • ${noarg('draw')}`}`;
        case 'draw': {
            if (insufficientMaterial(d.game.variant.key, d.game.fen))
                return `${noarg('insufficientMaterial')} • ${noarg('draw')}`;
            if (d.game.fen.split(' ')[4] === '100')
                return `${noarg('fiftyMovesWithoutProgress')} • ${noarg('draw')}`;
            if (d.game.threefold)
                return `${noarg('threefoldRepetition')} • ${noarg('draw')}`;
            if ((_a = d.game.drawOffers) === null || _a === void 0 ? void 0 : _a.some(turn => turn >= d.game.turns))
                return noarg('drawByMutualAgreement');
            return noarg('draw');
        }
        case 'outoftime':
            return `${d.game.turns % 2 === 0 ? noarg('whiteTimeOut') : noarg('blackTimeOut')}${d.game.winner ? '' : ` • ${noarg('draw')}`}`;
        case 'noStart':
            return d.game.winner == 'white' ? noarg('blackDidntMove') : noarg('whiteDidntMove');
        case 'cheat':
            return noarg('cheatDetected');
        case 'variantEnd':
            switch (d.game.variant.key) {
                case 'kingOfTheHill':
                    return noarg('kingInTheCenter');
                case 'threeCheck':
                    return noarg('threeChecks');
            }
            return noarg('variantEnding');
        case 'unknownFinish':
            return 'Finished';
        default:
            return d.game.status.name;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdHVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3ZpZXcvc3RhdHVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLFNBQVMsYUFBYSxDQUFDLFdBQW1CLEVBQUUsTUFBYTtJQUN2RCxLQUFLLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ2hDLEtBQUssSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRTtZQUM1RCxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7Z0JBQUUsT0FBTyxJQUFJLENBQUM7U0FDMUQ7S0FDRjtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUVELFNBQVMsb0JBQW9CLENBQUMsT0FBbUIsRUFBRSxPQUFZO0lBQzdELDZCQUE2QjtJQUM3QixJQUNFLE9BQU8sS0FBSyxPQUFPO1FBQ25CLE9BQU8sS0FBSyxlQUFlO1FBQzNCLE9BQU8sS0FBSyxhQUFhO1FBQ3pCLE9BQU8sS0FBSyxZQUFZO1FBQ3hCLE9BQU8sS0FBSyxRQUFRO1FBQ3BCLE9BQU8sS0FBSyxXQUFXO1FBRXZCLE9BQU8sS0FBSyxDQUFDO0lBQ2YsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3hELElBQUksT0FBTyxLQUFLLFlBQVk7UUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMs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QUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDdEYsS0FBSyxPQUFPO1lBQ1YsT0FBTyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDaEMsS0FBSyxZQUFZO1lBQ2YsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUU7Z0JBQzFCLEtBQUssZUFBZTtvQkFDbEIsT0FBTyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztnQkFDbEMsS0FBSyxZQUFZO29CQUNmLE9BQU8sS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQy9CO1lBQ0QsT0FBTyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDaEMsS0FBSyxlQUFlO1lBQ2xCLE9BQU8sVUFBVSxDQUFDO1FBQ3BCO1lBQ0UsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7S0FDN0I7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ3RybCB9IGZyb20gJy4uL2ludGVyZmFjZXMnO1xuXG5mdW5jdGlvbiBiaXNob3BPbkNvbG9yKGV4cGFuZGVkRmVuOiBzdHJpbmcsIG9mZnNldDogMCB8IDEpOiBib29sZWFuIHtcbiAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgODsgcm93KyspIHtcbiAgICBmb3IgKGxldCBjb2wgPSByb3cgJSAyID09PSBvZmZzZXQgPyAwIDogMTsgY29sIDwgODsgY29sICs9IDIpIHtcbiAgICAgIGlmICgvW2JCXS8udGVzdChleHBhbmRlZEZlbltyb3cgKiA4ICsgY29sXSkpIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGluc3VmZmljaWVudE1hdGVyaWFsKHZhcmlhbnQ6IFZhcmlhbnRLZXksIGZ1bGxGZW46IEZlbik6IGJvb2xlYW4ge1xuICAvLyBUT0RPOiBhdG9taWMgYW5kIGFudGljaGVzc1xuICBpZiAoXG4gICAgdmFyaWFudCA9PT0gJ2hvcmRlJyB8fFxuICAgIHZhcmlhbnQgPT09ICdraW5nT2ZUaGVIaWxsJyB8fFxuICAgIHZhcmlhbnQgPT09ICdyYWNpbmdLaW5ncycgfHxcbiAgICB2YXJpYW50ID09PSAnY3Jhenlob3VzZScgfHxcbiAgICB2YXJpYW50ID09PSAnYXRvbWljJyB8fFxuICAgIHZhcmlhbnQgPT09ICdhbnRpY2hlc3MnXG4gIClcbiAgICByZXR1cm4gZmFsc2U7XG4gIGxldCBmZW4gPSBmdWxsRmVuLnNwbGl0KCcgJylbMF0ucmVwbGFjZSgvW15hLXpdL2dpLCAnJyk7XG4gIGlmICh2YXJpYW50ID09PSAndGhyZWVDaGVjaycpIHJldHVybiAhL1twYm5ycV0vLnRlc3QoZmVuKSB8fCAhL1tQQk5SUV0vLnRlc3QoZmVuKTtcbiAgaWYgKC9bcHJxXS9pLnRlc3QoZmVuKSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoL24vLnRlc3QoZmVuKSkgcmV0dXJuIGZlbi5sZW5ndGggLSBmZW4ucmVwbGFjZSgvW2Etel0vZywgJycpLmxlbmd0aCA8PSAyICYmICEvW1BCTlJdLy50ZXN0KGZlbik7XG4gIGlmICgvTi8udGVzdChmZW4pKSByZXR1cm4gZmVuLmxlbmd0aCAtIGZlbi5yZXBsYWNlKC9bQS1aXS9nLCAnJykubGVuZ3RoIDw9IDIgJiYgIS9bcGJucl0vLnRlc3QoZmVuKTtcbiAgaWYgKC9iL2kudGVzdChmZW4pKSB7XG4gICAgZm9yIChsZXQgaSA9IDg7IGkgPiAxOyBpLS0pIGZlbiA9IGZlbi5yZXBsYWNlKCcnICsgaSwgJzEnICsgKGkgLSAxKSk7XG4gICAgcmV0dXJuICghYmlzaG9wT25Db2xvcihmZW4sIDApIHx8ICFiaXNob3BPbkNvbG9yKGZlbiwgMSkpICYmICEvW3BQbk5dLy50ZXN0KGZlbik7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGF0dXMoY3RybDogQ3RybCk6IHN0cmluZyB7XG4gIGNvbnN0IG5vYXJnID0gY3RybC50cmFucy5ub2FyZyxcbiAgICBkID0gY3RybC5kYXRhO1xuICBzd2l0Y2ggKGQuZ2FtZS5zdGF0dXMubmFtZSkge1xuICAgIGNhc2UgJ3N0YXJ0ZWQnOlxuICAgICAgcmV0dXJuIG5vYXJnKCdwbGF5aW5nUmlnaHROb3cnKTtcbiAgICBjYXNlICdhYm9ydGVkJzpcbiAgICAgIHJldHVybiBub2FyZygnZ2FtZUFib3J0ZWQnKTtcbiAgICBjYXNlICdtYXRlJzpcbiAgICAgIHJldHVybiBub2FyZygnY2hlY2ttYXRlJyk7XG4gICAgY2FzZSAncmVzaWduJzpcbiAgICAgIHJldHVybiBub2FyZyhkLmdhbWUud2lubmVyID09ICd3aGl0ZScgPyAnYmxhY2tSZXNpZ25lZCcgOiAnd2hpdGVSZXNpZ25lZCcpO1xuICAgIGNhc2UgJ3N0YWxlbWF0ZSc6XG4gICAgICByZXR1cm4gbm9hcmcoJ3N0YWxlbWF0ZScpO1xuICAgIGNhc2UgJ3RpbWVvdXQnOlxuICAgICAgc3dpdGNoIChkLmdhbWUud2lubmVyKSB7XG4gICAgICAgIGNhc2UgJ3doaXRlJzpcbiAgICAgICAgICByZXR1cm4gbm9hcmcoJ2JsYWNrTGVmdFRoZUdhbWUnKTtcbiAgICAgICAgY2FzZSAnYmxhY2snOlxuICAgICAgICAgIHJldHVybiBub2FyZygnd2hpdGVMZWZ0VGhlR2FtZScpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGAke2QuZ2FtZS50dXJucyAlIDIgPT09IDAgPyBub2FyZygnd2hpdGVMZWZ0VGhlR2FtZScpIDogbm9hcmcoJ2JsYWNrTGVmdFRoZUdhbWUnKX0ke1xuICAgICAgICBkLmdhbWUud2lubmVyID8gJycgOiBgIOKAoiAke25vYXJnKCdkcmF3Jyl9YFxuICAgICAgfWA7XG4gICAgY2FzZSAnZHJhdyc6IHtcbiAgICAgIGlmIChpbnN1ZmZpY2llbnRNYXRlcmlhbChkLmdhbWUudmFyaWFudC5rZXksIGQuZ2FtZS5mZW4pKVxuICAgICAgICByZXR1cm4gYCR7bm9hcmcoJ2luc3VmZmljaWVudE1hdGVyaWFsJyl9IOKAoiAke25vYXJnKCdkcmF3Jyl9YDtcbiAgICAgIGlmIChkLmdhbWUuZmVuLnNwbGl0KCcgJylbNF0gPT09ICcxMDAnKSByZXR1cm4gYCR7bm9hcmcoJ2ZpZnR5TW92ZXNXaXRob3V0UHJvZ3Jlc3MnKX0g4oCiICR7bm9hcmcoJ2RyYXcnKX1gO1xuICAgICAgaWYgKGQuZ2FtZS50aHJlZWZvbGQpIHJldHVybiBgJHtub2FyZygndGhyZWVmb2xkUmVwZXRpdGlvbicpfSDigKIgJHtub2FyZygnZHJhdycpfWA7XG4gICAgICBpZiAoZC5nYW1lLmRyYXdPZmZlcnM/LnNvbWUodHVybiA9PiB0dXJuID49IGQuZ2FtZS50dXJucykpIHJldHVybiBub2FyZygnZHJhd0J5TXV0dWFsQWdyZWVtZW50Jyk7XG4gICAgICByZXR1cm4gbm9hcmcoJ2RyYXcnKTtcbiAgICB9XG4gICAgY2FzZSAnb3V0b2Z0aW1lJzpcbiAgICAgIHJldHVybiBgJHtkLmdhbWUudHVybnMgJSAyID09PSAwID8gbm9hcmcoJ3doaXRlVGltZU91dCcpIDogbm9hcmcoJ2JsYWNrVGltZU91dCcpfSR7XG4gICAgICAgIGQuZ2FtZS53aW5uZXIgPyAnJyA6IGAg4oCiICR7bm9hcmcoJ2RyYXcnKX1gXG4gICAgICB9YDtcbiAgICBjYXNlICdub1N0YXJ0JzpcbiAgICAgIHJldHVybiBkLmdhbWUud2lubmVyID09ICd3aGl0ZScgPyBub2FyZygnYmxhY2tEaWRudE1vdmUnKSA6IG5vYXJnKCd3aGl0ZURpZG50TW92ZScpO1xuICAgIGNhc2UgJ2NoZWF0JzpcbiAgICAgIHJldHVybiBub2FyZygnY2hlYXREZXRlY3RlZCcpO1xuICAgIGNhc2UgJ3ZhcmlhbnRFbmQnOlxuICAgICAgc3dpdGNoIChkLmdhbWUudmFyaWFudC5rZXkpIHtcbiAgICAgICAgY2FzZSAna2luZ09mVGhlSGlsbCc6XG4gICAgICAgICAgcmV0dXJuIG5vYXJnKCdraW5nSW5UaGVDZW50ZXInKTtcbiAgICAgICAgY2FzZSAndGhyZWVDaGVjayc6XG4gICAgICAgICAgcmV0dXJuIG5vYXJnKCd0aHJlZUNoZWNrcycpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5vYXJnKCd2YXJpYW50RW5kaW5nJyk7XG4gICAgY2FzZSAndW5rbm93bkZpbmlzaCc6XG4gICAgICByZXR1cm4gJ0ZpbmlzaGVkJztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGQuZ2FtZS5zdGF0dXMubmFtZTtcbiAgfVxufVxuIl19