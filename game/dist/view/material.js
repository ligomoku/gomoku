import { h } from 'snabbdom';
import { countChecks, getMaterialDiff, getScore, NO_CHECKS } from '../material';
import { opposite } from 'chessground/util';
function renderMaterialDiff(material, score, position, checks) {
    const children = [];
    let role;
    for (role in material) {
        if (material[role] > 0) {
            const content = [];
            for (let i = 0; i < material[role]; i++)
                content.push(h('mpiece.' + role));
            children.push(h('div', content));
        }
    }
    if (checks)
        for (let i = 0; i < checks; i++)
            children.push(h('div', h('mpiece.king')));
    if (score > 0)
        children.push(h('score', '+' + score));
    return h('div.material.material-' + position, children);
}
export function renderMaterialDiffs(showCaptured, bottomColor, fen, showChecks, checkStates, ply) {
    const material = getMaterialDiff(showCaptured ? fen : '');
    const score = getScore(material) * (bottomColor === 'white' ? 1 : -1);
    const checks = showChecks ? countChecks(checkStates, ply) : NO_CHECKS;
    const topColor = opposite(bottomColor);
    return [
        renderMaterialDiff(material[topColor], -score, 'top', checks[topColor]),
        renderMaterialDiff(material[bottomColor], score, 'bottom', checks[bottomColor]),
    ];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0ZXJpYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdmlldy9tYXRlcmlhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsQ0FBQyxFQUFTLE1BQU0sVUFBVSxDQUFDO0FBRXBDLE9BQU8sRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDaEYsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRTVDLFNBQVMsa0JBQWtCLENBQ3pCLFFBQTBCLEVBQzFCLEtBQWEsRUFDYixRQUEwQixFQUMxQixNQUFlO0lBRWYsTUFBTSxRQUFRLEdBQVksRUFBRSxDQUFDO0lBQzdCLElBQUksSUFBYSxDQUFDO0lBQ2xCLEtBQUssSUFBSSxJQUFJLFFBQVEsRUFBRTtRQUNyQixJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDdEIsTUFBTSxPQUFPLEdBQVksRUFBRSxDQUFDO1lBQzVCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFO2dCQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzNFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ2xDO0tBQ0Y7SUFDRCxJQUFJLE1BQU07UUFBRSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRTtZQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZGLElBQUksS0FBSyxHQUFHLENBQUM7UUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDdEQsT0FBTyxDQUFDLENBQUMsd0JBQXdCLEdBQUcsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQzFELENBQUM7QUFFRCxNQUFNLFVBQVUsbUJBQW1CLENBQ2pDLFlBQXFCLEVBQ3JCLFdBQWtCLEVBQ2xCLEdBQVEsRUFDUixVQUFtQixFQUNuQixXQUF5QixFQUN6QixHQUFRO0lBRVIsTUFBTSxRQUFRLEdBQUcsZUFBZSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMxRCxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEUsTUFBTSxNQUFNLEdBQWUsVUFBVSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDbEYsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3ZDLE9BQU87UUFDTCxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN2RSxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDaEYsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZyBmcm9tICdjaGVzc2dyb3VuZC90eXBlcyc7XG5pbXBvcnQgeyBoLCBWTm9kZSB9IGZyb20gJ3NuYWJiZG9tJztcbmltcG9ydCB7IENoZWNrQ291bnQsIENoZWNrU3RhdGUsIE1hdGVyaWFsRGlmZlNpZGUgfSBmcm9tICcuLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IGNvdW50Q2hlY2tzLCBnZXRNYXRlcmlhbERpZmYsIGdldFNjb3JlLCBOT19DSEVDS1MgfSBmcm9tICcuLi9tYXRlcmlhbCc7XG5pbXBvcnQgeyBvcHBvc2l0ZSB9IGZyb20gJ2NoZXNzZ3JvdW5kL3V0aWwnO1xuXG5mdW5jdGlvbiByZW5kZXJNYXRlcmlhbERpZmYoXG4gIG1hdGVyaWFsOiBNYXRlcmlhbERpZmZTaWRlLFxuICBzY29yZTogbnVtYmVyLFxuICBwb3NpdGlvbjogJ3RvcCcgfCAnYm90dG9tJyxcbiAgY2hlY2tzPzogbnVtYmVyXG4pOiBWTm9kZSB7XG4gIGNvbnN0IGNoaWxkcmVuOiBWTm9kZVtdID0gW107XG4gIGxldCByb2xlOiBjZy5Sb2xlO1xuICBmb3IgKHJvbGUgaW4gbWF0ZXJpYWwpIHtcbiAgICBpZiAobWF0ZXJpYWxbcm9sZV0gPiAwKSB7XG4gICAgICBjb25zdCBjb250ZW50OiBWTm9kZVtdID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdGVyaWFsW3JvbGVdOyBpKyspIGNvbnRlbnQucHVzaChoKCdtcGllY2UuJyArIHJvbGUpKTtcbiAgICAgIGNoaWxkcmVuLnB1c2goaCgnZGl2JywgY29udGVudCkpO1xuICAgIH1cbiAgfVxuICBpZiAoY2hlY2tzKSBmb3IgKGxldCBpID0gMDsgaSA8IGNoZWNrczsgaSsrKSBjaGlsZHJlbi5wdXNoKGgoJ2RpdicsIGgoJ21waWVjZS5raW5nJykpKTtcbiAgaWYgKHNjb3JlID4gMCkgY2hpbGRyZW4ucHVzaChoKCdzY29yZScsICcrJyArIHNjb3JlKSk7XG4gIHJldHVybiBoKCdkaXYubWF0ZXJpYWwubWF0ZXJpYWwtJyArIHBvc2l0aW9uLCBjaGlsZHJlbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJNYXRlcmlhbERpZmZzKFxuICBzaG93Q2FwdHVyZWQ6IGJvb2xlYW4sXG4gIGJvdHRvbUNvbG9yOiBDb2xvcixcbiAgZmVuOiBGZW4sXG4gIHNob3dDaGVja3M6IGJvb2xlYW4sXG4gIGNoZWNrU3RhdGVzOiBDaGVja1N0YXRlW10sXG4gIHBseTogUGx5XG4pOiBbVk5vZGUsIFZOb2RlXSB7XG4gIGNvbnN0IG1hdGVyaWFsID0gZ2V0TWF0ZXJpYWxEaWZmKHNob3dDYXB0dXJlZCA/IGZlbiA6ICcnKTtcbiAgY29uc3Qgc2NvcmUgPSBnZXRTY29yZShtYXRlcmlhbCkgKiAoYm90dG9tQ29sb3IgPT09ICd3aGl0ZScgPyAxIDogLTEpO1xuICBjb25zdCBjaGVja3M6IENoZWNrQ291bnQgPSBzaG93Q2hlY2tzID8gY291bnRDaGVja3MoY2hlY2tTdGF0ZXMsIHBseSkgOiBOT19DSEVDS1M7XG4gIGNvbnN0IHRvcENvbG9yID0gb3Bwb3NpdGUoYm90dG9tQ29sb3IpO1xuICByZXR1cm4gW1xuICAgIHJlbmRlck1hdGVyaWFsRGlmZihtYXRlcmlhbFt0b3BDb2xvcl0sIC1zY29yZSwgJ3RvcCcsIGNoZWNrc1t0b3BDb2xvcl0pLFxuICAgIHJlbmRlck1hdGVyaWFsRGlmZihtYXRlcmlhbFtib3R0b21Db2xvcl0sIHNjb3JlLCAnYm90dG9tJywgY2hlY2tzW2JvdHRvbUNvbG9yXSksXG4gIF07XG59XG4iXX0=