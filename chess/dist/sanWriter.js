function fixCrazySan(san) {
    return san[0] === 'P' ? san.slice(1) : san;
}
function decomposeUci(uci) {
    return [uci.slice(0, 2), uci.slice(2, 4), uci.slice(4, 5)];
}
function square(name) {
    return name.charCodeAt(0) - 97 + (name.charCodeAt(1) - 49) * 8;
}
function squareDist(a, b) {
    const x1 = a & 7, x2 = b & 7;
    const y1 = a >> 3, y2 = b >> 3;
    return Math.max(Math.abs(x1 - x2), Math.abs(y1 - y2));
}
function isBlack(p) {
    return p === p.toLowerCase();
}
function readFen(fen) {
    const parts = fen.split(' '), board = {
        pieces: {},
        turn: parts[1] === 'w',
    };
    parts[0]
        .split('/')
        .slice(0, 8)
        .forEach((row, y) => {
        let x = 0;
        row.split('').forEach(v => {
            if (v == '~')
                return;
            const nb = parseInt(v, 10);
            if (nb)
                x += nb;
            else {
                board.pieces[(7 - y) * 8 + x] = v;
                x++;
            }
        });
    });
    return board;
}
function kingMovesTo(s) {
    return [s - 1, s - 9, s - 8, s - 7, s + 1, s + 9, s + 8, s + 7].filter(function (o) {
        return o >= 0 && o < 64 && squareDist(s, o) === 1;
    });
}
function knightMovesTo(s) {
    return [s + 17, s + 15, s + 10, s + 6, s - 6, s - 10, s - 15, s - 17].filter(function (o) {
        return o >= 0 && o < 64 && squareDist(s, o) <= 2;
    });
}
const ROOK_DELTAS = [8, 1, -8, -1];
const BISHOP_DELTAS = [9, -9, 7, -7];
const QUEEN_DELTAS = ROOK_DELTAS.concat(BISHOP_DELTAS);
function slidingMovesTo(s, deltas, board) {
    const result = [];
    deltas.forEach(function (delta) {
        for (let square = s + delta; square >= 0 && square < 64 && squareDist(square, square - delta) === 1; square += delta) {
            result.push(square);
            if (board.pieces[square])
                break;
        }
    });
    return result;
}
function sanOf(board, uci) {
    if (uci.includes('@'))
        return fixCrazySan(uci);
    const move = decomposeUci(uci);
    const from = square(move[0]);
    const to = square(move[1]);
    const p = board.pieces[from];
    const d = board.pieces[to];
    const pt = board.pieces[from].toLowerCase();
    // pawn moves
    if (pt === 'p') {
        let san;
        if (uci[0] === uci[2])
            san = move[1];
        else
            san = uci[0] + 'x' + move[1];
        if (move[2])
            san += '=' + move[2].toUpperCase();
        return san;
    }
    // castling
    if (pt == 'k' && ((d && isBlack(p) === isBlack(d)) || squareDist(from, to) > 1)) {
        if (to < from)
            return 'O-O-O';
        else
            return 'O-O';
    }
    let san = pt.toUpperCase();
    // disambiguate normal moves
    let candidates = [];
    if (pt == 'k')
        candidates = kingMovesTo(to);
    else if (pt == 'n')
        candidates = knightMovesTo(to);
    else if (pt == 'r')
        candidates = slidingMovesTo(to, ROOK_DELTAS, board);
    else if (pt == 'b')
        candidates = slidingMovesTo(to, BISHOP_DELTAS, board);
    else if (pt == 'q')
        candidates = slidingMovesTo(to, QUEEN_DELTAS, board);
    let rank = false, file = false;
    for (let i = 0; i < candidates.length; i++) {
        if (candidates[i] === from || board.pieces[candidates[i]] !== p)
            continue;
        if (from >> 3 === candidates[i] >> 3)
            file = true;
        if ((from & 7) === (candidates[i] & 7))
            rank = true;
        else
            file = true;
    }
    if (file)
        san += uci[0];
    if (rank)
        san += uci[1];
    // target
    if (d)
        san += 'x';
    san += move[1];
    return san;
}
export function sanWriter(fen, ucis) {
    const board = readFen(fen);
    const sans = {};
    ucis.forEach(function (uci) {
        const san = sanOf(board, uci);
        sans[san] = uci;
        if (san.includes('x'))
            sans[san.replace('x', '')] = uci;
    });
    return sans;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuV3JpdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NhbldyaXRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxTQUFTLFdBQVcsQ0FBQyxHQUFXO0lBQzlCLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0FBQzdDLENBQUM7QUFFRCxTQUFTLFlBQVksQ0FBQyxHQUFXO0lBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdELENBQUM7QUFFRCxTQUFTLE1BQU0sQ0FBQyxJQUFZO0lBQzFCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNqRSxDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUMsQ0FBUyxFQUFFLENBQVM7SUFDdEMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFDZCxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNiLE1BQU0sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQ2YsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDZCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMs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QU0sSUFBSSxHQUFhLEVBQUUsQ0FBQztJQUMxQixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRztRQUN4QixNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDaEIsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztZQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUMxRCxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbInR5cGUgQm9hcmQgPSB7IHBpZWNlczogeyBba2V5OiBudW1iZXJdOiBzdHJpbmcgfTsgdHVybjogYm9vbGVhbiB9O1xuZXhwb3J0IHR5cGUgU2FuVG9VY2kgPSB7IFtrZXk6IHN0cmluZ106IFVjaSB9O1xuXG5mdW5jdGlvbiBmaXhDcmF6eVNhbihzYW46IHN0cmluZykge1xuICByZXR1cm4gc2FuWzBdID09PSAnUCcgPyBzYW4uc2xpY2UoMSkgOiBzYW47XG59XG5cbmZ1bmN0aW9uIGRlY29tcG9zZVVjaSh1Y2k6IHN0cmluZykge1xuICByZXR1cm4gW3VjaS5zbGljZSgwLCAyKSwgdWNpLnNsaWNlKDIsIDQpLCB1Y2kuc2xpY2UoNCwgNSldO1xufVxuXG5mdW5jdGlvbiBzcXVhcmUobmFtZTogc3RyaW5nKSB7XG4gIHJldHVybiBuYW1lLmNoYXJDb2RlQXQoMCkgLSA5NyArIChuYW1lLmNoYXJDb2RlQXQoMSkgLSA0OSkgKiA4O1xufVxuXG5mdW5jdGlvbiBzcXVhcmVEaXN0KGE6IG51bWJlciwgYjogbnVtYmVyKSB7XG4gIGNvbnN0IHgxID0gYSAmIDcsXG4gICAgeDIgPSBiICYgNztcbiAgY29uc3QgeTEgPSBhID4+IDMsXG4gICAgeTIgPSBiID4+IDM7XG4gIHJldHVybiBNYXRoLm1heChNYXRoLmFicyh4MSAtIHgyKSwgTWF0aC5hYnMoeTEgLSB5MikpO1xufVxuXG5mdW5jdGlvbiBpc0JsYWNrKHA6IHN0cmluZykge1xuICByZXR1cm4gcCA9PT0gcC50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiByZWFkRmVuKGZlbjogc3RyaW5nKSB7XG4gIGNvbnN0IHBhcnRzID0gZmVuLnNwbGl0KCcgJyksXG4gICAgYm9hcmQ6IEJvYXJkID0ge1xuICAgICAgcGllY2VzOiB7fSxcbiAgICAgIHR1cm46IHBhcnRzWzFdID09PSAndycsXG4gICAgfTtcblxuICBwYXJ0c1swXVxuICAgIC5zcGxpdCgnLycpXG4gICAgLnNsaWNlKDAsIDgpXG4gICAgLmZvckVhY2goKHJvdywgeSkgPT4ge1xuICAgICAgbGV0IHggPSAwO1xuICAgICAgcm93LnNwbGl0KCcnKS5mb3JFYWNoKHYgPT4ge1xuICAgICAgICBpZiAodiA9PSAnficpIHJldHVybjtcbiAgICAgICAgY29uc3QgbmIgPSBwYXJzZUludCh2LCAxMCk7XG4gICAgICAgIGlmIChuYikgeCArPSBuYjtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYm9hcmQucGllY2VzWyg3IC0geSkgKiA4ICsgeF0gPSB2O1xuICAgICAgICAgIHgrKztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgcmV0dXJuIGJvYXJkO1xufVxuXG5mdW5jdGlvbiBraW5nTW92ZXNUbyhzOiBudW1iZXIpIHtcbiAgcmV0dXJuIFtzIC0gMSwgcyAtIDksIHMgLSA4LCBzIC0gNywgcyArIDEsIHMgKyA5LCBzICsgOCwgcyArIDddLmZpbHRlcihmdW5jdGlvbiAobykge1xuICAgIHJldHVybiBvID49IDAgJiYgbyA8IDY0ICYmIHNxdWFyZURpc3QocywgbykgPT09IDE7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBrbmlnaHRNb3Zlc1RvKHM6IG51bWJlcikge1xuICByZXR1cm4gW3MgKyAxNywgcyArIDE1LCBzICsgMTAsIHMgKyA2LCBzIC0gNiwgcyAtIDEwLCBzIC0gMTUsIHMgLSAxN10uZmlsdGVyKGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIG8gPj0gMCAmJiBvIDwgNjQgJiYgc3F1YXJlRGlzdChzLCBvKSA8PSAyO1xuICB9KTtcbn1cblxuY29uc3QgUk9PS19ERUxUQVMgPSBbOCwgMSwgLTgsIC0xXTtcbmNvbnN0IEJJU0hPUF9ERUxUQVMgPSBbOSwgLTksIDcsIC03XTtcbmNvbnN0IFFVRUVOX0RFTFRBUyA9IFJPT0tfREVMVEFTLmNvbmNhdChCSVNIT1BfREVMVEFTKTtcblxuZnVuY3Rpb24gc2xpZGluZ01vdmVzVG8oczogbnVtYmVyLCBkZWx0YXM6IG51bWJlcltdLCBib2FyZDogQm9hcmQpOiBudW1iZXJbXSB7XG4gIGNvbnN0IHJlc3VsdDogbnVtYmVyW10gPSBbXTtcbiAgZGVsdGFzLmZvckVhY2goZnVuY3Rpb24gKGRlbHRhKSB7XG4gICAgZm9yIChcbiAgICAgIGxldCBzcXVhcmUgPSBzICsgZGVsdGE7XG4gICAgICBzcXVhcmUgPj0gMCAmJiBzcXVhcmUgPCA2NCAmJiBzcXVhcmVEaXN0KHNxdWFyZSwgc3F1YXJlIC0gZGVsdGEpID09PSAxO1xuICAgICAgc3F1YXJlICs9IGRlbHRhXG4gICAgKSB7XG4gICAgICByZXN1bHQucHVzaChzcXVhcmUpO1xuICAgICAgaWYgKGJvYXJkLnBpZWNlc1tzcXVhcmVdKSBicmVhaztcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBzYW5PZihib2FyZDogQm9hcmQsIHVjaTogc3RyaW5nKSB7XG4gIGlmICh1Y2kuaW5jbHVkZXMoJ0AnKSkgcmV0dXJuIGZpeENyYXp5U2FuKHVjaSk7XG5cbiAgY29uc3QgbW92ZSA9IGRlY29tcG9zZVVjaSh1Y2kpO1xuICBjb25zdCBmcm9tID0gc3F1YXJlKG1vdmVbMF0pO1xuICBjb25zdCB0byA9IHNxdWFyZShtb3ZlWzFdKTtcbiAgY29uc3QgcCA9IGJvYXJkLnBpZWNlc1tmcm9tXTtcbiAgY29uc3QgZCA9IGJvYXJkLnBpZWNlc1t0b107XG4gIGNvbnN0IHB0ID0gYm9hcmQucGllY2VzW2Zyb21dLnRvTG93ZXJDYXNlKCk7XG5cbiAgLy8gcGF3biBtb3Zlc1xuICBpZiAocHQgPT09ICdwJykge1xuICAgIGxldCBzYW46IHN0cmluZztcbiAgICBpZiAodWNpWzBdID09PSB1Y2lbMl0pIHNhbiA9IG1vdmVbMV07XG4gICAgZWxzZSBzYW4gPSB1Y2lbMF0gKyAneCcgKyBtb3ZlWzFdO1xuICAgIGlmIChtb3ZlWzJdKSBzYW4gKz0gJz0nICsgbW92ZVsyXS50b1VwcGVyQ2FzZSgpO1xuICAgIHJldHVybiBzYW47XG4gIH1cblxuICAvLyBjYXN0bGluZ1xuICBpZiAocHQgPT0gJ2snICYmICgoZCAmJiBpc0JsYWNrKHApID09PSBpc0JsYWNrKGQpKSB8fCBzcXVhcmVEaXN0KGZyb20sIHRvKSA+IDEpKSB7XG4gICAgaWYgKHRvIDwgZnJvbSkgcmV0dXJuICdPLU8tTyc7XG4gICAgZWxzZSByZXR1cm4gJ08tTyc7XG4gIH1cblxuICBsZXQgc2FuID0gcHQudG9VcHBlckNhc2UoKTtcblxuICAvLyBkaXNhbWJpZ3VhdGUgbm9ybWFsIG1vdmVzXG4gIGxldCBjYW5kaWRhdGVzOiBudW1iZXJbXSA9IFtdO1xuICBpZiAocHQgPT0gJ2snKSBjYW5kaWRhdGVzID0ga2luZ01vdmVzVG8odG8pO1xuICBlbHNlIGlmIChwdCA9PSAnbicpIGNhbmRpZGF0ZXMgPSBrbmlnaHRNb3Zlc1RvKHRvKTtcbiAgZWxzZSBpZiAocHQgPT0gJ3InKSBjYW5kaWRhdGVzID0gc2xpZGluZ01vdmVzVG8odG8sIFJPT0tfREVMVEFTLCBib2FyZCk7XG4gIGVsc2UgaWYgKHB0ID09ICdiJykgY2FuZGlkYXRlcyA9IHNsaWRpbmdNb3Zlc1RvKHRvLCBCSVNIT1BfREVMVEFTLCBib2FyZCk7XG4gIGVsc2UgaWYgKHB0ID09ICdxJykgY2FuZGlkYXRlcyA9IHNsaWRpbmdNb3Zlc1RvKHRvLCBRVUVFTl9ERUxUQVMsIGJvYXJkKTtcblxuICBsZXQgcmFuayA9IGZhbHNlLFxuICAgIGZpbGUgPSBmYWxzZTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYW5kaWRhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGNhbmRpZGF0ZXNbaV0gPT09IGZyb20gfHwgYm9hcmQucGllY2VzW2NhbmRpZGF0ZXNbaV1dICE9PSBwKSBjb250aW51ZTtcbiAgICBpZiAoZnJvbSA+PiAzID09PSBjYW5kaWRhdGVzW2ldID4+IDMpIGZpbGUgPSB0cnVlO1xuICAgIGlmICgoZnJvbSAmIDcpID09PSAoY2FuZGlkYXRlc1tpXSAmIDcpKSByYW5rID0gdHJ1ZTtcbiAgICBlbHNlIGZpbGUgPSB0cnVlO1xuICB9XG4gIGlmIChmaWxlKSBzYW4gKz0gdWNpWzBdO1xuICBpZiAocmFuaykgc2FuICs9IHVjaVsxXTtcblxuICAvLyB0YXJnZXRcbiAgaWYgKGQpIHNhbiArPSAneCc7XG4gIHNhbiArPSBtb3ZlWzFdO1xuICByZXR1cm4gc2FuO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2FuV3JpdGVyKGZlbjogc3RyaW5nLCB1Y2lzOiBzdHJpbmdbXSk6IFNhblRvVWNpIHtcbiAgY29uc3QgYm9hcmQgPSByZWFkRmVuKGZlbik7XG4gIGNvbnN0IHNhbnM6IFNhblRvVWNpID0ge307XG4gIHVjaXMuZm9yRWFjaChmdW5jdGlvbiAodWNpKSB7XG4gICAgY29uc3Qgc2FuID0gc2FuT2YoYm9hcmQsIHVjaSk7XG4gICAgc2Fuc1tzYW5dID0gdWNpO1xuICAgIGlmIChzYW4uaW5jbHVkZXMoJ3gnKSkgc2Fuc1tzYW4ucmVwbGFjZSgneCcsICcnKV0gPSB1Y2k7XG4gIH0pO1xuICByZXR1cm4gc2Fucztcbn1cbiJdfQ==