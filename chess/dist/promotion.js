import { h } from 'snabbdom';
import * as Prefs from 'common/prefs';
import { bind, onInsert } from 'common/snabbdom';
import * as cgUtil from 'chessground/util';
const PROMOTABLE_ROLES = ['queen', 'knight', 'rook', 'bishop'];
export function promote(g, key, role) {
    const piece = g.state.pieces.get(key);
    if (piece && piece.role == 'pawn') {
        g.setPieces(new Map([
            [
                key,
                {
                    color: piece.color,
                    role,
                    promoted: true,
                },
            ],
        ]));
    }
}
export class PromotionCtrl {
    constructor(withGround, onCancel, redraw, autoQueenPref = Prefs.AutoQueen.Never) {
        this.withGround = withGround;
        this.onCancel = onCancel;
        this.redraw = redraw;
        this.autoQueenPref = autoQueenPref;
        this.start = (orig, dest, callback, meta, forceAutoQueen = false) => this.withGround(g => {
            const premovePiece = g.state.pieces.get(orig);
            const piece = premovePiece || g.state.pieces.get(dest);
            if ((piece === null || piece === void 0 ? void 0 : piece.role) == 'pawn' &&
                ((dest[1] == '8' && g.state.turnColor == 'black') || (dest[1] == '1' && g.state.turnColor == 'white'))) {
                if (this.prePromotionRole && (meta === null || meta === void 0 ? void 0 : meta.premove)) {
                    this.doPromote({ orig, dest, callback }, this.prePromotionRole);
                    return true;
                }
                if (!(meta === null || meta === void 0 ? void 0 : meta.ctrlKey) &&
                    !this.promoting &&
                    (this.autoQueenPref === Prefs.AutoQueen.Always ||
                        (this.autoQueenPref === Prefs.AutoQueen.OnPremove && premovePiece) ||
                        forceAutoQueen)) {
                    if (premovePiece)
                        this.setPrePromotion(dest, 'queen');
                    else
                        this.doPromote({ orig, dest, callback }, 'queen');
                    return true;
                }
                this.promoting = { orig, dest, pre: !!premovePiece, callback };
                this.redraw();
                return true;
            }
            return false;
        }) || false;
        this.cancel = () => {
            this.cancelPrePromotion();
            if (this.promoting) {
                this.promoting = undefined;
                this.onCancel();
                this.redraw();
            }
        };
        this.cancelPrePromotion = () => {
            if (this.prePromotionRole) {
                this.withGround(g => g.setAutoShapes([]));
                this.prePromotionRole = undefined;
                this.redraw();
            }
        };
        this.view = (antichess) => {
            const promoting = this.promoting;
            if (!promoting)
                return;
            return (this.withGround(g => this.renderPromotion(promoting.dest, antichess ? PROMOTABLE_ROLES.concat('king') : PROMOTABLE_ROLES, cgUtil.opposite(g.state.turnColor), g.state.orientation)) || null);
        };
    }
    finish(role) {
        const promoting = this.promoting;
        if (promoting) {
            this.promoting = undefined;
            if (promoting.pre)
                this.setPrePromotion(promoting.dest, role);
            else
                this.doPromote(promoting, role);
            this.redraw();
        }
    }
    doPromote(promoting, role) {
        this.withGround(g => promote(g, promoting.dest, role));
        promoting.callback(promoting.orig, promoting.dest, role);
    }
    setPrePromotion(dest, role) {
        this.prePromotionRole = role;
        this.withGround(g => g.setAutoShapes([
            {
                orig: dest,
                piece: {
                    color: cgUtil.opposite(g.state.turnColor),
                    role,
                    opacity: 0.8,
                },
                brush: '',
            },
        ]));
    }
    renderPromotion(dest, pieces, color, orientation) {
        let left = (7 - cgUtil.key2pos(dest)[0]) * 12.5;
        if (orientation === 'white')
            left = 87.5 - left;
        const vertical = color === orientation ? 'top' : 'bottom';
        return h('div#promotion-choice.' + vertical, {
            hook: onInsert(el => {
                el.addEventListener('click', this.cancel);
                el.oncontextmenu = () => false;
            }),
        }, pieces.map((serverRole, i) => {
            const top = (color === orientation ? i : 7 - i) * 12.5;
            return h('square', {
                attrs: {
                    style: 'top: ' + top + '%;left: ' + left + '%',
                },
                hook: bind('click', e => {
                    e.stopPropagation();
                    this.finish(serverRole);
                }),
            }, [h('piece.' + serverRole + '.' + color)]);
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,