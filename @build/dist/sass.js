"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sass = void 0;
const cps = __importStar(require("node:child_process"));
const fs = __importStar(require("node:fs"));
const ps = __importStar(require("node:process"));
const path = __importStar(require("node:path"));
const main_1 = require("./main");
const build_1 = require("./build");
const parse_1 = require("./parse");
async function sass() {
    if (!main_1.env.sass)
        return;
    builder.clear();
    importMap.clear();
    await buildThemedScss();
    const allSources = await (0, parse_1.globArray)('./*/css/**/[^_]*.scss', { abs: false });
    const modNames = build_1.buildModules.map(x => x.name);
    // filter to modules we're actually building
    builder.sources = new Set(allSources.filter(x => modNames.find(y => x.startsWith(`${y}${path.sep}`))));
    for (const build of builder.sources) {
        await parseImports(build);
    }
    if (main_1.env.watch) {
        for (const dir of [...importMap.keys()].map(path.dirname)) {
            const watcher = fs.watch(dir);
            watcher.on('change', onChanges.bind(null, dir));
            watcher.on('error', (err) => main_1.env.error(err, 'sass'));
            watcher.on('close', () => {
                main_1.env.error('Watcher closed unexpectedly. Exiting');
                ps.exit(-1);
            });
        }
    }
    if (builder.sources.size) {
        main_1.env.log('Building css', { ctx: 'sass' });
        compile([...builder.sources], false);
    }
    else
        main_1.env.done(0, 'sass');
}
exports.sass = sass;
const sassArgs = ['--no-error-css', '--stop-on-error', '--no-color', '--quiet', '--quiet-deps'];
const importMap = new Map(); // (cssFile, sourcesThatImportIt)
const partialRe = /(.*)\/_(.*)\.scss$/;
const importRe = /@import ['"](.*)['"]/g;
const builder = new (class {
    constructor() {
        this.fileSet = new Set();
    }
    clear() {
        clearTimeout(this.timeout);
        this.timeout = undefined;
        this.fileSet.clear();
    }
    add(files) {
        // filenames relative to lila/ui
        const oldCount = this.fileSet.size;
        files.forEach(src => imports(src).forEach(dest => this.fileSet.add(dest)));
        if (this.timeout) {
            clearTimeout(this.timeout);
        }
        this.timeout = setTimeout(this.fire.bind(this), 200);
        return this.fileSet.size > oldCount;
    }
    fire() {
        compile([...this.fileSet].filter(x => this.sources.has(x)));
        this.clear();
    }
})();
async function buildThemedScss() {
    main_1.env.log('Building themed scss', { ctx: 'sass' });
    const partials = (await (0, parse_1.globArray)('./*/css/build/_*.scss', { abs: false })).filter((f) => !f.endsWith('.abstract.scss'));
    for (const file of partials) {
        const match = partialRe.exec(file);
        if (!match || match.length < 3)
            continue;
        const path = match[1];
        const partial = match[2];
        for (const direction of ['ltr', 'rtl']) {
            for (const theme of ['light', 'dark', 'transp']) {
                const themed = `${path}/${partial}.${direction}.${theme}.scss`;
                if (fs.existsSync(themed)) {
                    continue;
                }
                const code = `@import '../../../common/css/dir/${direction}';\n` +
                    `@import '../../../common/css/theme/${theme}';\n` +
                    `@import '${partial}';\n`;
                try {
                    await fs.promises.writeFile(themed, code);
                }
                catch (e) {
                    main_1.env.log(e, { error: true });
                }
            }
        }
    }
}
function compile(sources, tellTheWorld = true) {
    var _a, _b;
    if (tellTheWorld) {
        for (const srcFile of sources) {
            main_1.env.log(`Building '${main_1.colors.cyan(srcFile)}'`, { ctx: 'sass' });
        }
    }
    const sassExec = path.join(main_1.env.buildDir, 'dart-sass', `${ps.platform}-${ps.arch}`, 'sass');
    const proc = cps.spawn(sassExec, sassArgs.concat(main_1.env.prod ? ['--style=compressed', '--no-source-map'] : ['--embed-sources'], sources.map((src) => `${src}:${path.join(main_1.env.cssDir, path.basename(src).replace(/(.*)scss$/, main_1.env.prod ? '$1min.css' : '$1dev.css'))}`)));
    (_a = proc.stdout) === null || _a === void 0 ? void 0 : _a.on('data', (buf) => {
        const txts = (0, main_1.lines)(buf.toString('utf8'));
        for (const txt of txts)
            main_1.env.log(main_1.colors.red(txt), { ctx: 'sass' });
    });
    (_b = proc.stderr) === null || _b === void 0 ? void 0 : _b.on('data', (buf) => sassError(buf.toString('utf8')));
    proc.on('close', (code) => main_1.env.done(code, 'sass'));
}
function imports(srcFile, bset = new Set()) {
    var _a;
    if (bset.has(srcFile))
        return bset;
    bset.add(srcFile);
    for (const dep of (_a = importMap.get(srcFile)) !== null && _a !== void 0 ? _a : [])
        imports(dep, bset);
    return bset;
}
function onChanges(dir, eventType, srcFile) {
    if (eventType === 'change') {
        if (builder.add([path.join(dir, srcFile)]))
            main_1.env.log(`File '${main_1.colors.cyanBold(srcFile)}' changed`);
    }
    else if (eventType === 'rename') {
        (0, parse_1.globArray)('*.scss', { cwd: dir, abs: false }).then(files => {
            if (builder.add(files.map(f => path.join(dir, f)))) {
                main_1.env.log(`Directory '${main_1.colors.cyanBold(dir)}' changed`);
            }
        });
    }
}
async function parseImports(src, depth = 1, processed = new Set()) {
    var _a;
    if (depth > 10) {
        // arbitrary
        main_1.env.log(`${main_1.errorMark} '${main_1.colors.cyan(src)}' - max depth exceeded (${depth})`);
        ps.exit(-2);
    }
    if (processed.has(src))
        return;
    processed.add(src);
    try {
        for (const match of (await fs.promises.readFile(src, 'utf8')).matchAll(importRe)) {
            if (match.length !== 2)
                continue;
            const absDep = path.resolve(path.dirname(src), resolvePartial(match[1]));
            if (!absDep.startsWith(main_1.env.uiDir))
                continue;
            const dep = absDep.slice(main_1.env.uiDir.length + 1);
            if (!((_a = importMap.get(dep)) === null || _a === void 0 ? void 0 : _a.add(src)))
                importMap.set(dep, new Set([src]));
            await parseImports(dep, depth + 1, processed);
        }
    }
    catch (e) {
        main_1.env.log(`${main_1.errorMark} failed to read ${src} - ${JSON.stringify(e, undefined, 2)}`);
    }
}
function resolvePartial(partial) {
    const nameBegin = partial.lastIndexOf(path.sep) + 1;
    return `${partial.slice(0, nameBegin)}_${partial.slice(nameBegin)}.scss`;
}
const hrule = '---------------------------------------------------------------------------';
function sassError(error) {
    for (const err of (0, main_1.lines)(error)) {
        if (err.startsWith('Error:')) {
            main_1.env.log(main_1.colors.grey(hrule), { ctx: 'sass' });
            main_1.env.log(`${main_1.errorMark} - ${err.slice(7)}`, { ctx: 'sass' });
        }
        else
            main_1.env.log(err, { ctx: 'sass' });
    }
}
//# sourceMappingURL=data:application/json;base64,