"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorMark = exports.codes = exports.env = exports.colors = exports.lines = exports.init = exports.main = void 0;
const ps = __importStar(require("node:process"));
const path = __importStar(require("node:path"));
const fs = __importStar(require("node:fs"));
const build_1 = require("./build");
function main() {
    const configPath = path.resolve(__dirname, '../build-config.json');
    const config = fs.existsSync(configPath) ? JSON.parse(fs.readFileSync(configPath, 'utf8')) : {};
    if (ps.argv.includes('--tsc') || ps.argv.includes('--sass') || ps.argv.includes('--esbuild')) {
        // cli args override json
        config.sass = ps.argv.includes('--sass');
        config.tsc = ps.argv.includes('--tsc');
        config.esbuild = ps.argv.includes('--esbuild');
    }
    if (ps.argv.includes('--no-color'))
        config.color = false;
    if (ps.argv.includes('--no-time'))
        config.time = false;
    if (ps.argv.includes('--no-context'))
        config.ctx = false;
    init(path.resolve(__dirname, '../../..'), config);
    if (ps.argv.includes('--help') || ps.argv.includes('-h')) {
        console.log(fs.readFileSync(path.resolve(__dirname, '../readme'), 'utf8'));
        return;
    }
    exports.env.watch = ps.argv.includes('--watch') || ps.argv.includes('-w');
    exports.env.prod = ps.argv.includes('--prod') || ps.argv.includes('-p');
    if (exports.env.prod && exports.env.watch) {
        exports.env.error('You cannot watch prod builds! Think of the children');
        return;
    }
    (0, build_1.build)(ps.argv.slice(2).filter(x => !x.startsWith('-')));
}
exports.main = main;
function init(root, opts) {
    exports.env.rootDir = root;
    exports.env.opts = opts;
    if (exports.env.opts.color === undefined) {
        exports.env.opts.color = {
            build: 'green',
            sass: 'magenta',
            tsc: 'yellow',
            esbuild: 'blue',
        };
    }
    if (exports.env.opts.sass === false)
        exports.env.exitCode.set('sass', false);
    if (exports.env.opts.tsc === false)
        exports.env.exitCode.set('tsc', false);
    if (exports.env.opts.esbuild === false)
        exports.env.exitCode.set('esbuild', false);
}
exports.init = init;
const lines = (s) => s.split(/[\n\r\f]+/).filter(x => x.trim());
exports.lines = lines;
const colorLines = (text, code) => (0, exports.lines)(text)
    .map(t => { var _a; return (((_a = exports.env.opts) === null || _a === void 0 ? void 0 : _a.color) !== false ? escape(t, code) : t); })
    .join('\n');
exports.colors = {
    red: (text) => colorLines(text, exports.codes.red),
    green: (text) => colorLines(text, exports.codes.green),
    yellow: (text) => colorLines(text, exports.codes.yellow),
    blue: (text) => colorLines(text, exports.codes.blue),
    magenta: (text) => colorLines(text, exports.codes.magenta),
    cyan: (text) => colorLines(text, exports.codes.cyan),
    grey: (text) => colorLines(text, exports.codes.grey),
    black: (text) => colorLines(text, exports.codes.black),
    error: (text) => colorLines(text, exports.codes.error),
    warn: (text) => colorLines(text, exports.codes.warn),
    good: (text) => colorLines(text, exports.codes.green + ';1'),
    cyanBold: (text) => colorLines(text, exports.codes.cyan + ';1'),
};
class Env {
    constructor() {
        this.watch = false;
        this.prod = false;
        this.exitCode = new Map();
        this.startTime = Date.now();
    }
    get sass() {
        return this.exitCode.get('sass') !== false;
    }
    get tsc() {
        return this.exitCode.get('tsc') !== false;
    }
    get esbuild() {
        return this.exitCode.get('esbuild') !== false;
    }
    get uiDir() {
        return path.join(this.rootDir, 'ui');
    }
    get outDir() {
        return path.join(this.rootDir, 'public');
    }
    get cssDir() {
        return path.join(this.outDir, 'css');
    }
    get jsDir() {
        return path.join(this.outDir, 'compiled');
    }
    get buildDir() {
        return path.join(this.uiDir, '@build');
    }
    warn(d, ctx = 'build') {
        this.log(d, { ctx: ctx, warn: true });
    }
    error(d, ctx = 'build') {
        this.log(d, { ctx: ctx, error: true });
    }
    good(ctx = 'build') {
        this.log(exports.colors.good('No errors') + exports.env.watch ? ` - ${exports.colors.grey('Watching')}...` : '', { ctx: ctx });
    }
    log(d, { ctx = 'build', error = false, warn = false } = {}) {
        let text = typeof d === 'string'
            ? d
            : d instanceof Buffer
                ? d.toString('utf8')
                : Array.isArray(d)
                    ? d.join('\n')
                    : JSON.stringify(d, undefined, 2);
        const esc = this.opts.color !== false ? escape : (text, _) => text;
        if (this.opts.color === false)
            text = stripColorEscapes(text);
        const prefix = ((this.opts.time === false ? '' : prettyTime()) +
            (!ctx || this.opts.ctx === false ? '' : `[${esc(ctx, colorForCtx(ctx, this.opts.color))}] `)).trim();
        (0, exports.lines)(text).forEach(line => console.log(`${prefix ? prefix + ' - ' : ''}${error ? esc(line, exports.codes.error) : warn ? esc(line, exports.codes.warn) : line}`));
    }
    done(code, ctx) {
        this.exitCode.set(ctx, code);
        const err = [...this.exitCode.values()].find(x => x);
        const allDone = this.exitCode.size === 3;
        this.log(`${code === 0 ? 'Done' : exports.colors.red('Failed')}` + (this.watch ? ` - ${exports.colors.grey('Watching')}...` : ''), {
            ctx: ctx,
        });
        if (allDone) {
            if (!err)
                (0, build_1.postBuild)();
            if (this.startTime && !err)
                this.log(`Done in ${exports.colors.green((Date.now() - this.startTime) / 1000 + '')}s`);
            this.startTime = undefined; // it's pointless to time subsequent builds, they are too fast
            if (!exports.env.watch) {
                process.exitCode = err || 0;
            }
        }
    }
}
exports.env = new Env();
exports.codes = {
    black: '30',
    red: '31',
    green: '32',
    yellow: '33',
    blue: '34',
    magenta: '35',
    cyan: '36',
    grey: '90',
    error: '31;41',
    warn: '33;43',
};
const colorForCtx = (ctx, color) => color && ctx in color && color[ctx] in exports.codes ? exports.codes[color[ctx]] : exports.codes.grey;
const escape = (text, code) => `\x1b[${code}m${stripColorEscapes(text)}\x1b[0m`;
const pad2 = (n) => (n < 10 ? `0${n}` : `${n}`);
function stripColorEscapes(text) {
    // eslint-disable-next-line no-control-regex
    return text.replace(/\x1b\[[0-9;]*m/, '');
}
exports.errorMark = exports.colors.red('âœ˜ ') + exports.colors.error('[ERROR]');
function prettyTime() {
    const now = new Date();
    return `${pad2(now.getHours())}:${pad2(now.getMinutes())}:${pad2(now.getSeconds())} `;
}
main();
//# sourceMappingURL=data:application/json;base64,