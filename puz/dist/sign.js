export default function (serverKey) {
    const otp = randomAscii(64);
    lichess.socket.send('sk1', `${serverKey}!${otp}`);
    return new Promise(solve => lichess.pubsub.on('socket.in.sk1', encrypted => solve(xor(encrypted, otp))));
}
function xor(a, b) {
    const result = [];
    for (let i = 0; i < a.length; i++)
        result.push(String.fromCharCode(a.charCodeAt(i) ^ b.charCodeAt(i)));
    return result.join('');
}
function randomAscii(length) {
    const result = [];
    // start after '!' which is used as delimiter
    for (let i = 0; i < length; i++)
        result.push(String.fromCharCode(34 + Math.floor(Math.random() * 92)));
    return result.join('');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zaWduLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxPQUFPLFdBQVcsU0FBaUI7SUFDeEMsTUFBTSxHQUFHLEdBQUcsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzVCLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLFNBQVMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2xELE9BQU8sSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsU0FBUyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzRyxDQUFDO0FBRUQsU0FBUyxHQUFHLENBQUMsQ0FBUyxFQUFFLENBQVM7SUFDL0IsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBQ2xCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRTtRQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZHLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN6QixDQUFDO0FBRUQsU0FBUyxXQUFXLENBQUMsTUFBYztJQUNqQyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFDbEIsNkNBQTZDO0lBQzdDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFO1FBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkcsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoc2VydmVyS2V5OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICBjb25zdCBvdHAgPSByYW5kb21Bc2NpaSg2NCk7XG4gIGxpY2hlc3Muc29ja2V0LnNlbmQoJ3NrMScsIGAke3NlcnZlcktleX0hJHtvdHB9YCk7XG4gIHJldHVybiBuZXcgUHJvbWlzZShzb2x2ZSA9PiBsaWNoZXNzLnB1YnN1Yi5vbignc29ja2V0LmluLnNrMScsIGVuY3J5cHRlZCA9PiBzb2x2ZSh4b3IoZW5jcnlwdGVkLCBvdHApKSkpO1xufVxuXG5mdW5jdGlvbiB4b3IoYTogc3RyaW5nLCBiOiBzdHJpbmcpIHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykgcmVzdWx0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShhLmNoYXJDb2RlQXQoaSkgXiBiLmNoYXJDb2RlQXQoaSkpKTtcbiAgcmV0dXJuIHJlc3VsdC5qb2luKCcnKTtcbn1cblxuZnVuY3Rpb24gcmFuZG9tQXNjaWkobGVuZ3RoOiBudW1iZXIpIHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIC8vIHN0YXJ0IGFmdGVyICchJyB3aGljaCBpcyB1c2VkIGFzIGRlbGltaXRlclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSByZXN1bHQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKDM0ICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogOTIpKSk7XG4gIHJldHVybiByZXN1bHQuam9pbignJyk7XG59XG4iXX0=