import { defined } from 'common';
import { getNow } from '../util';
import { h } from 'snabbdom';
let refreshInterval;
let lastText;
export default function renderClock(run, onFlag, withBonus) {
    return h('div.puz-clock__time', {
        hook: {
            insert(node) {
                const el = node.elm;
                el.innerText = formatMs(run.clock.millis());
                refreshInterval = setInterval(() => renderIn(run, onFlag, el, withBonus), 100);
            },
            destroy() {
                if (refreshInterval)
                    clearInterval(refreshInterval);
            },
        },
    });
}
function renderIn(run, onFlag, el, withBonus) {
    if (!run.clock.startAt)
        return;
    const mods = run.modifier;
    const now = getNow();
    const millis = run.clock.millis();
    const diffs = withBonus ? computeModifierDiff(now, mods.bonus) - computeModifierDiff(now, mods.malus) : 0;
    const text = formatMs(millis - diffs);
    if (text != lastText)
        el.innerText = text;
    lastText = text;
    if (millis < 1 && !run.endAt)
        onFlag();
}
const pad = (x) => (x < 10 ? '0' : '') + x;
const formatMs = (millis) => {
    const date = new Date(Math.max(0, Math.ceil(millis / 1000) * 1000)), minutes = date.getUTCMinutes(), seconds = date.getUTCSeconds();
    return minutes + ':' + pad(seconds);
};
function computeModifierDiff(now, mod) {
    const millisSince = mod && (now - mod.at < 1000 ? now - mod.at : undefined);
    return defined(millisSince) ? mod.seconds * 1000 * (1 - millisSince / 1000) : 0;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdmlldy9jbG9jay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDakMsT0FBTyxFQUFFLENBQUMsRUFBUyxNQUFNLFVBQVUsQ0FBQztBQUtwQyxJQUFJLGVBQXdCLENBQUM7QUFDN0IsSUFBSSxRQUFnQixDQUFDO0FBRXJCLE1BQU0sQ0FBQyxPQUFPLFVBQVUsV0FBVyxDQUFDLEdBQVEsRUFBRSxNQUFjLEVBQUUsU0FBa0I7SUFDOUUsT0FBTyxDQUFDLENBQUMscUJBQXFCLEVBQUU7UUFDOUIsSUFBSSxFQUFFO1lBQ0osTUFBTSxDQUFDLElBQUk7Z0JBQ1QsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQXFCLENBQUM7Z0JBQ3RDLEVBQUUsQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztnQkFDNUMsZUFBZSxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsU0FBUyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDakYsQ0FBQztZQUNELE9BQU87Z0JBQ0wsSUFBSSxlQUFlO29CQUFFLGFBQWEsQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUN0RCxDQUFDO1NBQ0Y7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsU0FBUyxRQUFRLENBQUMsR0FBUSxFQUFFLE1BQWMsRUFBRSxFQUFlLEVBQUUsU0FBa0I7SUFDN0UsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTztRQUFFLE9BQU87SUFDL0IsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQztJQUMxQixNQUFNLEdBQUcsR0FBRyxNQUFNLEVBQUUsQ0FBQztJQUNyQixNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2xDLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUcsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQztJQUN0QyxJQUFJLElBQUksSUFBSSxRQUFRO1FBQUUsRUFBRSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7SUFDMUMsUUFBUSxHQUFHLElBQUksQ0FBQztJQUNoQixJQUFJLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSztRQUFFLE1BQU0sRUFBRSxDQUFDO0FBQ3pDLENBQUM7QUFFRCxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQVMsRUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUUzRCxNQUFNLFFBQVEsR0FBRyxDQUFDLE1BQWMsRUFBVSxFQUFFO0lBQzFDLE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQ2pFLE9BQU8sR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLEVBQzlCLE9BQU8sR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDakMsT0FBTyxPQUFPLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN0QyxDQUFDLENBQUM7QUFFRixTQUFTLG1CQUFtQixDQUFDLEdBQVcsRUFBRSxHQUFhO0lBQ3JELE1BQU0sV0FBVyxHQUF1QixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNoRyxPQUFPLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsV0FBVyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlZmluZWQgfSBmcm9tICdjb21tb24nO1xuaW1wb3J0IHsgZ2V0Tm93IH0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgeyBoLCBWTm9kZSB9IGZyb20gJ3NuYWJiZG9tJztcbmltcG9ydCB7IFJ1biwgVGltZU1vZCB9IGZyb20gJy4uL2ludGVyZmFjZXMnO1xuXG50eXBlIE9uRmxhZyA9ICgpID0+IHZvaWQ7XG5cbmxldCByZWZyZXNoSW50ZXJ2YWw6IFRpbWVvdXQ7XG5sZXQgbGFzdFRleHQ6IHN0cmluZztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVuZGVyQ2xvY2socnVuOiBSdW4sIG9uRmxhZzogT25GbGFnLCB3aXRoQm9udXM6IGJvb2xlYW4pOiBWTm9kZSB7XG4gIHJldHVybiBoKCdkaXYucHV6LWNsb2NrX190aW1lJywge1xuICAgIGhvb2s6IHtcbiAgICAgIGluc2VydChub2RlKSB7XG4gICAgICAgIGNvbnN0IGVsID0gbm9kZS5lbG0gYXMgSFRNTERpdkVsZW1lbnQ7XG4gICAgICAgIGVsLmlubmVyVGV4dCA9IGZvcm1hdE1zKHJ1bi5jbG9jay5taWxsaXMoKSk7XG4gICAgICAgIHJlZnJlc2hJbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHJlbmRlckluKHJ1biwgb25GbGFnLCBlbCwgd2l0aEJvbnVzKSwgMTAwKTtcbiAgICAgIH0sXG4gICAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAocmVmcmVzaEludGVydmFsKSBjbGVhckludGVydmFsKHJlZnJlc2hJbnRlcnZhbCk7XG4gICAgICB9LFxuICAgIH0sXG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZW5kZXJJbihydW46IFJ1biwgb25GbGFnOiBPbkZsYWcsIGVsOiBIVE1MRWxlbWVudCwgd2l0aEJvbnVzOiBib29sZWFuKSB7XG4gIGlmICghcnVuLmNsb2NrLnN0YXJ0QXQpIHJldHVybjtcbiAgY29uc3QgbW9kcyA9IHJ1bi5tb2RpZmllcjtcbiAgY29uc3Qgbm93ID0gZ2V0Tm93KCk7XG4gIGNvbnN0IG1pbGxpcyA9IHJ1bi5jbG9jay5taWxsaXMoKTtcbiAgY29uc3QgZGlmZnMgPSB3aXRoQm9udXMgPyBjb21wdXRlTW9kaWZpZXJEaWZmKG5vdywgbW9kcy5ib251cykgLSBjb21wdXRlTW9kaWZpZXJEaWZmKG5vdywgbW9kcy5tYWx1cykgOiAwO1xuICBjb25zdCB0ZXh0ID0gZm9ybWF0TXMobWlsbGlzIC0gZGlmZnMpO1xuICBpZiAodGV4dCAhPSBsYXN0VGV4dCkgZWwuaW5uZXJUZXh0ID0gdGV4dDtcbiAgbGFzdFRleHQgPSB0ZXh0O1xuICBpZiAobWlsbGlzIDwgMSAmJiAhcnVuLmVuZEF0KSBvbkZsYWcoKTtcbn1cblxuY29uc3QgcGFkID0gKHg6IG51bWJlcik6IHN0cmluZyA9PiAoeCA8IDEwID8gJzAnIDogJycpICsgeDtcblxuY29uc3QgZm9ybWF0TXMgPSAobWlsbGlzOiBudW1iZXIpOiBzdHJpbmcgPT4ge1xuICBjb25zdCBkYXRlID0gbmV3IERhdGUoTWF0aC5tYXgoMCwgTWF0aC5jZWlsKG1pbGxpcyAvIDEwMDApICogMTAwMCkpLFxuICAgIG1pbnV0ZXMgPSBkYXRlLmdldFVUQ01pbnV0ZXMoKSxcbiAgICBzZWNvbmRzID0gZGF0ZS5nZXRVVENTZWNvbmRzKCk7XG4gIHJldHVybiBtaW51dGVzICsgJzonICsgcGFkKHNlY29uZHMpO1xufTtcblxuZnVuY3Rpb24gY29tcHV0ZU1vZGlmaWVyRGlmZihub3c6IG51bWJlciwgbW9kPzogVGltZU1vZCkge1xuICBjb25zdCBtaWxsaXNTaW5jZTogbnVtYmVyIHwgdW5kZWZpbmVkID0gbW9kICYmIChub3cgLSBtb2QuYXQgPCAxMDAwID8gbm93IC0gbW9kLmF0IDogdW5kZWZpbmVkKTtcbiAgcmV0dXJuIGRlZmluZWQobWlsbGlzU2luY2UpID8gbW9kIS5zZWNvbmRzICogMTAwMCAqICgxIC0gbWlsbGlzU2luY2UgLyAxMDAwKSA6IDA7XG59XG4iXX0=