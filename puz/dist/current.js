import { Chess, opposite, parseUci } from 'chessops';
import { parseFen } from 'chessops/fen';
import { getNow } from './util';
export default class CurrentPuzzle {
    constructor(index, puzzle) {
        this.index = index;
        this.puzzle = puzzle;
        this.moveIndex = -1;
        this.position = () => {
            const pos = Chess.fromSetup(parseFen(this.puzzle.fen).unwrap()).unwrap();
            if (this.moveIndex >= 0)
                this.line.slice(0, this.moveIndex + 1).forEach(uci => pos.play(parseUci(uci)));
            return pos;
        };
        this.expectedMove = () => this.line[this.moveIndex + 1];
        this.lastMove = () => this.line[this.moveIndex];
        this.isOver = () => this.moveIndex >= this.line.length - 1;
        this.line = puzzle.line.split(' ');
        this.pov = opposite(parseFen(puzzle.fen).unwrap().turn);
        this.startAt = getNow();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VycmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jdXJyZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXhDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFaEMsTUFBTSxDQUFDLE9BQU8sT0FBTyxhQUFhO0lBTWhDLFlBQXFCLEtBQWEsRUFBVyxNQUFjO1FBQXRDLFVBQUssR0FBTCxLQUFLLENBQVE7UUFBVyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBSDNELGNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQVNmLGFBQVEsR0FBRyxHQUFVLEVBQUU7WUFDckIsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ3pFLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDO2dCQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBRSxDQUFDLENBQUMsQ0FBQztZQUN6RyxPQUFPLEdBQUcsQ0FBQztRQUNiLENBQUMsQ0FBQztRQUVGLGlCQUFZLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRW5ELGFBQVEsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUUzQyxXQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFmcEQsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxFQUFFLENBQUM7SUFDMUIsQ0FBQztDQWFGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hlc3MsIG9wcG9zaXRlLCBwYXJzZVVjaSB9IGZyb20gJ2NoZXNzb3BzJztcbmltcG9ydCB7IHBhcnNlRmVuIH0gZnJvbSAnY2hlc3NvcHMvZmVuJztcbmltcG9ydCB7IFB1enpsZSB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBnZXROb3cgfSBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDdXJyZW50UHV6emxlIHtcbiAgbGluZTogVWNpW107XG4gIHN0YXJ0QXQ6IG51bWJlcjtcbiAgbW92ZUluZGV4ID0gLTE7XG4gIHBvdjogQ29sb3I7XG5cbiAgY29uc3RydWN0b3IocmVhZG9ubHkgaW5kZXg6IG51bWJlciwgcmVhZG9ubHkgcHV6emxlOiBQdXp6bGUpIHtcbiAgICB0aGlzLmxpbmUgPSBwdXp6bGUubGluZS5zcGxpdCgnICcpO1xuICAgIHRoaXMucG92ID0gb3Bwb3NpdGUocGFyc2VGZW4ocHV6emxlLmZlbikudW53cmFwKCkudHVybik7XG4gICAgdGhpcy5zdGFydEF0ID0gZ2V0Tm93KCk7XG4gIH1cblxuICBwb3NpdGlvbiA9ICgpOiBDaGVzcyA9PiB7XG4gICAgY29uc3QgcG9zID0gQ2hlc3MuZnJvbVNldHVwKHBhcnNlRmVuKHRoaXMucHV6emxlLmZlbikudW53cmFwKCkpLnVud3JhcCgpO1xuICAgIGlmICh0aGlzLm1vdmVJbmRleCA+PSAwKSB0aGlzLmxpbmUuc2xpY2UoMCwgdGhpcy5tb3ZlSW5kZXggKyAxKS5mb3JFYWNoKHVjaSA9PiBwb3MucGxheShwYXJzZVVjaSh1Y2kpISkpO1xuICAgIHJldHVybiBwb3M7XG4gIH07XG5cbiAgZXhwZWN0ZWRNb3ZlID0gKCkgPT4gdGhpcy5saW5lW3RoaXMubW92ZUluZGV4ICsgMV07XG5cbiAgbGFzdE1vdmUgPSAoKSA9PiB0aGlzLmxpbmVbdGhpcy5tb3ZlSW5kZXhdO1xuXG4gIGlzT3ZlciA9ICgpID0+IHRoaXMubW92ZUluZGV4ID49IHRoaXMubGluZS5sZW5ndGggLSAxO1xufVxuIl19