import { opposite, uciToMove } from 'chessground/util';
import { makeFen } from 'chessops/fen';
import { chessgroundDests } from 'chessops/compat';
export const makeCgOpts = (run, canMove, flipped) => {
    const cur = run.current;
    const pos = cur.position();
    return {
        fen: makeFen(pos.toSetup()),
        orientation: flipped ? opposite(run.pov) : run.pov,
        turnColor: pos.turn,
        movable: {
            color: run.pov,
            dests: canMove ? chessgroundDests(pos) : undefined,
        },
        check: !!pos.isCheck(),
        lastMove: uciToMove(cur.lastMove()),
        animation: {
            enabled: cur.moveIndex >= 0,
        },
    };
};
export const povMessage = (run) => `youPlayThe${run.pov == 'white' ? 'White' : 'Black'}PiecesInAllPuzzles`;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3J1bi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDdkMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbkQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsR0FBUSxFQUFFLE9BQWdCLEVBQUUsT0FBZ0IsRUFBWSxFQUFFO0lBQ25GLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUM7SUFDeEIsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzNCLE9BQU87UUFDTCxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMzQixXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRztRQUNsRCxTQUFTLEVBQUUsR0FBRyxDQUFDLElBQUk7UUFDbkIsT0FBTyxFQUFFO1lBQ1AsS0FBSyxFQUFFLEdBQUcsQ0FBQyxHQUFHO1lBQ2QsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7U0FDbkQ7UUFDRCxLQUFLLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUU7UUFDdEIsUUFBUSxFQUFFLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkMsU0FBUyxFQUFFO1lBQ1QsT0FBTyxFQUFFLEdBQUcsQ0FBQyxTQUFTLElBQUksQ0FBQztTQUM1QjtLQUNGLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxHQUFRLEVBQUUsRUFBRSxDQUFDLGFBQWEsR0FBRyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxvQkFBb0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJ1biB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBDb25maWcgYXMgQ2dDb25maWcgfSBmcm9tICdjaGVzc2dyb3VuZC9jb25maWcnO1xuaW1wb3J0IHsgb3Bwb3NpdGUsIHVjaVRvTW92ZSB9IGZyb20gJ2NoZXNzZ3JvdW5kL3V0aWwnO1xuaW1wb3J0IHsgbWFrZUZlbiB9IGZyb20gJ2NoZXNzb3BzL2Zlbic7XG5pbXBvcnQgeyBjaGVzc2dyb3VuZERlc3RzIH0gZnJvbSAnY2hlc3NvcHMvY29tcGF0JztcblxuZXhwb3J0IGNvbnN0IG1ha2VDZ09wdHMgPSAocnVuOiBSdW4sIGNhbk1vdmU6IGJvb2xlYW4sIGZsaXBwZWQ6IGJvb2xlYW4pOiBDZ0NvbmZpZyA9PiB7XG4gIGNvbnN0IGN1ciA9IHJ1bi5jdXJyZW50O1xuICBjb25zdCBwb3MgPSBjdXIucG9zaXRpb24oKTtcbiAgcmV0dXJuIHtcbiAgICBmZW46IG1ha2VGZW4ocG9zLnRvU2V0dXAoKSksXG4gICAgb3JpZW50YXRpb246IGZsaXBwZWQgPyBvcHBvc2l0ZShydW4ucG92KSA6IHJ1bi5wb3YsXG4gICAgdHVybkNvbG9yOiBwb3MudHVybixcbiAgICBtb3ZhYmxlOiB7XG4gICAgICBjb2xvcjogcnVuLnBvdixcbiAgICAgIGRlc3RzOiBjYW5Nb3ZlID8gY2hlc3Nncm91bmREZXN0cyhwb3MpIDogdW5kZWZpbmVkLFxuICAgIH0sXG4gICAgY2hlY2s6ICEhcG9zLmlzQ2hlY2soKSxcbiAgICBsYXN0TW92ZTogdWNpVG9Nb3ZlKGN1ci5sYXN0TW92ZSgpKSxcbiAgICBhbmltYXRpb246IHtcbiAgICAgIGVuYWJsZWQ6IGN1ci5tb3ZlSW5kZXggPj0gMCxcbiAgICB9LFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHBvdk1lc3NhZ2UgPSAocnVuOiBSdW4pID0+IGB5b3VQbGF5VGhlJHtydW4ucG92ID09ICd3aGl0ZScgPyAnV2hpdGUnIDogJ0JsYWNrJ31QaWVjZXNJbkFsbFB1enpsZXNgO1xuIl19