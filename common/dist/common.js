export const defined = (value) => value !== undefined;
export const notNull = (value) => value !== null && value !== undefined;
export const isEmpty = (a) => !a || a.length === 0;
export const notEmpty = (a) => !isEmpty(a);
// like mithril prop but with type safety
export const prop = (initialValue) => {
    let value = initialValue;
    return (v) => {
        if (defined(v))
            value = v;
        return value;
    };
};
export const propWithEffect = (initialValue, effect) => {
    let value = initialValue;
    return (v) => {
        if (defined(v)) {
            value = v;
            effect(v);
        }
        return value;
    };
};
export const withEffect = (prop, effect) => (v) => {
    let returnValue;
    if (defined(v)) {
        returnValue = prop(v);
        effect(v);
    }
    else
        returnValue = prop();
    return returnValue;
};
export const toggle = (initialValue, effect = () => { }) => {
    const prop = propWithEffect(initialValue, effect);
    prop.toggle = () => prop(!prop());
    return prop;
};
// Only computes a value once. The computed value must not be undefined.
export const memoize = (compute) => {
    let computed;
    return () => {
        if (computed === undefined)
            computed = compute();
        return computed;
    };
};
export const scrollToInnerSelector = (el, selector) => scrollTo(el, el.querySelector(selector));
export const scrollTo = (el, target) => {
    if (target)
        el.scrollTop = target.offsetTop - el.offsetHeight / 2 + target.offsetHeight / 2;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FBSSxLQUFvQixFQUFjLEVBQUUsQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDO0FBRXBGLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxDQUFJLEtBQTJCLEVBQWMsRUFBRSxDQUFDLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLFNBQVMsQ0FBQztBQUU3RyxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FBSSxDQUFrQixFQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztBQUVoRixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBSSxDQUFrQixFQUFXLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQVF4RSx5Q0FBeUM7QUFDekMsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUksWUFBZSxFQUFXLEVBQUU7SUFDbEQsSUFBSSxLQUFLLEdBQUcsWUFBWSxDQUFDO0lBQ3pCLE9BQU8sQ0FBQyxDQUFLLEVBQUUsRUFBRTtRQUNmLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQztZQUFFLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDMUIsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FBSSxZQUFlLEVBQUUsTUFBMEIsRUFBcUIsRUFBRTtJQUNsRyxJQUFJLEtBQUssR0FBRyxZQUFZLENBQUM7SUFDekIsT0FBTyxDQUFDLENBQUssRUFBRSxFQUFFO1FBQ2YsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDZCxLQUFLLEdBQUcsQ0FBQyxDQUFDO1lBQ1YsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ1g7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FDckIsQ0FBSSxJQUFhLEVBQUUsTUFBc0IsRUFBcUIsRUFBRSxDQUNoRSxDQUFDLENBQUssRUFBRSxFQUFFO0lBQ1IsSUFBSSxXQUFXLENBQUM7SUFDaEIsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDZCxXQUFXLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNYOztRQUFNLFdBQVcsR0FBRyxJQUFJLEVBQUUsQ0FBQztJQUM1QixPQUFPLFdBQVcsQ0FBQztBQUNyQixDQUFDLENBQUM7QUFNSixNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxZQUFxQixFQUFFLFNBQW1DLEdBQUcsRUFBRSxHQUFFLENBQUMsRUFBVSxFQUFFO0lBQ25HLE1BQU0sSUFBSSxHQUFHLGNBQWMsQ0FBVSxZQUFZLEVBQUUsTUFBTSxDQUFXLENBQUM7SUFDckUsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFDO0FBRUYsd0VBQXdFO0FBQ3hFLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxDQUFJLE9BQWdCLEVBQWEsRUFBRTtJQUN4RCxJQUFJLFFBQVcsQ0FBQztJQUNoQixPQUFPLEdBQUcsRUFBRTtRQUNWLElBQUksUUFBUSxLQUFLLFNBQVM7WUFBRSxRQUFRLEdBQUcsT0FBTyxFQUFFLENBQUM7UUFDakQsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsQ0FBQyxFQUFlLEVBQUUsUUFBZ0IsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFFckgsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsRUFBZSxFQUFFLE1BQTBCLEVBQUUsRUFBRTtJQUN0RSxJQUFJLE1BQU07UUFBRSxFQUFFLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDLFlBQVksR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7QUFDOUYsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGRlZmluZWQgPSA8VD4odmFsdWU6IFQgfCB1bmRlZmluZWQpOiB2YWx1ZSBpcyBUID0+IHZhbHVlICE9PSB1bmRlZmluZWQ7XG5cbmV4cG9ydCBjb25zdCBub3ROdWxsID0gPFQ+KHZhbHVlOiBUIHwgbnVsbCB8IHVuZGVmaW5lZCk6IHZhbHVlIGlzIFQgPT4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZDtcblxuZXhwb3J0IGNvbnN0IGlzRW1wdHkgPSA8VD4oYTogVFtdIHwgdW5kZWZpbmVkKTogYm9vbGVhbiA9PiAhYSB8fCBhLmxlbmd0aCA9PT0gMDtcblxuZXhwb3J0IGNvbnN0IG5vdEVtcHR5ID0gPFQ+KGE6IFRbXSB8IHVuZGVmaW5lZCk6IGJvb2xlYW4gPT4gIWlzRW1wdHkoYSk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvcDxUPiB7XG4gICgpOiBUO1xuICAodjogVCk6IFQ7XG59XG5leHBvcnQgaW50ZXJmYWNlIFByb3BXaXRoRWZmZWN0PFQ+IGV4dGVuZHMgUHJvcDxUPiB7fVxuXG4vLyBsaWtlIG1pdGhyaWwgcHJvcCBidXQgd2l0aCB0eXBlIHNhZmV0eVxuZXhwb3J0IGNvbnN0IHByb3AgPSA8QT4oaW5pdGlhbFZhbHVlOiBBKTogUHJvcDxBPiA9PiB7XG4gIGxldCB2YWx1ZSA9IGluaXRpYWxWYWx1ZTtcbiAgcmV0dXJuICh2PzogQSkgPT4ge1xuICAgIGlmIChkZWZpbmVkKHYpKSB2YWx1ZSA9IHY7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHByb3BXaXRoRWZmZWN0ID0gPEE+KGluaXRpYWxWYWx1ZTogQSwgZWZmZWN0OiAodmFsdWU6IEEpID0+IHZvaWQpOiBQcm9wV2l0aEVmZmVjdDxBPiA9PiB7XG4gIGxldCB2YWx1ZSA9IGluaXRpYWxWYWx1ZTtcbiAgcmV0dXJuICh2PzogQSkgPT4ge1xuICAgIGlmIChkZWZpbmVkKHYpKSB7XG4gICAgICB2YWx1ZSA9IHY7XG4gICAgICBlZmZlY3Qodik7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCB3aXRoRWZmZWN0ID1cbiAgPFQ+KHByb3A6IFByb3A8VD4sIGVmZmVjdDogKHY6IFQpID0+IHZvaWQpOiBQcm9wV2l0aEVmZmVjdDxUPiA9PlxuICAodj86IFQpID0+IHtcbiAgICBsZXQgcmV0dXJuVmFsdWU7XG4gICAgaWYgKGRlZmluZWQodikpIHtcbiAgICAgIHJldHVyblZhbHVlID0gcHJvcCh2KTtcbiAgICAgIGVmZmVjdCh2KTtcbiAgICB9IGVsc2UgcmV0dXJuVmFsdWUgPSBwcm9wKCk7XG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICB9O1xuXG5leHBvcnQgaW50ZXJmYWNlIFRvZ2dsZSBleHRlbmRzIFByb3BXaXRoRWZmZWN0PGJvb2xlYW4+IHtcbiAgdG9nZ2xlKCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBjb25zdCB0b2dnbGUgPSAoaW5pdGlhbFZhbHVlOiBib29sZWFuLCBlZmZlY3Q6ICh2YWx1ZTogYm9vbGVhbikgPT4gdm9pZCA9ICgpID0+IHt9KTogVG9nZ2xlID0+IHtcbiAgY29uc3QgcHJvcCA9IHByb3BXaXRoRWZmZWN0PGJvb2xlYW4+KGluaXRpYWxWYWx1ZSwgZWZmZWN0KSBhcyBUb2dnbGU7XG4gIHByb3AudG9nZ2xlID0gKCkgPT4gcHJvcCghcHJvcCgpKTtcbiAgcmV0dXJuIHByb3A7XG59O1xuXG4vLyBPbmx5IGNvbXB1dGVzIGEgdmFsdWUgb25jZS4gVGhlIGNvbXB1dGVkIHZhbHVlIG11c3Qgbm90IGJlIHVuZGVmaW5lZC5cbmV4cG9ydCBjb25zdCBtZW1vaXplID0gPEE+KGNvbXB1dGU6ICgpID0+IEEpOiAoKCkgPT4gQSkgPT4ge1xuICBsZXQgY29tcHV0ZWQ6IEE7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgaWYgKGNvbXB1dGVkID09PSB1bmRlZmluZWQpIGNvbXB1dGVkID0gY29tcHV0ZSgpO1xuICAgIHJldHVybiBjb21wdXRlZDtcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBzY3JvbGxUb0lubmVyU2VsZWN0b3IgPSAoZWw6IEhUTUxFbGVtZW50LCBzZWxlY3Rvcjogc3RyaW5nKSA9PiBzY3JvbGxUbyhlbCwgZWwucXVlcnlTZWxlY3RvcihzZWxlY3RvcikpO1xuXG5leHBvcnQgY29uc3Qgc2Nyb2xsVG8gPSAoZWw6IEhUTUxFbGVtZW50LCB0YXJnZXQ6IEhUTUxFbGVtZW50IHwgbnVsbCkgPT4ge1xuICBpZiAodGFyZ2V0KSBlbC5zY3JvbGxUb3AgPSB0YXJnZXQub2Zmc2V0VG9wIC0gZWwub2Zmc2V0SGVpZ2h0IC8gMiArIHRhcmdldC5vZmZzZXRIZWlnaHQgLyAyO1xufTtcbiJdfQ==