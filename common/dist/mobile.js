import { memoize } from './common';
import { bind } from './snabbdom';
const longPressDuration = 610;
export function bindMobileTapHold(el, f, redraw) {
    let longPressCountdown;
    el.addEventListener('touchstart', e => {
        longPressCountdown = setTimeout(() => {
            f(e);
            if (redraw)
                redraw();
        }, longPressDuration);
    });
    el.addEventListener('touchmove', () => {
        clearTimeout(longPressCountdown);
    });
    el.addEventListener('touchcancel', () => {
        clearTimeout(longPressCountdown);
    });
    el.addEventListener('touchend', () => {
        clearTimeout(longPressCountdown);
    });
}
export function bindMobileMousedown(el, f, redraw) {
    for (const mousedownEvent of ['touchstart', 'mousedown']) {
        el.addEventListener(mousedownEvent, e => {
            f(e);
            e.preventDefault();
            if (redraw)
                redraw();
        }, { passive: false });
    }
}
export function hookMobileMousedown(f) {
    return bind('ontouchstart' in window ? 'click' : 'mousedown', f);
}
export const isMobile = () => isAndroid() || isIOS();
export const isAndroid = () => /Android/.test(navigator.userAgent);
export const isIOS = () => /iPhone|iPod/.test(navigator.userAgent) || isIPad();
// some newer iPads pretend to be Macs, hence checking for "Macintosh"
export const isIPad = () => (navigator === null || navigator === void 0 ? void 0 : navigator.maxTouchPoints) > 2 && /iPad|Macintosh/.test(navigator.userAgent);
const hasMouse = memoize(() => window.matchMedia('(hover: hover) and (pointer: fine)').matches);
export const isTouchDevice = () => !hasMouse();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9iaWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL21vYmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ25DLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFbEMsTUFBTSxpQkFBaUIsR0FBRyxHQUFHLENBQUM7QUFFOUIsTUFBTSxVQUFVLGlCQUFpQixDQUFDLEVBQWUsRUFBRSxDQUF3QixFQUFFLE1BQW1CO0lBQzlGLElBQUksa0JBQTBCLENBQUM7SUFFL0IsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsRUFBRTtRQUNwQyxrQkFBa0IsR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ25DLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNMLElBQUksTUFBTTtnQkFBRSxNQUFNLEVBQUUsQ0FBQztRQUN2QixDQUFDLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUN4QixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsR0FBRyxFQUFFO1FBQ3BDLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ25DLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBRSxHQUFHLEVBQUU7UUFDdEMsWUFBWSxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRTtRQUNuQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUNuQyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsbUJBQW1CLENBQUMsRUFBZSxFQUFFLENBQXdCLEVBQUUsTUFBbUI7SUFDaEcsS0FBSyxNQUFNLGNBQWMsSUFBSSxDQUFDLFlBQVksRUFBRSxXQUFXLENBQUMsRUFBRTtRQUN4RCxFQUFFLENBQUMsZ0JBQWdCLENBQ2pCLGNBQWMsRUFDZCxDQUFDLENBQUMsRUFBRTtZQUNGLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUNuQixJQUFJLE1BQU07Z0JBQUUsTUFBTSxFQUFFLENBQUM7UUFDdkIsQ0FBQyxFQUNELEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUNuQixDQUFDO0tBQ0g7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLG1CQUFtQixDQUFDLENBQW9CO0lBQ3RELE9BQU8sSUFBSSxDQUFDLGNBQWMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ25FLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsR0FBWSxFQUFFLENBQUMsU0FBUyxFQUFFLElBQUksS0FBSyxFQUFFLENBQUM7QUFFOUQsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLEdBQVksRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRTVFLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxHQUFZLEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxNQUFNLEVBQUUsQ0FBQztBQUV4RixzRUFBc0U7QUFDdEUsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLEdBQVksRUFBRSxDQUFDLENBQUEsU0FBUyxhQUFULFNBQVMsdUJBQVQsU0FBUyxDQUFFLGNBQWMsSUFBRyxDQUFDLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUVqSCxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQVUsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBRXpHLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWVtb2l6ZSB9IGZyb20gJy4vY29tbW9uJztcbmltcG9ydCB7IGJpbmQgfSBmcm9tICcuL3NuYWJiZG9tJztcblxuY29uc3QgbG9uZ1ByZXNzRHVyYXRpb24gPSA2MTA7XG5cbmV4cG9ydCBmdW5jdGlvbiBiaW5kTW9iaWxlVGFwSG9sZChlbDogSFRNTEVsZW1lbnQsIGY6IChlOiBFdmVudCkgPT4gdW5rbm93biwgcmVkcmF3PzogKCkgPT4gdm9pZCkge1xuICBsZXQgbG9uZ1ByZXNzQ291bnRkb3duOiBudW1iZXI7XG5cbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGUgPT4ge1xuICAgIGxvbmdQcmVzc0NvdW50ZG93biA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZihlKTtcbiAgICAgIGlmIChyZWRyYXcpIHJlZHJhdygpO1xuICAgIH0sIGxvbmdQcmVzc0R1cmF0aW9uKTtcbiAgfSk7XG5cbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgKCkgPT4ge1xuICAgIGNsZWFyVGltZW91dChsb25nUHJlc3NDb3VudGRvd24pO1xuICB9KTtcblxuICBlbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGNhbmNlbCcsICgpID0+IHtcbiAgICBjbGVhclRpbWVvdXQobG9uZ1ByZXNzQ291bnRkb3duKTtcbiAgfSk7XG5cbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCAoKSA9PiB7XG4gICAgY2xlYXJUaW1lb3V0KGxvbmdQcmVzc0NvdW50ZG93bik7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmluZE1vYmlsZU1vdXNlZG93bihlbDogSFRNTEVsZW1lbnQsIGY6IChlOiBFdmVudCkgPT4gdW5rbm93biwgcmVkcmF3PzogKCkgPT4gdm9pZCk6IHZvaWQge1xuICBmb3IgKGNvbnN0IG1vdXNlZG93bkV2ZW50IG9mIFsndG91Y2hzdGFydCcsICdtb3VzZWRvd24nXSkge1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICBtb3VzZWRvd25FdmVudCxcbiAgICAgIGUgPT4ge1xuICAgICAgICBmKGUpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGlmIChyZWRyYXcpIHJlZHJhdygpO1xuICAgICAgfSxcbiAgICAgIHsgcGFzc2l2ZTogZmFsc2UgfVxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhvb2tNb2JpbGVNb3VzZWRvd24oZjogKGU6IEV2ZW50KSA9PiBhbnkpIHtcbiAgcmV0dXJuIGJpbmQoJ29udG91Y2hzdGFydCcgaW4gd2luZG93ID8gJ2NsaWNrJyA6ICdtb3VzZWRvd24nLCBmKTtcbn1cblxuZXhwb3J0IGNvbnN0IGlzTW9iaWxlID0gKCk6IGJvb2xlYW4gPT4gaXNBbmRyb2lkKCkgfHwgaXNJT1MoKTtcblxuZXhwb3J0IGNvbnN0IGlzQW5kcm9pZCA9ICgpOiBib29sZWFuID0+IC9BbmRyb2lkLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG5leHBvcnQgY29uc3QgaXNJT1MgPSAoKTogYm9vbGVhbiA9PiAvaVBob25lfGlQb2QvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgfHwgaXNJUGFkKCk7XG5cbi8vIHNvbWUgbmV3ZXIgaVBhZHMgcHJldGVuZCB0byBiZSBNYWNzLCBoZW5jZSBjaGVja2luZyBmb3IgXCJNYWNpbnRvc2hcIlxuZXhwb3J0IGNvbnN0IGlzSVBhZCA9ICgpOiBib29sZWFuID0+IG5hdmlnYXRvcj8ubWF4VG91Y2hQb2ludHMgPiAyICYmIC9pUGFkfE1hY2ludG9zaC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuY29uc3QgaGFzTW91c2UgPSBtZW1vaXplPGJvb2xlYW4+KCgpID0+IHdpbmRvdy5tYXRjaE1lZGlhKCcoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpJykubWF0Y2hlcyk7XG5cbmV4cG9ydCBjb25zdCBpc1RvdWNoRGV2aWNlID0gKCkgPT4gIWhhc01vdXNlKCk7XG4iXX0=