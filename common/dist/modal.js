import { h } from 'snabbdom';
import { bind, onInsert } from './snabbdom';
export default function modal(opts) {
    modal.close();
    const $wrap = $('<div id="modal-wrap"><span class="close" role="button" aria-label="Close" data-icon="" tabindex="0"></span></div>');
    const $overlay = $(`<div id="modal-overlay" class="${opts.class}">`);
    if (!opts.noClickAway)
        $overlay.on('click', modal.close);
    $('<a href="#"></a>').appendTo($overlay); // guard against focus escaping to window chrome
    $wrap.appendTo($overlay);
    $('<a href="#"></a>').appendTo($overlay); // guard against focus escaping to window chrome
    opts.content.clone().removeClass('none').appendTo($wrap);
    opts.onInsert && opts.onInsert($wrap);
    modal.onClose = opts.onClose;
    $wrap.find('.close,.cancel').each(function () {
        bindClose(this, modal.close);
    });
    $('body').addClass('overlayed').prepend($overlay);
    bindWrap($wrap);
    return $wrap;
}
modal.close = () => {
    $('body').removeClass('overlayed');
    $('#modal-overlay').each(function () {
        if (modal.onClose)
            modal.onClose();
        $(this).remove();
    });
    delete modal.onClose;
};
modal.onClose = undefined;
export function snabModal(opts) {
    const close = opts.onClose;
    return h('div#modal-overlay', opts.noClickAway ? {} : { hook: bind('click', close) }, [
        h('div#modal-wrap.' + opts.class, {
            hook: onInsert(el => {
                bindWrap($(el));
                opts.onInsert && opts.onInsert($(el));
            }),
        }, [
            h('span.close', {
                attrs: {
                    'data-icon': '',
                    role: 'button',
                    'aria-label': 'Close',
                    tabindex: '0',
                },
                hook: onInsert(el => bindClose(el, close)),
            }),
            h('div', opts.content),
        ]),
    ]);
}
const bindClose = (el, close) => {
    el.addEventListener('click', close);
    el.addEventListener('keydown', e => (e.code === 'Enter' || e.code === 'Space' ? close() : true));
};
const bindWrap = ($wrap) => {
    $wrap.on('click', (e) => e.stopPropagation());
    focusFirstChild($wrap);
};
const focusableSelectors = 'button:not(:disabled), [href], input:not(:disabled):not([type="hidden"]), select:not(:disabled), textarea:not(:disabled), [tabindex="0"]';
export function trapFocus(event) {
    var _a;
    const wrap = $('#modal-wrap')[0];
    if (!wrap)
        return;
    const position = wrap.compareDocumentPosition(event.target);
    if (position & Node.DOCUMENT_POSITION_CONTAINED_BY)
        return;
    const focusableChildren = $(wrap).find(focusableSelectors);
    const index = position & Node.DOCUMENT_POSITION_FOLLOWING ? 0 : focusableChildren.length - 1;
    (_a = focusableChildren.get(index)) === null || _a === void 0 ? void 0 : _a.focus();
    event.preventDefault();
}
export const focusFirstChild = (parent) => {
    const children = parent.find(focusableSelectors);
    // prefer child 1 over child 0 because child 0 should be a close button
    // use setTimeout to avoid race conditions with snabbdom
    setTimeout(() => { var _a, _b; return (_b = ((_a = children[1]) !== null && _a !== void 0 ? _a : children[0])) === null || _b === void 0 ? void 0 : _b.focus(); });
};
//# sourceMappingURL=data:application/json;base64,