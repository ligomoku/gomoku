const registration = {
    version: 1,
    name: 'lichess',
    stores: ['analyse-state'],
};
export async function objectStorage(storeName) {
    const name = storeName;
    const db = await dbAsync;
    const get = (key) => {
        const store = db.transaction(name, 'readonly').objectStore(name);
        return actionPromise(store.get.bind(store, key));
    };
    const put = (key, value) => {
        const store = db.transaction(name, 'readwrite').objectStore(name);
        return actionPromise(store.put.bind(store, value, key));
    };
    const remove = (key) => {
        const store = db.transaction(name, 'readwrite').objectStore(name);
        return actionPromise(store.delete.bind(store, key));
    };
    const clear = () => {
        const store = db.transaction(name, 'readwrite').objectStore(name);
        return actionPromise(store.clear.bind(store));
    };
    const list = () => new Promise((resolveOp, _) => {
        resolveOp([]); // TODO
    });
    const actionPromise = (f) => new Promise((resolve, reject) => {
        const res = f();
        res.onsuccess = (e) => resolve(e.target.result);
        res.onerror = (e) => reject(e.target.result);
    });
    return {
        get,
        put,
        remove,
        clear,
        list,
    };
}
const dbAsync = new Promise((resolve, reject) => {
    const result = window.indexedDB.open(registration.name, registration.version);
    result.onsuccess = (e) => resolve(e.target.result);
    result.onerror = (e) => reject(e.target.result);
    /*
    This obviously does not handle upgrades to specific object store versions.
    We can add a mechanism where calling code can register an upgrade hook to get
    db and store object as parameters on upgrade event, otherwise the below will
    get messy quick. again, idb object stores can only be non-trivially upgraded
    within a version upgrade event context.
  */
    result.onupgradeneeded = function (ev) {
        const db = ev.target.result;
        const previousStores = Array.from(db.objectStoreNames);
        // const deletes = previousStores.filter(x => !registration.stores.includes(x));
        // const creates = registration.stores.filter(x => !previousStores.includes(x));
        // just blow everything away for now
        previousStores.forEach(x => db.deleteObjectStore(x));
        registration.stores.forEach(x => db.createObjectStore(x));
    };
});
//# sourceMappingURL=data:application/json;base64,