// from https://github.com/bryanwoods/autolink-js/blob/master/autolink.js
export const linkRegex = /(^|[\s\n]|<[A-Za-z]*\/?>)((?:(?:https?|ftp):\/\/|lichess\.org)[\-A-Z0-9+\u0026\u2019@#\/%?=()~_|!:,.;]*[\-A-Z0-9+\u0026@#\/%=~()_|])/gi;
export const newLineRegex = /\n/g;
export const userPattern = /(^|[^\w@#/])@([a-z0-9][a-z0-9_-]{0,28}[a-z0-9])/gi;
// looks like it has a @mention or #gameid or a url.tld
export const isMoreThanText = (str) => /(\n|(@|#|\.)\w{2,})/.test(str);
export function toLink(url) {
    if (!url.match(/^[A-Za-z]+:\/\//))
        url = 'https://' + url;
    return `<a target="_blank" rel="nofollow noopener noreferrer" href="${url}">${url.replace(/https?:\/\//, '')}</a>`;
}
export const autolink = (str, callback) => str.replace(linkRegex, (_, space, url) => space + callback(url));
export const innerHTML = (a, toHtml) => ({
    insert(vnode) {
        vnode.elm.innerHTML = toHtml(a);
        vnode.data.cachedA = a;
    },
    postpatch(old, vnode) {
        if (old.data.cachedA !== a) {
            vnode.elm.innerHTML = toHtml(a);
        }
        vnode.data.cachedA = a;
    },
});
export function linkReplace(href, body, cls) {
    if (href.includes('&quot;'))
        return href;
    return `<a target="_blank" rel="noopener nofollow noreferrer" href="${href.startsWith('/') || href.includes('://') ? href : '//' + href}"${cls ? ` class="${cls}"` : ''}>${body ? body : href}</a>`;
}
export const userLinkReplace = (_, prefix, user) => prefix + linkReplace('/@/' + user, '@' + user);
export const expandMentions = (html) => html.replace(userPattern, userLinkReplace);
export function enrichText(text, allowNewlines = true) {
    let html = autolink(lichess.escapeHtml(text), toLink);
    if (allowNewlines)
        html = html.replace(newLineRegex, '<br>');
    return html;
}
export function richHTML(text, newLines = true) {
    return innerHTML(text, t => enrichText(t, newLines));
}
const linkPattern = /\b\b(?:https?:\/\/)?(lichess\.org\/[-–—\w+&'@#\/%?=()~|!:,.;]+[\w+&@#\/%=~|])/gi;
const pawnDropPattern = /^[a-h][2-7]$/;
const movePattern = /\b(\d+)\s*(\.+)\s*(?:[o0-]+[o0]|[NBRQKP\u2654\u2655\u2656\u2657\u2658\u2659]?[a-h]?[1-8]?[x@]?[a-z][1-8](?:=[NBRQK\u2654\u2655\u2656\u2657\u2658\u2659])?)\+?#?[!\?=]{0,5}/gi;
function moveReplacer(match, turn, dots) {
    if (turn < 1 || turn > 200)
        return match;
    const ply = turn * 2 - (dots.length > 1 ? 0 : 1);
    return '<a class="jump" data-ply="' + ply + '">' + match + '</a>';
}
const addPlies = (html) => html.replace(movePattern, moveReplacer);
const userLinkReplacePawn = (orig, prefix, user) => user.match(pawnDropPattern) ? orig : userLinkReplace(orig, prefix, user);
export function enhance(text, parseMoves) {
    const escaped = lichess.escapeHtml(text);
    const linked = escaped.replace(userPattern, userLinkReplacePawn).replace(linkPattern, linkReplace);
    const plied = parseMoves && linked === escaped ? addPlies(linked) : linked;
    return plied;
}
function toYouTubeEmbedUrl(url) {
    if (!url)
        return;
    const m = url.match(/(?:https?:\/\/)?(?:www\.)?(?:youtube\.com|youtu\.be)\/(?:watch)?(?:\?v=)?([^"&?\/ ]{11})(?:\?|&|)(\S*)/i);
    if (!m)
        return;
    let start = 0;
    m[2].split('&').forEach(function (p) {
        const s = p.split('=');
        if (s[0] === 't' || s[0] === 'start') {
            if (s[1].match(/^\d+$/))
                start = parseInt(s[1]);
            else {
                const n = s[1].match(/(?:(\d+)h)?(?:(\d+)m)?(?:(\d+)s)?/);
                start = (parseInt(n[1]) || 0) * 3600 + (parseInt(n[2]) || 0) * 60 + (parseInt(n[3]) || 0);
            }
        }
    });
    const params = 'modestbranding=1&rel=0&controls=2&iv_load_policy=3' + (start ? '&start=' + start : '');
    return 'https://www.youtube.com/embed/' + m[1] + '?' + params;
}
export function toYouTubeEmbed(url) {
    const embedUrl = toYouTubeEmbedUrl(url);
    return embedUrl
        ? `<div class="embed"><iframe width="100%" src="${embedUrl}" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></div>`
        : undefined;
}
function toTwitchEmbedUrl(url) {
    if (!url)
        return;
    const m = url.match(/(?:https?:\/\/)?(?:www\.)?(?:twitch.tv)\/([^"&?/ ]+)/i);
    return m ? `https://player.twitch.tv/?channel=${m[1]}&parent=${location.hostname}&autoplay=false` : undefined;
}
export function toTwitchEmbed(url) {
    const embedUrl = toTwitchEmbedUrl(url);
    return embedUrl
        ? `<div class="embed"><iframe width="100%" src="${embedUrl}" frameborder=0 allowfullscreen></iframe></div>`
        : undefined;
}
//# sourceMappingURL=data:application/json;base64,