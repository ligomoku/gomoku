import * as xhr from './xhr';
import debounce from './debounce';
import * as Prefs from './prefs';
export default function resizeHandle(els, pref, ply, visible) {
    if (pref === Prefs.ShowResizeHandle.Never)
        return;
    const el = document.createElement('cg-resize');
    els.container.appendChild(el);
    const startResize = (start) => {
        start.preventDefault();
        const mousemoveEvent = start.type === 'touchstart' ? 'touchmove' : 'mousemove', mouseupEvent = start.type === 'touchstart' ? 'touchend' : 'mouseup', startPos = eventPosition(start), initialZoom = parseInt(window.getComputedStyle(document.body).getPropertyValue('--zoom'));
        let zoom = initialZoom;
        const saveZoom = debounce(() => xhr.text(`/pref/zoom?v=${zoom}`, { method: 'post' }), 700);
        const resize = (move) => {
            const pos = eventPosition(move), delta = pos[0] - startPos[0] + pos[1] - startPos[1];
            zoom = Math.round(Math.min(100, Math.max(0, initialZoom + delta / 10)));
            document.body.style.setProperty('--zoom', zoom.toString());
            window.dispatchEvent(new Event('resize'));
            saveZoom();
        };
        document.body.classList.add('resizing');
        document.addEventListener(mousemoveEvent, resize);
        document.addEventListener(mouseupEvent, () => {
            document.removeEventListener(mousemoveEvent, resize);
            document.body.classList.remove('resizing');
        }, { once: true });
    };
    el.addEventListener('touchstart', startResize, { passive: false });
    el.addEventListener('mousedown', startResize, { passive: false });
    if (pref === Prefs.ShowResizeHandle.OnlyAtStart) {
        const toggle = (ply) => el.classList.toggle('none', visible ? !visible(ply) : ply >= 2);
        toggle(ply);
        lichess.pubsub.on('ply', toggle);
    }
}
function eventPosition(e) {
    var _a;
    if (e.clientX || e.clientX === 0)
        return [e.clientX, e.clientY];
    if ((_a = e.targetTouches) === null || _a === void 0 ? void 0 : _a[0])
        return [e.targetTouches[0].clientX, e.targetTouches[0].clientY];
    return;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3Jlc2l6ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEtBQUssR0FBRyxNQUFNLE9BQU8sQ0FBQztBQUM3QixPQUFPLFFBQVEsTUFBTSxZQUFZLENBQUM7QUFDbEMsT0FBTyxLQUFLLEtBQUssTUFBTSxTQUFTLENBQUM7QUFNakMsTUFBTSxDQUFDLE9BQU8sVUFBVSxZQUFZLENBQUMsR0FBZ0IsRUFBRSxJQUE0QixFQUFFLEdBQVcsRUFBRSxPQUFpQjtJQUNqSCxJQUFJLElBQUksS0FBSyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsS0FBSztRQUFFLE9BQU87SUFFbEQsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMvQyxHQUFHLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUU5QixNQUFNLFdBQVcsR0FBRyxDQUFDLEtBQWlCLEVBQUUsRUFBRTtRQUN4QyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFFdkIsTUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLElBQUksS0FBSyxZQUFZLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUM1RSxZQUFZLEdBQUcsS0FBSyxDQUFDLElBQUksS0FBSyxZQUFZLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUNuRSxRQUFRLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBRSxFQUNoQyxXQUFXLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUM1RixJQUFJLElBQUksR0FBRyxXQUFXLENBQUM7UUFFdkIsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFD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KiBhcyBjZyBmcm9tICdjaGVzc2dyb3VuZC90eXBlcyc7XG5pbXBvcnQgKiBhcyB4aHIgZnJvbSAnLi94aHInO1xuaW1wb3J0IGRlYm91bmNlIGZyb20gJy4vZGVib3VuY2UnO1xuaW1wb3J0ICogYXMgUHJlZnMgZnJvbSAnLi9wcmVmcyc7XG5cbnR5cGUgTW91Y2hFdmVudCA9IEV2ZW50ICYgUGFydGlhbDxNb3VzZUV2ZW50ICYgVG91Y2hFdmVudD47XG5cbnR5cGUgVmlzaWJsZSA9IChwbHk6IFBseSkgPT4gYm9vbGVhbjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVzaXplSGFuZGxlKGVsczogY2cuRWxlbWVudHMsIHByZWY6IFByZWZzLlNob3dSZXNpemVIYW5kbGUsIHBseTogbnVtYmVyLCB2aXNpYmxlPzogVmlzaWJsZSkge1xuICBpZiAocHJlZiA9PT0gUHJlZnMuU2hvd1Jlc2l6ZUhhbmRsZS5OZXZlcikgcmV0dXJuO1xuXG4gIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2ctcmVzaXplJyk7XG4gIGVscy5jb250YWluZXIuYXBwZW5kQ2hpbGQoZWwpO1xuXG4gIGNvbnN0IHN0YXJ0UmVzaXplID0gKHN0YXJ0OiBNb3VjaEV2ZW50KSA9PiB7XG4gICAgc3RhcnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGNvbnN0IG1vdXNlbW92ZUV2ZW50ID0gc3RhcnQudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gJ3RvdWNobW92ZScgOiAnbW91c2Vtb3ZlJyxcbiAgICAgIG1vdXNldXBFdmVudCA9IHN0YXJ0LnR5cGUgPT09ICd0b3VjaHN0YXJ0JyA/ICd0b3VjaGVuZCcgOiAnbW91c2V1cCcsXG4gICAgICBzdGFydFBvcyA9IGV2ZW50UG9zaXRpb24oc3RhcnQpISxcbiAgICAgIGluaXRpYWxab29tID0gcGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuYm9keSkuZ2V0UHJvcGVydHlWYWx1ZSgnLS16b29tJykpO1xuICAgIGxldCB6b29tID0gaW5pdGlhbFpvb207XG5cbiAgICBjb25zdCBzYXZlWm9vbSA9IGRlYm91bmNlKCgpID0+IHhoci50ZXh0KGAvcHJlZi96b29tP3Y9JHt6b29tfWAsIHsgbWV0aG9kOiAncG9zdCcgfSksIDcwMCk7XG5cbiAgICBjb25zdCByZXNpemUgPSAobW92ZTogTW91Y2hFdmVudCkgPT4ge1xuICAgICAgY29uc3QgcG9zID0gZXZlbnRQb3NpdGlvbihtb3ZlKSEsXG4gICAgICAgIGRlbHRhID0gcG9zWzBdIC0gc3RhcnRQb3NbMF0gKyBwb3NbMV0gLSBzdGFydFBvc1sxXTtcblxuICAgICAgem9vbSA9IE1hdGgucm91bmQoTWF0aC5taW4oMTAwLCBNYXRoLm1heCgwLCBpbml0aWFsWm9vbSArIGRlbHRhIC8gMTApKSk7XG5cbiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuc2V0UHJvcGVydHkoJy0tem9vbScsIHpvb20udG9TdHJpbmcoKSk7XG4gICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ3Jlc2l6ZScpKTtcblxuICAgICAgc2F2ZVpvb20oKTtcbiAgICB9O1xuXG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdyZXNpemluZycpO1xuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihtb3VzZW1vdmVFdmVudCwgcmVzaXplKTtcblxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICBtb3VzZXVwRXZlbnQsXG4gICAgICAoKSA9PiB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIobW91c2Vtb3ZlRXZlbnQsIHJlc2l6ZSk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgncmVzaXppbmcnKTtcbiAgICAgIH0sXG4gICAgICB7IG9uY2U6IHRydWUgfVxuICAgICk7XG4gIH07XG5cbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHN0YXJ0UmVzaXplLCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xuICBlbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBzdGFydFJlc2l6ZSwgeyBwYXNzaXZlOiBmYWxzZSB9KTtcblxuICBpZiAocHJlZiA9PT0gUHJlZnMuU2hvd1Jlc2l6ZUhhbmRsZS5Pbmx5QXRTdGFydCkge1xuICAgIGNvbnN0IHRvZ2dsZSA9IChwbHk6IG51bWJlcikgPT4gZWwuY2xhc3NMaXN0LnRvZ2dsZSgnbm9uZScsIHZpc2libGUgPyAhdmlzaWJsZShwbHkpIDogcGx5ID49IDIpO1xuICAgIHRvZ2dsZShwbHkpO1xuICAgIGxpY2hlc3MucHVic3ViLm9uKCdwbHknLCB0b2dnbGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV2ZW50UG9zaXRpb24oZTogTW91Y2hFdmVudCk6IFtudW1iZXIsIG51bWJlcl0gfCB1bmRlZmluZWQge1xuICBpZiAoZS5jbGllbnRYIHx8IGUuY2xpZW50WCA9PT0gMCkgcmV0dXJuIFtlLmNsaWVudFgsIGUuY2xpZW50WSFdO1xuICBpZiAoZS50YXJnZXRUb3VjaGVzPy5bMF0pIHJldHVybiBbZS50YXJnZXRUb3VjaGVzWzBdLmNsaWVudFgsIGUudGFyZ2V0VG91Y2hlc1swXS5jbGllbnRZXTtcbiAgcmV0dXJuO1xufVxuIl19