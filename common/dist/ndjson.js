/*
 * `response` is the result of a `fetch` request.
 * `processLine` will be called with each element of the stream.
 * https://gist.github.com/ornicar/a097406810939cf7be1df8ea30e94f3e
 */
export const readNdJson = async (response, processLine) => {
    if (!response.ok)
        throw new Error(`Status ${response.status}`);
    const stream = response.body.getReader();
    const matcher = /\r?\n/;
    const decoder = new TextDecoder();
    let buf = '';
    let done, value;
    do {
        ({ done, value } = await stream.read());
        buf += decoder.decode(value || new Uint8Array(), { stream: !done });
        const parts = buf.split(matcher);
        if (!done)
            buf = parts.pop();
        for (const part of parts)
            if (part)
                processLine(JSON.parse(part));
    } while (!done);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmRqc29uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL25kanNvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQTs7OztHQUlHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLEtBQUssRUFBSyxRQUFrQixFQUFFLFdBQTJCLEVBQWlCLEVBQUU7SUFDcEcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxVQUFVLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxJQUFLLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDMUMsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3hCLE1BQU0sT0FBTyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7SUFDbEMsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0lBQ2IsSUFBSSxJQUFJLEVBQUUsS0FBSyxDQUFDO0lBQ2hCLEdBQUc7UUFDRCxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLE1BQU0sTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDeEMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLElBQUksVUFBVSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLElBQUk7WUFBRSxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRyxDQUFDO1FBQzlCLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSztZQUFFLElBQUksSUFBSTtnQkFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0tBQ25FLFFBQVEsQ0FBQyxJQUFJLEVBQUU7QUFDbEIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHR5cGUgUHJvY2Vzc0xpbmU8VD4gPSAobGluZTogVCkgPT4gdm9pZDtcblxuLypcbiAqIGByZXNwb25zZWAgaXMgdGhlIHJlc3VsdCBvZiBhIGBmZXRjaGAgcmVxdWVzdC5cbiAqIGBwcm9jZXNzTGluZWAgd2lsbCBiZSBjYWxsZWQgd2l0aCBlYWNoIGVsZW1lbnQgb2YgdGhlIHN0cmVhbS5cbiAqIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL29ybmljYXIvYTA5NzQwNjgxMDkzOWNmN2JlMWRmOGVhMzBlOTRmM2VcbiAqL1xuZXhwb3J0IGNvbnN0IHJlYWROZEpzb24gPSBhc3luYyA8VD4ocmVzcG9uc2U6IFJlc3BvbnNlLCBwcm9jZXNzTGluZTogUHJvY2Vzc0xpbmU8VD4pOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKGBTdGF0dXMgJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gIGNvbnN0IHN0cmVhbSA9IHJlc3BvbnNlLmJvZHkhLmdldFJlYWRlcigpO1xuICBjb25zdCBtYXRjaGVyID0gL1xccj9cXG4vO1xuICBjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCk7XG4gIGxldCBidWYgPSAnJztcbiAgbGV0IGRvbmUsIHZhbHVlO1xuICBkbyB7XG4gICAgKHsgZG9uZSwgdmFsdWUgfSA9IGF3YWl0IHN0cmVhbS5yZWFkKCkpO1xuICAgIGJ1ZiArPSBkZWNvZGVyLmRlY29kZSh2YWx1ZSB8fCBuZXcgVWludDhBcnJheSgpLCB7IHN0cmVhbTogIWRvbmUgfSk7XG4gICAgY29uc3QgcGFydHMgPSBidWYuc3BsaXQobWF0Y2hlcik7XG4gICAgaWYgKCFkb25lKSBidWYgPSBwYXJ0cy5wb3AoKSE7XG4gICAgZm9yIChjb25zdCBwYXJ0IG9mIHBhcnRzKSBpZiAocGFydCkgcHJvY2Vzc0xpbmUoSlNPTi5wYXJzZShwYXJ0KSk7XG4gIH0gd2hpbGUgKCFkb25lKTtcbn07XG4iXX0=