import { defined } from './common';
export const jsonHeader = {
    Accept: 'application/vnd.lichess.v5+json',
};
export const defaultInit = {
    cache: 'no-cache',
    credentials: 'same-origin', // required for safari < 12
};
export const xhrHeader = {
    'X-Requested-With': 'XMLHttpRequest', // so lila knows it's XHR
};
export const ensureOk = (res) => {
    if (res.ok)
        return res;
    if (res.status == 429)
        throw new Error('Too many requests');
    if (res.status == 413)
        throw new Error('The uploaded file is too large');
    throw new Error(`Error ${res.status}`);
};
/* fetch a JSON value */
export const json = (url, init = {}) => jsonAnyResponse(url, init).then(res => ensureOk(res).json());
export const jsonAnyResponse = (url, init = {}) => fetch(url, {
    ...defaultInit,
    headers: {
        ...jsonHeader,
        ...xhrHeader,
    },
    ...init,
});
/* fetch a string */
export const text = (url, init = {}) => textRaw(url, init).then(res => ensureOk(res).text());
export const textRaw = (url, init = {}) => fetch(url, {
    ...defaultInit,
    headers: { ...xhrHeader },
    ...init,
});
/* load a remote script */
export const script = (src) => new Promise((resolve, reject) => {
    const nonce = document.body.getAttribute('data-nonce'), el = document.createElement('script');
    if (nonce)
        el.setAttribute('nonce', nonce);
    el.onload = resolve;
    el.onerror = reject;
    el.src = src;
    document.head.append(el);
});
/* produce HTTP form data from a JS object */
export const form = (data) => {
    const formData = new FormData();
    for (const k of Object.keys(data))
        if (defined(data[k]))
            formData.append(k, data[k]);
    return formData;
};
/* constructs a url with escaped parameters */
export const url = (path, params) => {
    const searchParams = new URLSearchParams();
    for (const k of Object.keys(params))
        if (defined(params[k]))
            searchParams.append(k, params[k]);
    const query = searchParams.toString();
    return query ? `${path}?${query}` : path;
};
/* submit a form with XHR */
export const formToXhr = (el, submitter) => {
    const action = el.getAttribute('action');
    const body = new FormData(el);
    if ((submitter === null || submitter === void 0 ? void 0 : submitter.name) && (submitter === null || submitter === void 0 ? void 0 : submitter.value)) {
        body.set(submitter.name, submitter.value);
    }
    return action
        ? text(action, {
            method: el.method,
            body,
        })
        : Promise.reject(`Form has no action: ${el}`);
};
//# sourceMappingURL=data:application/json;base64,