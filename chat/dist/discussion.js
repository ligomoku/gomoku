import * as enhance from 'common/richText';
import userLink from 'common/userLink';
import * as spam from './spam';
import { h, thunk } from 'snabbdom';
import { lineAction as modLineAction, report } from './moderation';
import { presetView } from './preset';
const whisperRegex = /^\/[wW](?:hisper)?\s/;
export default function (ctrl) {
    if (!ctrl.vm.enabled)
        return [];
    const scrollCb = (vnode) => {
        const el = vnode.elm;
        if (ctrl.data.lines.length > 5) {
            const autoScroll = el.scrollTop === 0 || el.scrollTop > el.scrollHeight - el.clientHeight - 100;
            if (autoScroll) {
                el.scrollTop = 999999;
                setTimeout((_) => (el.scrollTop = 999999), 300);
            }
        }
    }, hasMod = !!ctrl.moderation();
    const vnodes = [
        h(`ol.mchat__messages.chat-v-${ctrl.data.domVersion}${hasMod ? '.as-mod' : ''}`, {
            attrs: {
                role: 'log',
                'aria-live': 'polite',
                'aria-atomic': 'false',
            },
            hook: {
                insert(vnode) {
                    const $el = $(vnode.elm).on('click', 'a.jump', (e) => {
                        lichess.pubsub.emit('jump', e.target.getAttribute('data-ply'));
                    });
                    if (hasMod)
                        $el.on('click', '.mod', (e) => { var _a; return (_a = ctrl.moderation()) === null || _a === void 0 ? void 0 : _a.open(e.target.parentNode); });
                    else
                        $el.on('click', '.flag', (e) => report(ctrl, e.target.parentNode));
                    scrollCb(vnode);
                },
                postpatch: (_, vnode) => scrollCb(vnode),
            },
        }, selectLines(ctrl).map(line => renderLine(ctrl, line))),
        renderInput(ctrl),
    ];
    const presets = presetView(ctrl.preset);
    if (presets)
        vnodes.push(presets);
    return vnodes;
}
function renderInput(ctrl) {
    if (!ctrl.vm.writeable)
        return;
    if ((ctrl.data.loginRequired && !ctrl.data.userId) || ctrl.data.restricted)
        return h('input.mchat__say', {
            attrs: {
                placeholder: ctrl.trans('loginToChat'),
                disabled: true,
            },
        });
    let placeholder;
    if (ctrl.vm.timeout)
        placeholder = ctrl.trans('youHaveBeenTimedOut');
    else if (ctrl.opts.blind)
        placeholder = 'Chat';
    else
        placeholder = ctrl.trans.noarg(ctrl.vm.placeholderKey);
    return h('input.mchat__say', {
        attrs: {
            placeholder,
            autocomplete: 'off',
            enterkeyhint: 'send',
            maxlength: 140,
            disabled: ctrl.vm.timeout || !ctrl.vm.writeable,
            'aria-label': 'Chat input',
        },
        hook: {
            insert(vnode) {
                setupHooks(ctrl, vnode.elm);
            },
        },
    });
}
let mouchListener;
const setupHooks = (ctrl, chatEl) => {
    const storage = lichess.tempStorage.make('chat.input');
    const previousText = storage.get();
    if (previousText) {
        chatEl.value = previousText;
        chatEl.focus();
        if (!ctrl.opts.public && previousText.match(whisperRegex))
            chatEl.classList.add('whisper');
    }
    else if (ctrl.vm.autofocus)
        chatEl.focus();
    chatEl.addEventListener('keydown', (e) => {
        if (e.key !== 'Enter')
            return;
        setTimeout(() => {
            const el = e.target, txt = el.value, pub = ctrl.opts.public;
            if (txt === '')
                $('.keyboard-move input').each(function () {
                    this.focus();
                });
            else {
                if (!ctrl.opts.kobold)
                    spam.selfReport(txt);
                if (pub && spam.hasTeamUrl(txt))
                    alert("Please don't advertise teams in the chat.");
                else
                    ctrl.post(txt);
                el.value = '';
                storage.remove();
                if (!pub)
                    el.classList.remove('whisper');
            }
        });
    });
    chatEl.addEventListener('input', (e) => setTimeout(() => {
        const el = e.target, txt = el.value;
        el.removeAttribute('placeholder');
        if (!ctrl.opts.public)
            el.classList.toggle('whisper', !!txt.match(whisperRegex));
        storage.set(txt);
    }));
    window.Mousetrap.bind('c', () => chatEl.focus());
    // Ensure clicks remove chat focus.
    // See lichess-org/chessground#109
    const mouchEvents = ['touchstart', 'mousedown'];
    if (mouchListener)
        mouchEvents.forEach(event => document.body.removeEventListener(event, mouchListener, { capture: true }));
    mouchListener = (e) => {
        if (!e.shiftKey && e.buttons !== 2 && e.button !== 2)
            chatEl.blur();
    };
    chatEl.onfocus = () => mouchEvents.forEach(event => document.body.addEventListener(event, mouchListener, { passive: true, capture: true }));
    chatEl.onblur = () => mouchEvents.forEach(event => document.body.removeEventListener(event, mouchListener, { capture: true }));
};
const sameLines = (l1, l2) => l1.d && l2.d && l1.u === l2.u;
function selectLines(ctrl) {
    const ls = [];
    let prev;
    ctrl.data.lines.forEach(line => {
        if (!line.d &&
            (!prev || !sameLines(prev, line)) &&
            (!line.r || (line.u || '').toLowerCase() == ctrl.data.userId) &&
            !spam.skip(line.t))
            ls.push(line);
        prev = line;
    });
    return ls;
}
function updateText(parseMoves) {
    return (oldVnode, vnode) => {
        if (vnode.data.lichessChat !== oldVnode.data.lichessChat) {
            vnode.elm.innerHTML = enhance.enhance(vnode.data.lichessChat, parseMoves);
        }
    };
}
function renderText(t, parseMoves) {
    if (enhance.isMoreThanText(t)) {
        const hook = updateText(parseMoves);
        return h('t', {
            lichessChat: t,
            hook: {
                create: hook,
                update: hook,
            },
        });
    }
    return h('t', t);
}
function renderLine(ctrl, line) {
    var _a, _b;
    const textNode = renderText(line.t, ctrl.opts.parseMoves);
    if (line.u === 'lichess')
        return h('li.system', textNode);
    if (line.c)
        return h('li', [h('span.color', '[' + line.c + ']'), textNode]);
    const userNode = thunk('a', line.u, userLink, [line.u, line.title, line.p]);
    const userId = (_a = line.u) === null || _a === void 0 ? void 0 : _a.toLowerCase();
    const myUserId = ctrl.data.userId;
    const mentioned = !!myUserId &&
        !!((_b = line.t.match(enhance.userPattern)) === null || _b === void 0 ? void 0 : _b.find(mention => mention.trim().toLowerCase() == `@${ctrl.data.userId}`));
    return h('li', {
        class: {
            me: userId === myUserId,
            host: userId === ctrl.data.hostId,
            mentioned,
        },
    }, ctrl.moderation()
        ? [line.u ? modLineAction() : null, userNode, ' ', textNode]
        : [
            myUserId && line.u && myUserId != line.u
                ? h('i.flag', {
                    attrs: {
                        'data-icon': 'î€•',
                        title: 'Report',
                    },
                })
                : null,
            userNode,
            ' ',
            textNode,
        ]);
}
//# sourceMappingURL=data:application/json;base64,