// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from "@hey-api/client-fetch";
import { queryOptions, type UseMutationOptions } from "@tanstack/react-query";
import type {
  GetApiAuthInfoData,
  GetApiGameByGameIdData,
  GetApiGamesData,
  PostApiGameData,
  PostApiGameError,
  PostApiGameResponse,
  PostApiGameByGameIdJoinByPlayerIdData,
  PostApiGameByGameIdJoinByPlayerIdError,
  PostApiGameByGameIdJoinByPlayerIdResponse,
  PostApiGameByGameIdMakeMoveByPlayerIdData,
  PostApiGameByGameIdMakeMoveByPlayerIdError,
  PostApiGameByGameIdMakeMoveByPlayerIdResponse,
  GetHealthData,
  PostApiPlayersData,
  PostApiPlayersError,
  PostApiPlayersResponse,
} from "../types.gen";
import {
  client,
  getApiAuthInfo,
  getApiGameByGameId,
  getApiGames,
  postApiGame,
  postApiGameByGameIdJoinByPlayerId,
  postApiGameByGameIdMakeMoveByPlayerId,
  getHealth,
  postApiPlayers,
} from "../services.gen";

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const getApiAuthInfoQueryKey = (
  options?: Options<GetApiAuthInfoData>,
) => [createQueryKey("getApiAuthInfo", options)];

export const getApiAuthInfoOptions = (
  options?: Options<GetApiAuthInfoData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getApiAuthInfo({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAuthInfoQueryKey(options),
  });
};

export const getApiGameByGameIdQueryKey = (
  options: Options<GetApiGameByGameIdData>,
) => [createQueryKey("getApiGameByGameId", options)];

export const getApiGameByGameIdOptions = (
  options: Options<GetApiGameByGameIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getApiGameByGameId({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiGameByGameIdQueryKey(options),
  });
};

export const getApiGamesQueryKey = (options?: Options<GetApiGamesData>) => [
  createQueryKey("getApiGames", options),
];

export const getApiGamesOptions = (options?: Options<GetApiGamesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getApiGames({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiGamesQueryKey(options),
  });
};

export const postApiGameQueryKey = (options?: Options<PostApiGameData>) => [
  createQueryKey("postApiGame", options),
];

export const postApiGameOptions = (options?: Options<PostApiGameData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postApiGame({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiGameQueryKey(options),
  });
};

export const postApiGameMutation = () => {
  const mutationOptions: UseMutationOptions<
    PostApiGameResponse,
    PostApiGameError,
    Options<PostApiGameData>
  > = {
    mutationFn: async (options) => {
      const { data } = await postApiGame({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiGameByGameIdJoinByPlayerIdQueryKey = (
  options: Options<PostApiGameByGameIdJoinByPlayerIdData>,
) => [createQueryKey("postApiGameByGameIdJoinByPlayerId", options)];

export const postApiGameByGameIdJoinByPlayerIdOptions = (
  options: Options<PostApiGameByGameIdJoinByPlayerIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postApiGameByGameIdJoinByPlayerId({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiGameByGameIdJoinByPlayerIdQueryKey(options),
  });
};

export const postApiGameByGameIdJoinByPlayerIdMutation = () => {
  const mutationOptions: UseMutationOptions<
    PostApiGameByGameIdJoinByPlayerIdResponse,
    PostApiGameByGameIdJoinByPlayerIdError,
    Options<PostApiGameByGameIdJoinByPlayerIdData>
  > = {
    mutationFn: async (options) => {
      const { data } = await postApiGameByGameIdJoinByPlayerId({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiGameByGameIdMakeMoveByPlayerIdQueryKey = (
  options: Options<PostApiGameByGameIdMakeMoveByPlayerIdData>,
) => [createQueryKey("postApiGameByGameIdMakeMoveByPlayerId", options)];

export const postApiGameByGameIdMakeMoveByPlayerIdOptions = (
  options: Options<PostApiGameByGameIdMakeMoveByPlayerIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postApiGameByGameIdMakeMoveByPlayerId({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiGameByGameIdMakeMoveByPlayerIdQueryKey(options),
  });
};

export const postApiGameByGameIdMakeMoveByPlayerIdMutation = () => {
  const mutationOptions: UseMutationOptions<
    PostApiGameByGameIdMakeMoveByPlayerIdResponse,
    PostApiGameByGameIdMakeMoveByPlayerIdError,
    Options<PostApiGameByGameIdMakeMoveByPlayerIdData>
  > = {
    mutationFn: async (options) => {
      const { data } = await postApiGameByGameIdMakeMoveByPlayerId({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getHealthQueryKey = (options?: Options<GetHealthData>) => [
  createQueryKey("getHealth", options),
];

export const getHealthOptions = (options?: Options<GetHealthData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getHealth({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: getHealthQueryKey(options),
  });
};

export const postApiPlayersQueryKey = (
  options?: Options<PostApiPlayersData>,
) => [createQueryKey("postApiPlayers", options)];

export const postApiPlayersOptions = (
  options?: Options<PostApiPlayersData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postApiPlayers({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiPlayersQueryKey(options),
  });
};

export const postApiPlayersMutation = () => {
  const mutationOptions: UseMutationOptions<
    PostApiPlayersResponse,
    PostApiPlayersError,
    Options<PostApiPlayersData>
  > = {
    mutationFn: async (options) => {
      const { data } = await postApiPlayers({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
