// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from "@hey-api/client-fetch";
import {
  queryOptions,
  type UseMutationOptions,
  type DefaultError,
} from "@tanstack/react-query";
import type {
  GetApiAuthInfoData,
  GetApiGameByGameIdData,
  GetApiGamesData,
  PostApiGameData,
  PostApiGameError,
  PostApiGameResponse,
  PostApiGameByGameIdJoinData,
  PostApiGameByGameIdJoinError,
  PostApiGameByGameIdJoinResponse,
  PostApiGameByGameIdMakeMoveData,
  PostApiGameByGameIdMakeMoveError,
  PostApiGameByGameIdMakeMoveResponse,
  GetHealthData,
  PostGamehubJoinGameGroupData,
  PostGamehubMakeMoveData,
  PostGamehubSendMessageData,
  PostGamehubReceiveMessageData,
} from "../types.gen";
import {
  client,
  getApiAuthInfo,
  getApiGameByGameId,
  getApiGames,
  postApiGame,
  postApiGameByGameIdJoin,
  postApiGameByGameIdMakeMove,
  getHealth,
  postGamehubJoinGameGroup,
  postGamehubMakeMove,
  postGamehubSendMessage,
  postGamehubReceiveMessage,
} from "../services.gen";

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const getApiAuthInfoQueryKey = (
  options: Options<GetApiAuthInfoData>,
) => [createQueryKey("getApiAuthInfo", options)];

export const getApiAuthInfoOptions = (options: Options<GetApiAuthInfoData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getApiAuthInfo({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAuthInfoQueryKey(options),
  });
};

export const getApiGameByGameIdQueryKey = (
  options: Options<GetApiGameByGameIdData>,
) => [createQueryKey("getApiGameByGameId", options)];

export const getApiGameByGameIdOptions = (
  options: Options<GetApiGameByGameIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getApiGameByGameId({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiGameByGameIdQueryKey(options),
  });
};

export const getApiGamesQueryKey = (options: Options<GetApiGamesData>) => [
  createQueryKey("getApiGames", options),
];

export const getApiGamesOptions = (options: Options<GetApiGamesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getApiGames({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiGamesQueryKey(options),
  });
};

export const postApiGameQueryKey = (options: Options<PostApiGameData>) => [
  createQueryKey("postApiGame", options),
];

export const postApiGameOptions = (options: Options<PostApiGameData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postApiGame({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiGameQueryKey(options),
  });
};

export const postApiGameMutation = () => {
  const mutationOptions: UseMutationOptions<
    PostApiGameResponse,
    PostApiGameError,
    Options<PostApiGameData>
  > = {
    mutationFn: async (options) => {
      const { data } = await postApiGame({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiGameByGameIdJoinQueryKey = (
  options: Options<PostApiGameByGameIdJoinData>,
) => [createQueryKey("postApiGameByGameIdJoin", options)];

export const postApiGameByGameIdJoinOptions = (
  options: Options<PostApiGameByGameIdJoinData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postApiGameByGameIdJoin({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiGameByGameIdJoinQueryKey(options),
  });
};

export const postApiGameByGameIdJoinMutation = () => {
  const mutationOptions: UseMutationOptions<
    PostApiGameByGameIdJoinResponse,
    PostApiGameByGameIdJoinError,
    Options<PostApiGameByGameIdJoinData>
  > = {
    mutationFn: async (options) => {
      const { data } = await postApiGameByGameIdJoin({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiGameByGameIdMakeMoveQueryKey = (
  options: Options<PostApiGameByGameIdMakeMoveData>,
) => [createQueryKey("postApiGameByGameIdMakeMove", options)];

export const postApiGameByGameIdMakeMoveOptions = (
  options: Options<PostApiGameByGameIdMakeMoveData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postApiGameByGameIdMakeMove({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiGameByGameIdMakeMoveQueryKey(options),
  });
};

export const postApiGameByGameIdMakeMoveMutation = () => {
  const mutationOptions: UseMutationOptions<
    PostApiGameByGameIdMakeMoveResponse,
    PostApiGameByGameIdMakeMoveError,
    Options<PostApiGameByGameIdMakeMoveData>
  > = {
    mutationFn: async (options) => {
      const { data } = await postApiGameByGameIdMakeMove({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getHealthQueryKey = (options: Options<GetHealthData>) => [
  createQueryKey("getHealth", options),
];

export const getHealthOptions = (options: Options<GetHealthData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getHealth({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: getHealthQueryKey(options),
  });
};

export const postGamehubJoinGameGroupQueryKey = (
  options?: Options<PostGamehubJoinGameGroupData>,
) => [createQueryKey("postGamehubJoinGameGroup", options)];

export const postGamehubJoinGameGroupOptions = (
  options?: Options<PostGamehubJoinGameGroupData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postGamehubJoinGameGroup({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGamehubJoinGameGroupQueryKey(options),
  });
};

export const postGamehubJoinGameGroupMutation = () => {
  const mutationOptions: UseMutationOptions<
    void,
    DefaultError,
    Options<PostGamehubJoinGameGroupData>
  > = {
    mutationFn: async (options) => {
      const { data } = await postGamehubJoinGameGroup({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postGamehubMakeMoveQueryKey = (
  options?: Options<PostGamehubMakeMoveData>,
) => [createQueryKey("postGamehubMakeMove", options)];

export const postGamehubMakeMoveOptions = (
  options?: Options<PostGamehubMakeMoveData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postGamehubMakeMove({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGamehubMakeMoveQueryKey(options),
  });
};

export const postGamehubMakeMoveMutation = () => {
  const mutationOptions: UseMutationOptions<
    void,
    DefaultError,
    Options<PostGamehubMakeMoveData>
  > = {
    mutationFn: async (options) => {
      const { data } = await postGamehubMakeMove({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postGamehubSendMessageQueryKey = (
  options?: Options<PostGamehubSendMessageData>,
) => [createQueryKey("postGamehubSendMessage", options)];

export const postGamehubSendMessageOptions = (
  options?: Options<PostGamehubSendMessageData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postGamehubSendMessage({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGamehubSendMessageQueryKey(options),
  });
};

export const postGamehubSendMessageMutation = () => {
  const mutationOptions: UseMutationOptions<
    void,
    DefaultError,
    Options<PostGamehubSendMessageData>
  > = {
    mutationFn: async (options) => {
      const { data } = await postGamehubSendMessage({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postGamehubReceiveMessageQueryKey = (
  options?: Options<PostGamehubReceiveMessageData>,
) => [createQueryKey("postGamehubReceiveMessage", options)];

export const postGamehubReceiveMessageOptions = (
  options?: Options<PostGamehubReceiveMessageData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postGamehubReceiveMessage({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGamehubReceiveMessageQueryKey(options),
  });
};

export const postGamehubReceiveMessageMutation = () => {
  const mutationOptions: UseMutationOptions<
    void,
    DefaultError,
    Options<PostGamehubReceiveMessageData>
  > = {
    mutationFn: async (options) => {
      const { data } = await postGamehubReceiveMessage({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
