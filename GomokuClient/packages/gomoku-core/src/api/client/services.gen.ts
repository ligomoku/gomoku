// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from "@hey-api/client-fetch";
import {
  type GetApiGameByGameIdHistoryData,
  type GetApiGameByGameIdHistoryError,
  type GetApiGameByGameIdHistoryResponse,
  type GetApiGamesAvailableToJoinData,
  type GetApiGamesAvailableToJoinError,
  type GetApiGamesAvailableToJoinResponse,
  type GetApiGamesActiveData,
  type GetApiGamesActiveError,
  type GetApiGamesActiveResponse,
  type PostApiGameData,
  type PostApiGameError,
  type PostApiGameResponse,
  type PostApiGameByGameIdJoinData,
  type PostApiGameByGameIdJoinError,
  type PostApiGameByGameIdJoinResponse,
  type GetHealthData,
  type GetHealthError,
  type GetHealthResponse,
  type GetApiProfilesByUserNameGamesData,
  type GetApiProfilesByUserNameGamesError,
  type GetApiProfilesByUserNameGamesResponse,
  type PostGamehubJoinGameGroupData,
  type PostGamehubMakeMoveData,
  type PostGamehubSendMessageData,
  GetApiProfilesByUserNameGamesResponseTransformer,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Get game history by game id
 */
export const getApiGameByGameIdHistory = <ThrowOnError extends boolean = false>(
  options: Options<GetApiGameByGameIdHistoryData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetApiGameByGameIdHistoryResponse,
    GetApiGameByGameIdHistoryError,
    ThrowOnError
  >({
    ...options,
    url: "/api/game/{gameId}/history",
  });
};

/**
 * Get all games available to join
 */
export const getApiGamesAvailableToJoin = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetApiGamesAvailableToJoinData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetApiGamesAvailableToJoinResponse,
    GetApiGamesAvailableToJoinError,
    ThrowOnError
  >({
    ...options,
    url: "/api/games/available-to-join",
  });
};

/**
 * Get all active games
 */
export const getApiGamesActive = <ThrowOnError extends boolean = false>(
  options: Options<GetApiGamesActiveData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetApiGamesActiveResponse,
    GetApiGamesActiveError,
    ThrowOnError
  >({
    ...options,
    url: "/api/games/active",
  });
};

/**
 * Create new game (supports both anonymous and authenticated users)
 */
export const postApiGame = <ThrowOnError extends boolean = false>(
  options: Options<PostApiGameData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostApiGameResponse,
    PostApiGameError,
    ThrowOnError
  >({
    ...options,
    url: "/api/game",
  });
};

/**
 * Join game (supports both anonymous and authenticated users)
 */
export const postApiGameByGameIdJoin = <ThrowOnError extends boolean = false>(
  options: Options<PostApiGameByGameIdJoinData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostApiGameByGameIdJoinResponse,
    PostApiGameByGameIdJoinError,
    ThrowOnError
  >({
    ...options,
    url: "/api/game/{gameId}/join",
  });
};

/**
 * Health check endpoint
 */
export const getHealth = <ThrowOnError extends boolean = false>(
  options: Options<GetHealthData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetHealthResponse,
    GetHealthError,
    ThrowOnError
  >({
    ...options,
    url: "/health",
  });
};

/**
 * Get games for specific user
 */
export const getApiProfilesByUserNameGames = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetApiProfilesByUserNameGamesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetApiProfilesByUserNameGamesResponse,
    GetApiProfilesByUserNameGamesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/profiles/{userName}/games",
    responseTransformer: GetApiProfilesByUserNameGamesResponseTransformer,
  });
};

export const postGamehubJoinGameGroup = <ThrowOnError extends boolean = false>(
  options?: Options<PostGamehubJoinGameGroupData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<void, unknown, ThrowOnError>({
    ...options,
    url: "/gamehub/JoinGameGroup",
  });
};

export const postGamehubMakeMove = <ThrowOnError extends boolean = false>(
  options?: Options<PostGamehubMakeMoveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<void, unknown, ThrowOnError>({
    ...options,
    url: "/gamehub/MakeMove",
  });
};

export const postGamehubSendMessage = <ThrowOnError extends boolean = false>(
  options?: Options<PostGamehubSendMessageData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<void, unknown, ThrowOnError>({
    ...options,
    url: "/gamehub/SendMessage",
  });
};
