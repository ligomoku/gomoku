// This file is auto-generated by @hey-api/openapi-ts

export type AddAnonymousPlayerToGameRequest = {
  playerId: string | null;
};

export type AddPlayerToGameResponse = {
  gameId: string;
  playerId: string;
};

export type ApproveRematchMessage = {
  gameId: string | null;
};

export type ApproveUndoMessage = {
  gameId: string;
};

export type ChatMessageClientMessage = {
  gameId: string;
  user: string;
  message: string;
};

export type ClockDto = {
  black: number;
  white: number;
};

export type CreateGameRequest = {
  boardSize: number;
  timeControl?: TimeControlDto;
};

export type CreateGameResponse = {
  gameId: string;
  boardSize: number;
};

export type GetActiveGamesResponse = {
  gameId: string;
  players?: PlayersDto;
  timeControl?: TimeControlDto;
};

export type GetActiveGamesResponseIEnumerablePaginatedResponse = {
  data: Array<GetActiveGamesResponse>;
  metadata: PaginationMetadata;
};

export type GetAvailableGamesResponse = {
  gameId: string;
  opponent?: ProfileDto;
  timeControl?: TimeControlDto;
};

export type GetAvailableGamesResponseIEnumerablePaginatedResponse = {
  data: Array<GetAvailableGamesResponse>;
  metadata: PaginationMetadata;
};

export type GetClockMessage = {
  gameId: string;
};

export type GetGameHistoryResponse = {
  boardSize: number;
  gen: string;
  movesCount: number;
  players: PlayersDto;
  isGameStarted: boolean;
  hasBothPlayersJoined: boolean;
  isCompleted: boolean;
  winner?: string | null;
  winningSequence?: Array<TileDto> | null;
  movesHistory: {
    [key: string]: TileDto;
  };
  timeControl?: TimeControlDto;
  clock?: ClockDto;
};

export type GetGamesByUsernameResponse = {
  gameId: string;
  players: UsernamesDto;
  isCompleted: boolean;
  winner?: string | null;
  gen: string;
  date: Date;
  timeControl?: TimeControlDto;
  clock?: ClockDto;
};

export type GetGamesByUsernameResponseIEnumerablePaginatedResponse = {
  data: Array<GetGamesByUsernameResponse>;
  metadata: PaginationMetadata;
};

export type MakeMoveClientMessage = {
  gameId: string;
  x: number;
  y: number;
};

export type PaginationMetadata = {
  hasMoreItems: boolean;
  totalCount: number;
};

export type PlayerDto = {
  playerId: string;
  userName: string;
  color: string;
};

export type PlayersDto = {
  black?: PlayerDto;
  white?: PlayerDto;
};

export type ProblemDetails = {
  type?: string | null;
  title?: string | null;
  status?: number | null;
  detail?: string | null;
  instance?: string | null;
  [key: string]:
    | unknown
    | (string | null)
    | (string | null)
    | (number | null)
    | (string | null)
    | (string | null)
    | undefined;
};

export type ProfileDto = {
  playerId: string;
  userName: string;
};

export type RematchRequestMessage = {
  gameId: string;
};

export type RequestUndoMessage = {
  gameId: string;
};

export type ResignClientMessage = {
  gameId: string;
};

export type SendInvitationToPlayMessage = {
  playerId: string;
};

export type TileDto = {
  x: number;
  y: number;
};

export type TimeControlDto = {
  initialTimeInSeconds: number;
  incrementPerMove: number;
};

export type UsernamesDto = {
  black?: string | null;
  white?: string | null;
};

export type GetApiGameAnonymousByGameIdHistoryData = {
  body?: never;
  headers: {
    "X-Version"?: string;
    "Content-Type": string;
  };
  path: {
    gameId: string;
  };
  query?: never;
  url: "/api/game/anonymous/{gameId}/history";
};

export type GetApiGameAnonymousByGameIdHistoryErrors = {
  /**
   * Not Found
   */
  404: ProblemDetails;
};

export type GetApiGameAnonymousByGameIdHistoryError =
  GetApiGameAnonymousByGameIdHistoryErrors[keyof GetApiGameAnonymousByGameIdHistoryErrors];

export type GetApiGameAnonymousByGameIdHistoryResponses = {
  /**
   * OK
   */
  200: GetGameHistoryResponse;
};

export type GetApiGameAnonymousByGameIdHistoryResponse =
  GetApiGameAnonymousByGameIdHistoryResponses[keyof GetApiGameAnonymousByGameIdHistoryResponses];

export type GetApiGameAnonymousAvailableToJoinData = {
  body?: never;
  headers: {
    "X-Version"?: string;
    "Content-Type": string;
  };
  path?: never;
  query?: {
    limit?: number;
    offset?: number;
  };
  url: "/api/game/anonymous/available-to-join";
};

export type GetApiGameAnonymousAvailableToJoinResponses = {
  /**
   * OK
   */
  200: GetAvailableGamesResponseIEnumerablePaginatedResponse;
};

export type GetApiGameAnonymousAvailableToJoinResponse =
  GetApiGameAnonymousAvailableToJoinResponses[keyof GetApiGameAnonymousAvailableToJoinResponses];

export type GetApiGameAnonymousActiveData = {
  body?: never;
  headers: {
    "X-Version"?: string;
    "Content-Type": string;
  };
  path?: never;
  query?: {
    limit?: number;
    offset?: number;
  };
  url: "/api/game/anonymous/active";
};

export type GetApiGameAnonymousActiveResponses = {
  /**
   * OK
   */
  200: GetActiveGamesResponseIEnumerablePaginatedResponse;
};

export type GetApiGameAnonymousActiveResponse =
  GetApiGameAnonymousActiveResponses[keyof GetApiGameAnonymousActiveResponses];

export type PostApiGameAnonymousData = {
  body?: CreateGameRequest;
  headers: {
    "X-Version"?: string;
    "Content-Type": string;
  };
  path?: never;
  query?: never;
  url: "/api/game/anonymous";
};

export type PostApiGameAnonymousErrors = {
  /**
   * Bad Request
   */
  400: ProblemDetails;
};

export type PostApiGameAnonymousError =
  PostApiGameAnonymousErrors[keyof PostApiGameAnonymousErrors];

export type PostApiGameAnonymousResponses = {
  /**
   * OK
   */
  200: CreateGameResponse;
};

export type PostApiGameAnonymousResponse =
  PostApiGameAnonymousResponses[keyof PostApiGameAnonymousResponses];

export type PostApiGameAnonymousByGameIdJoinData = {
  body?: AddAnonymousPlayerToGameRequest;
  headers: {
    "X-Version"?: string;
    "Content-Type": string;
  };
  path: {
    gameId: string;
  };
  query?: never;
  url: "/api/game/anonymous/{gameId}/join";
};

export type PostApiGameAnonymousByGameIdJoinErrors = {
  /**
   * Game or player with specified id not found
   */
  404: ProblemDetails;
};

export type PostApiGameAnonymousByGameIdJoinError =
  PostApiGameAnonymousByGameIdJoinErrors[keyof PostApiGameAnonymousByGameIdJoinErrors];

export type PostApiGameAnonymousByGameIdJoinResponses = {
  /**
   * Player with specified id successfully joined the game
   */
  200: AddPlayerToGameResponse;
};

export type PostApiGameAnonymousByGameIdJoinResponse =
  PostApiGameAnonymousByGameIdJoinResponses[keyof PostApiGameAnonymousByGameIdJoinResponses];

export type GetHealthData = {
  body?: never;
  headers: {
    "X-Version"?: string;
    "Content-Type": string;
  };
  path?: never;
  query?: never;
  url: "/health";
};

export type GetHealthResponses = {
  /**
   * Server is running
   */
  200: unknown;
};

export type GetApiProfilesByUserNameGamesData = {
  body?: never;
  headers: {
    "X-Version"?: string;
    "Content-Type": string;
  };
  path: {
    userName: string;
  };
  query?: {
    limit?: number;
    offset?: number;
  };
  url: "/api/profiles/{userName}/games";
};

export type GetApiProfilesByUserNameGamesResponses = {
  /**
   * Information about user games
   */
  200: GetGamesByUsernameResponseIEnumerablePaginatedResponse;
};

export type GetApiProfilesByUserNameGamesResponse =
  GetApiProfilesByUserNameGamesResponses[keyof GetApiProfilesByUserNameGamesResponses];

export type GetApiV1RapfiTestData = {
  body?: never;
  headers: {
    "X-Version"?: string;
    "Content-Type": string;
  };
  path?: never;
  query?: never;
  url: "/api/v1/rapfi/test";
};

export type GetApiV1RapfiTestErrors = {
  /**
   * Connection failed
   */
  500: unknown;
};

export type GetApiV1RapfiTestResponses = {
  /**
   * Connection successful
   */
  200: unknown;
};

export type GetApiGameRegisteredByGameIdHistoryData = {
  body?: never;
  headers: {
    "X-Version"?: string;
    Authorization: string;
    "Content-Type": string;
  };
  path: {
    gameId: string;
  };
  query?: never;
  url: "/api/game/registered/{gameId}/history";
};

export type GetApiGameRegisteredByGameIdHistoryErrors = {
  /**
   * Not Found
   */
  404: ProblemDetails;
};

export type GetApiGameRegisteredByGameIdHistoryError =
  GetApiGameRegisteredByGameIdHistoryErrors[keyof GetApiGameRegisteredByGameIdHistoryErrors];

export type GetApiGameRegisteredByGameIdHistoryResponses = {
  /**
   * OK
   */
  200: GetGameHistoryResponse;
};

export type GetApiGameRegisteredByGameIdHistoryResponse =
  GetApiGameRegisteredByGameIdHistoryResponses[keyof GetApiGameRegisteredByGameIdHistoryResponses];

export type GetApiGameRegisteredAvailableToJoinData = {
  body?: never;
  headers: {
    "X-Version"?: string;
    Authorization: string;
    "Content-Type": string;
  };
  path?: never;
  query?: {
    limit?: number;
    offset?: number;
  };
  url: "/api/game/registered/available-to-join";
};

export type GetApiGameRegisteredAvailableToJoinResponses = {
  /**
   * OK
   */
  200: GetAvailableGamesResponseIEnumerablePaginatedResponse;
};

export type GetApiGameRegisteredAvailableToJoinResponse =
  GetApiGameRegisteredAvailableToJoinResponses[keyof GetApiGameRegisteredAvailableToJoinResponses];

export type GetApiGameRegisteredActiveData = {
  body?: never;
  headers: {
    "X-Version"?: string;
    Authorization: string;
    "Content-Type": string;
  };
  path?: never;
  query?: {
    limit?: number;
    offset?: number;
  };
  url: "/api/game/registered/active";
};

export type GetApiGameRegisteredActiveResponses = {
  /**
   * OK
   */
  200: GetActiveGamesResponseIEnumerablePaginatedResponse;
};

export type GetApiGameRegisteredActiveResponse =
  GetApiGameRegisteredActiveResponses[keyof GetApiGameRegisteredActiveResponses];

export type PostApiGameRegisteredData = {
  body?: CreateGameRequest;
  headers: {
    "X-Version"?: string;
    Authorization: string;
    "Content-Type": string;
  };
  path?: never;
  query?: never;
  url: "/api/game/registered";
};

export type PostApiGameRegisteredErrors = {
  /**
   * Bad Request
   */
  400: ProblemDetails;
};

export type PostApiGameRegisteredError =
  PostApiGameRegisteredErrors[keyof PostApiGameRegisteredErrors];

export type PostApiGameRegisteredResponses = {
  /**
   * OK
   */
  200: CreateGameResponse;
};

export type PostApiGameRegisteredResponse =
  PostApiGameRegisteredResponses[keyof PostApiGameRegisteredResponses];

export type PostApiGameRegisteredByGameIdJoinData = {
  body?: never;
  headers: {
    "X-Version"?: string;
    Authorization: string;
    "Content-Type": string;
  };
  path: {
    gameId: string;
  };
  query?: never;
  url: "/api/game/registered/{gameId}/join";
};

export type PostApiGameRegisteredByGameIdJoinErrors = {
  /**
   * Game or player with specified id not found
   */
  404: ProblemDetails;
};

export type PostApiGameRegisteredByGameIdJoinError =
  PostApiGameRegisteredByGameIdJoinErrors[keyof PostApiGameRegisteredByGameIdJoinErrors];

export type PostApiGameRegisteredByGameIdJoinResponses = {
  /**
   * Player with specified id successfully joined the game
   */
  200: AddPlayerToGameResponse;
};

export type PostApiGameRegisteredByGameIdJoinResponse =
  PostApiGameRegisteredByGameIdJoinResponses[keyof PostApiGameRegisteredByGameIdJoinResponses];

export type PostGamehubAnonymousJoinGameGroupData = {
  body?: never;
  path?: never;
  query?: {
    gameId?: string;
  };
  url: "/gamehub/anonymous/JoinGameGroup";
};

export type PostGamehubAnonymousGetClockData = {
  body?: never;
  path?: never;
  query?: {
    message?: GetClockMessage;
  };
  url: "/gamehub/anonymous/GetClock";
};

export type PostGamehubAnonymousMakeMoveData = {
  body?: never;
  path?: never;
  query?: {
    message?: MakeMoveClientMessage;
  };
  url: "/gamehub/anonymous/MakeMove";
};

export type PostGamehubAnonymousRequestUndoData = {
  body?: never;
  path?: never;
  query?: {
    message?: RequestUndoMessage;
  };
  url: "/gamehub/anonymous/RequestUndo";
};

export type PostGamehubAnonymousApproveUndoData = {
  body?: never;
  path?: never;
  query?: {
    message?: ApproveUndoMessage;
  };
  url: "/gamehub/anonymous/ApproveUndo";
};

export type PostGamehubAnonymousResignData = {
  body?: never;
  path?: never;
  query?: {
    message?: ResignClientMessage;
  };
  url: "/gamehub/anonymous/Resign";
};

export type PostGamehubAnonymousRequestRematchData = {
  body?: never;
  path?: never;
  query?: {
    message?: RematchRequestMessage;
  };
  url: "/gamehub/anonymous/RequestRematch";
};

export type PostGamehubAnonymousApproveRematchData = {
  body?: never;
  path?: never;
  query?: {
    message?: ApproveRematchMessage;
  };
  url: "/gamehub/anonymous/ApproveRematch";
};

export type PostGamehubAnonymousSendMessageData = {
  body?: never;
  path?: never;
  query?: {
    messageRequest?: ChatMessageClientMessage;
  };
  url: "/gamehub/anonymous/SendMessage";
};

export type PostGamehubAnonymousSendInvitationToPlayData = {
  body?: never;
  path?: never;
  query?: {
    _?: SendInvitationToPlayMessage;
  };
  url: "/gamehub/anonymous/SendInvitationToPlay";
};

export type PostGamehubRegisteredJoinGameGroupData = {
  body?: never;
  path?: never;
  query?: {
    gameId?: string;
  };
  url: "/gamehub/registered/JoinGameGroup";
};

export type PostGamehubRegisteredGetClockData = {
  body?: never;
  path?: never;
  query?: {
    message?: GetClockMessage;
  };
  url: "/gamehub/registered/GetClock";
};

export type PostGamehubRegisteredMakeMoveData = {
  body?: never;
  path?: never;
  query?: {
    message?: MakeMoveClientMessage;
  };
  url: "/gamehub/registered/MakeMove";
};

export type PostGamehubRegisteredRequestUndoData = {
  body?: never;
  path?: never;
  query?: {
    message?: RequestUndoMessage;
  };
  url: "/gamehub/registered/RequestUndo";
};

export type PostGamehubRegisteredApproveUndoData = {
  body?: never;
  path?: never;
  query?: {
    message?: ApproveUndoMessage;
  };
  url: "/gamehub/registered/ApproveUndo";
};

export type PostGamehubRegisteredResignData = {
  body?: never;
  path?: never;
  query?: {
    message?: ResignClientMessage;
  };
  url: "/gamehub/registered/Resign";
};

export type PostGamehubRegisteredRequestRematchData = {
  body?: never;
  path?: never;
  query?: {
    message?: RematchRequestMessage;
  };
  url: "/gamehub/registered/RequestRematch";
};

export type PostGamehubRegisteredApproveRematchData = {
  body?: never;
  path?: never;
  query?: {
    message?: ApproveRematchMessage;
  };
  url: "/gamehub/registered/ApproveRematch";
};

export type PostGamehubRegisteredSendMessageData = {
  body?: never;
  path?: never;
  query?: {
    messageRequest?: ChatMessageClientMessage;
  };
  url: "/gamehub/registered/SendMessage";
};

export type PostGamehubRegisteredSendInvitationToPlayData = {
  body?: never;
  path?: never;
  query?: {
    message?: SendInvitationToPlayMessage;
  };
  url: "/gamehub/registered/SendInvitationToPlay";
};
