// This file is auto-generated by @hey-api/openapi-ts

import type { OptionsLegacyParser } from "@hey-api/client-fetch";
import {
  queryOptions,
  infiniteQueryOptions,
  type InfiniteData,
  type UseMutationOptions,
  type DefaultError,
} from "@tanstack/react-query";
import type {
  GetApiGameAnonymousByGameIdHistoryData,
  GetApiGameAnonymousAvailableToJoinData,
  GetApiGameAnonymousAvailableToJoinError,
  GetApiGameAnonymousAvailableToJoinResponse,
  GetApiGameAnonymousActiveData,
  GetApiGameAnonymousActiveError,
  GetApiGameAnonymousActiveResponse,
  PostApiGameAnonymousData,
  PostApiGameAnonymousError,
  PostApiGameAnonymousResponse,
  PostApiGameAnonymousByGameIdJoinData,
  PostApiGameAnonymousByGameIdJoinError,
  PostApiGameAnonymousByGameIdJoinResponse,
  GetHealthData,
  GetApiProfilesByUserNameGamesData,
  GetApiProfilesByUserNameGamesError,
  GetApiProfilesByUserNameGamesResponse,
  GetApiV1RapfiTestData,
  GetApiGameRegisteredByGameIdHistoryData,
  GetApiGameRegisteredAvailableToJoinData,
  GetApiGameRegisteredAvailableToJoinError,
  GetApiGameRegisteredAvailableToJoinResponse,
  GetApiGameRegisteredActiveData,
  GetApiGameRegisteredActiveError,
  GetApiGameRegisteredActiveResponse,
  PostApiGameRegisteredData,
  PostApiGameRegisteredError,
  PostApiGameRegisteredResponse,
  PostApiGameRegisteredByGameIdJoinData,
  PostApiGameRegisteredByGameIdJoinError,
  PostApiGameRegisteredByGameIdJoinResponse,
  PostGamehubAnonymousJoinGameGroupData,
  PostGamehubAnonymousGetClockData,
  PostGamehubAnonymousMakeMoveData,
  PostGamehubAnonymousRequestUndoData,
  PostGamehubAnonymousApproveUndoData,
  PostGamehubAnonymousResignData,
  PostGamehubAnonymousRequestRematchData,
  PostGamehubAnonymousApproveRematchData,
  PostGamehubAnonymousSendMessageData,
  PostGamehubAnonymousSendInvitationToPlayData,
  PostGamehubRegisteredJoinGameGroupData,
  PostGamehubRegisteredGetClockData,
  PostGamehubRegisteredMakeMoveData,
  PostGamehubRegisteredRequestUndoData,
  PostGamehubRegisteredApproveUndoData,
  PostGamehubRegisteredResignData,
  PostGamehubRegisteredRequestRematchData,
  PostGamehubRegisteredApproveRematchData,
  PostGamehubRegisteredSendMessageData,
  PostGamehubRegisteredSendInvitationToPlayData,
} from "../types.gen";
import {
  client,
  getApiGameAnonymousByGameIdHistory,
  getApiGameAnonymousAvailableToJoin,
  getApiGameAnonymousActive,
  postApiGameAnonymous,
  postApiGameAnonymousByGameIdJoin,
  getHealth,
  getApiProfilesByUserNameGames,
  getApiV1RapfiTest,
  getApiGameRegisteredByGameIdHistory,
  getApiGameRegisteredAvailableToJoin,
  getApiGameRegisteredActive,
  postApiGameRegistered,
  postApiGameRegisteredByGameIdJoin,
  postGamehubAnonymousJoinGameGroup,
  postGamehubAnonymousGetClock,
  postGamehubAnonymousMakeMove,
  postGamehubAnonymousRequestUndo,
  postGamehubAnonymousApproveUndo,
  postGamehubAnonymousResign,
  postGamehubAnonymousRequestRematch,
  postGamehubAnonymousApproveRematch,
  postGamehubAnonymousSendMessage,
  postGamehubAnonymousSendInvitationToPlay,
  postGamehubRegisteredJoinGameGroup,
  postGamehubRegisteredGetClock,
  postGamehubRegisteredMakeMove,
  postGamehubRegisteredRequestUndo,
  postGamehubRegisteredApproveUndo,
  postGamehubRegisteredResign,
  postGamehubRegisteredRequestRematch,
  postGamehubRegisteredApproveRematch,
  postGamehubRegisteredSendMessage,
  postGamehubRegisteredSendInvitationToPlay,
} from "../sdk.gen";

type QueryKey<TOptions extends OptionsLegacyParser> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends OptionsLegacyParser>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const getApiGameAnonymousByGameIdHistoryQueryKey = (
  options: OptionsLegacyParser<GetApiGameAnonymousByGameIdHistoryData>,
) => [createQueryKey("getApiGameAnonymousByGameIdHistory", options)];

export const getApiGameAnonymousByGameIdHistoryOptions = (
  options: OptionsLegacyParser<GetApiGameAnonymousByGameIdHistoryData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiGameAnonymousByGameIdHistory({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiGameAnonymousByGameIdHistoryQueryKey(options),
  });
};

export const getApiGameAnonymousAvailableToJoinQueryKey = (
  options: OptionsLegacyParser<GetApiGameAnonymousAvailableToJoinData>,
) => [createQueryKey("getApiGameAnonymousAvailableToJoin", options)];

export const getApiGameAnonymousAvailableToJoinOptions = (
  options: OptionsLegacyParser<GetApiGameAnonymousAvailableToJoinData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiGameAnonymousAvailableToJoin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiGameAnonymousAvailableToJoinQueryKey(options),
  });
};

const createInfiniteParams = <
  K extends Pick<
    QueryKey<OptionsLegacyParser>[0],
    "body" | "headers" | "path" | "query"
  >,
>(
  queryKey: QueryKey<OptionsLegacyParser>,
  page: K,
) => {
  const params = queryKey[0];
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    };
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    };
  }
  if (page.path) {
    params.path = {
      ...queryKey[0].path,
      ...page.path,
    };
  }
  if (page.query) {
    params.query = {
      ...queryKey[0].query,
      ...page.query,
    };
  }
  return params as unknown as typeof page;
};

export const getApiGameAnonymousAvailableToJoinInfiniteQueryKey = (
  options: OptionsLegacyParser<GetApiGameAnonymousAvailableToJoinData>,
): QueryKey<OptionsLegacyParser<GetApiGameAnonymousAvailableToJoinData>> => [
  createQueryKey("getApiGameAnonymousAvailableToJoin", options, true),
];

export const getApiGameAnonymousAvailableToJoinInfiniteOptions = (
  options: OptionsLegacyParser<GetApiGameAnonymousAvailableToJoinData>,
) => {
  return infiniteQueryOptions<
    GetApiGameAnonymousAvailableToJoinResponse,
    GetApiGameAnonymousAvailableToJoinError,
    InfiniteData<GetApiGameAnonymousAvailableToJoinResponse>,
    QueryKey<OptionsLegacyParser<GetApiGameAnonymousAvailableToJoinData>>,
    | number
    | Pick<
        QueryKey<
          OptionsLegacyParser<GetApiGameAnonymousAvailableToJoinData>
        >[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<
            OptionsLegacyParser<GetApiGameAnonymousAvailableToJoinData>
          >[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiGameAnonymousAvailableToJoin({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiGameAnonymousAvailableToJoinInfiniteQueryKey(options),
    },
  );
};

export const getApiGameAnonymousActiveQueryKey = (
  options: OptionsLegacyParser<GetApiGameAnonymousActiveData>,
) => [createQueryKey("getApiGameAnonymousActive", options)];

export const getApiGameAnonymousActiveOptions = (
  options: OptionsLegacyParser<GetApiGameAnonymousActiveData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiGameAnonymousActive({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiGameAnonymousActiveQueryKey(options),
  });
};

export const getApiGameAnonymousActiveInfiniteQueryKey = (
  options: OptionsLegacyParser<GetApiGameAnonymousActiveData>,
): QueryKey<OptionsLegacyParser<GetApiGameAnonymousActiveData>> => [
  createQueryKey("getApiGameAnonymousActive", options, true),
];

export const getApiGameAnonymousActiveInfiniteOptions = (
  options: OptionsLegacyParser<GetApiGameAnonymousActiveData>,
) => {
  return infiniteQueryOptions<
    GetApiGameAnonymousActiveResponse,
    GetApiGameAnonymousActiveError,
    InfiniteData<GetApiGameAnonymousActiveResponse>,
    QueryKey<OptionsLegacyParser<GetApiGameAnonymousActiveData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<GetApiGameAnonymousActiveData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<GetApiGameAnonymousActiveData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiGameAnonymousActive({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiGameAnonymousActiveInfiniteQueryKey(options),
    },
  );
};

export const postApiGameAnonymousQueryKey = (
  options: OptionsLegacyParser<PostApiGameAnonymousData>,
) => [createQueryKey("postApiGameAnonymous", options)];

export const postApiGameAnonymousOptions = (
  options: OptionsLegacyParser<PostApiGameAnonymousData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiGameAnonymous({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiGameAnonymousQueryKey(options),
  });
};

export const postApiGameAnonymousMutation = (
  options?: Partial<OptionsLegacyParser<PostApiGameAnonymousData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostApiGameAnonymousResponse,
    PostApiGameAnonymousError,
    OptionsLegacyParser<PostApiGameAnonymousData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiGameAnonymous({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiGameAnonymousByGameIdJoinQueryKey = (
  options: OptionsLegacyParser<PostApiGameAnonymousByGameIdJoinData>,
) => [createQueryKey("postApiGameAnonymousByGameIdJoin", options)];

export const postApiGameAnonymousByGameIdJoinOptions = (
  options: OptionsLegacyParser<PostApiGameAnonymousByGameIdJoinData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiGameAnonymousByGameIdJoin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiGameAnonymousByGameIdJoinQueryKey(options),
  });
};

export const postApiGameAnonymousByGameIdJoinMutation = (
  options?: Partial<OptionsLegacyParser<PostApiGameAnonymousByGameIdJoinData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostApiGameAnonymousByGameIdJoinResponse,
    PostApiGameAnonymousByGameIdJoinError,
    OptionsLegacyParser<PostApiGameAnonymousByGameIdJoinData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiGameAnonymousByGameIdJoin({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getHealthQueryKey = (
  options: OptionsLegacyParser<GetHealthData>,
) => [createQueryKey("getHealth", options)];

export const getHealthOptions = (
  options: OptionsLegacyParser<GetHealthData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getHealth({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getHealthQueryKey(options),
  });
};

export const getApiProfilesByUserNameGamesQueryKey = (
  options: OptionsLegacyParser<GetApiProfilesByUserNameGamesData>,
) => [createQueryKey("getApiProfilesByUserNameGames", options)];

export const getApiProfilesByUserNameGamesOptions = (
  options: OptionsLegacyParser<GetApiProfilesByUserNameGamesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiProfilesByUserNameGames({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiProfilesByUserNameGamesQueryKey(options),
  });
};

export const getApiProfilesByUserNameGamesInfiniteQueryKey = (
  options: OptionsLegacyParser<GetApiProfilesByUserNameGamesData>,
): QueryKey<OptionsLegacyParser<GetApiProfilesByUserNameGamesData>> => [
  createQueryKey("getApiProfilesByUserNameGames", options, true),
];

export const getApiProfilesByUserNameGamesInfiniteOptions = (
  options: OptionsLegacyParser<GetApiProfilesByUserNameGamesData>,
) => {
  return infiniteQueryOptions<
    GetApiProfilesByUserNameGamesResponse,
    GetApiProfilesByUserNameGamesError,
    InfiniteData<GetApiProfilesByUserNameGamesResponse>,
    QueryKey<OptionsLegacyParser<GetApiProfilesByUserNameGamesData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<GetApiProfilesByUserNameGamesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<GetApiProfilesByUserNameGamesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiProfilesByUserNameGames({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiProfilesByUserNameGamesInfiniteQueryKey(options),
    },
  );
};

export const getApiV1RapfiTestQueryKey = (
  options: OptionsLegacyParser<GetApiV1RapfiTestData>,
) => [createQueryKey("getApiV1RapfiTest", options)];

export const getApiV1RapfiTestOptions = (
  options: OptionsLegacyParser<GetApiV1RapfiTestData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1RapfiTest({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiV1RapfiTestQueryKey(options),
  });
};

export const getApiGameRegisteredByGameIdHistoryQueryKey = (
  options: OptionsLegacyParser<GetApiGameRegisteredByGameIdHistoryData>,
) => [createQueryKey("getApiGameRegisteredByGameIdHistory", options)];

export const getApiGameRegisteredByGameIdHistoryOptions = (
  options: OptionsLegacyParser<GetApiGameRegisteredByGameIdHistoryData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiGameRegisteredByGameIdHistory({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiGameRegisteredByGameIdHistoryQueryKey(options),
  });
};

export const getApiGameRegisteredAvailableToJoinQueryKey = (
  options: OptionsLegacyParser<GetApiGameRegisteredAvailableToJoinData>,
) => [createQueryKey("getApiGameRegisteredAvailableToJoin", options)];

export const getApiGameRegisteredAvailableToJoinOptions = (
  options: OptionsLegacyParser<GetApiGameRegisteredAvailableToJoinData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiGameRegisteredAvailableToJoin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiGameRegisteredAvailableToJoinQueryKey(options),
  });
};

export const getApiGameRegisteredAvailableToJoinInfiniteQueryKey = (
  options: OptionsLegacyParser<GetApiGameRegisteredAvailableToJoinData>,
): QueryKey<OptionsLegacyParser<GetApiGameRegisteredAvailableToJoinData>> => [
  createQueryKey("getApiGameRegisteredAvailableToJoin", options, true),
];

export const getApiGameRegisteredAvailableToJoinInfiniteOptions = (
  options: OptionsLegacyParser<GetApiGameRegisteredAvailableToJoinData>,
) => {
  return infiniteQueryOptions<
    GetApiGameRegisteredAvailableToJoinResponse,
    GetApiGameRegisteredAvailableToJoinError,
    InfiniteData<GetApiGameRegisteredAvailableToJoinResponse>,
    QueryKey<OptionsLegacyParser<GetApiGameRegisteredAvailableToJoinData>>,
    | number
    | Pick<
        QueryKey<
          OptionsLegacyParser<GetApiGameRegisteredAvailableToJoinData>
        >[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<
            OptionsLegacyParser<GetApiGameRegisteredAvailableToJoinData>
          >[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiGameRegisteredAvailableToJoin({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiGameRegisteredAvailableToJoinInfiniteQueryKey(options),
    },
  );
};

export const getApiGameRegisteredActiveQueryKey = (
  options: OptionsLegacyParser<GetApiGameRegisteredActiveData>,
) => [createQueryKey("getApiGameRegisteredActive", options)];

export const getApiGameRegisteredActiveOptions = (
  options: OptionsLegacyParser<GetApiGameRegisteredActiveData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiGameRegisteredActive({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiGameRegisteredActiveQueryKey(options),
  });
};

export const getApiGameRegisteredActiveInfiniteQueryKey = (
  options: OptionsLegacyParser<GetApiGameRegisteredActiveData>,
): QueryKey<OptionsLegacyParser<GetApiGameRegisteredActiveData>> => [
  createQueryKey("getApiGameRegisteredActive", options, true),
];

export const getApiGameRegisteredActiveInfiniteOptions = (
  options: OptionsLegacyParser<GetApiGameRegisteredActiveData>,
) => {
  return infiniteQueryOptions<
    GetApiGameRegisteredActiveResponse,
    GetApiGameRegisteredActiveError,
    InfiniteData<GetApiGameRegisteredActiveResponse>,
    QueryKey<OptionsLegacyParser<GetApiGameRegisteredActiveData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<GetApiGameRegisteredActiveData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<GetApiGameRegisteredActiveData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiGameRegisteredActive({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiGameRegisteredActiveInfiniteQueryKey(options),
    },
  );
};

export const postApiGameRegisteredQueryKey = (
  options: OptionsLegacyParser<PostApiGameRegisteredData>,
) => [createQueryKey("postApiGameRegistered", options)];

export const postApiGameRegisteredOptions = (
  options: OptionsLegacyParser<PostApiGameRegisteredData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiGameRegistered({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiGameRegisteredQueryKey(options),
  });
};

export const postApiGameRegisteredMutation = (
  options?: Partial<OptionsLegacyParser<PostApiGameRegisteredData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostApiGameRegisteredResponse,
    PostApiGameRegisteredError,
    OptionsLegacyParser<PostApiGameRegisteredData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiGameRegistered({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiGameRegisteredByGameIdJoinQueryKey = (
  options: OptionsLegacyParser<PostApiGameRegisteredByGameIdJoinData>,
) => [createQueryKey("postApiGameRegisteredByGameIdJoin", options)];

export const postApiGameRegisteredByGameIdJoinOptions = (
  options: OptionsLegacyParser<PostApiGameRegisteredByGameIdJoinData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiGameRegisteredByGameIdJoin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiGameRegisteredByGameIdJoinQueryKey(options),
  });
};

export const postApiGameRegisteredByGameIdJoinMutation = (
  options?: Partial<OptionsLegacyParser<PostApiGameRegisteredByGameIdJoinData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostApiGameRegisteredByGameIdJoinResponse,
    PostApiGameRegisteredByGameIdJoinError,
    OptionsLegacyParser<PostApiGameRegisteredByGameIdJoinData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiGameRegisteredByGameIdJoin({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postGamehubAnonymousJoinGameGroupQueryKey = (
  options?: OptionsLegacyParser<PostGamehubAnonymousJoinGameGroupData>,
) => [createQueryKey("postGamehubAnonymousJoinGameGroup", options)];

export const postGamehubAnonymousJoinGameGroupOptions = (
  options?: OptionsLegacyParser<PostGamehubAnonymousJoinGameGroupData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postGamehubAnonymousJoinGameGroup({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGamehubAnonymousJoinGameGroupQueryKey(options),
  });
};

export const postGamehubAnonymousJoinGameGroupMutation = (
  options?: Partial<OptionsLegacyParser<PostGamehubAnonymousJoinGameGroupData>>,
) => {
  const mutationOptions: UseMutationOptions<
    void,
    DefaultError,
    OptionsLegacyParser<PostGamehubAnonymousJoinGameGroupData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postGamehubAnonymousJoinGameGroup({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postGamehubAnonymousGetClockQueryKey = (
  options?: OptionsLegacyParser<PostGamehubAnonymousGetClockData>,
) => [createQueryKey("postGamehubAnonymousGetClock", options)];

export const postGamehubAnonymousGetClockOptions = (
  options?: OptionsLegacyParser<PostGamehubAnonymousGetClockData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postGamehubAnonymousGetClock({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGamehubAnonymousGetClockQueryKey(options),
  });
};

export const postGamehubAnonymousGetClockMutation = (
  options?: Partial<OptionsLegacyParser<PostGamehubAnonymousGetClockData>>,
) => {
  const mutationOptions: UseMutationOptions<
    void,
    DefaultError,
    OptionsLegacyParser<PostGamehubAnonymousGetClockData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postGamehubAnonymousGetClock({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postGamehubAnonymousMakeMoveQueryKey = (
  options?: OptionsLegacyParser<PostGamehubAnonymousMakeMoveData>,
) => [createQueryKey("postGamehubAnonymousMakeMove", options)];

export const postGamehubAnonymousMakeMoveOptions = (
  options?: OptionsLegacyParser<PostGamehubAnonymousMakeMoveData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postGamehubAnonymousMakeMove({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGamehubAnonymousMakeMoveQueryKey(options),
  });
};

export const postGamehubAnonymousMakeMoveMutation = (
  options?: Partial<OptionsLegacyParser<PostGamehubAnonymousMakeMoveData>>,
) => {
  const mutationOptions: UseMutationOptions<
    void,
    DefaultError,
    OptionsLegacyParser<PostGamehubAnonymousMakeMoveData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postGamehubAnonymousMakeMove({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postGamehubAnonymousRequestUndoQueryKey = (
  options?: OptionsLegacyParser<PostGamehubAnonymousRequestUndoData>,
) => [createQueryKey("postGamehubAnonymousRequestUndo", options)];

export const postGamehubAnonymousRequestUndoOptions = (
  options?: OptionsLegacyParser<PostGamehubAnonymousRequestUndoData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postGamehubAnonymousRequestUndo({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGamehubAnonymousRequestUndoQueryKey(options),
  });
};

export const postGamehubAnonymousRequestUndoMutation = (
  options?: Partial<OptionsLegacyParser<PostGamehubAnonymousRequestUndoData>>,
) => {
  const mutationOptions: UseMutationOptions<
    void,
    DefaultError,
    OptionsLegacyParser<PostGamehubAnonymousRequestUndoData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postGamehubAnonymousRequestUndo({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postGamehubAnonymousApproveUndoQueryKey = (
  options?: OptionsLegacyParser<PostGamehubAnonymousApproveUndoData>,
) => [createQueryKey("postGamehubAnonymousApproveUndo", options)];

export const postGamehubAnonymousApproveUndoOptions = (
  options?: OptionsLegacyParser<PostGamehubAnonymousApproveUndoData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postGamehubAnonymousApproveUndo({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGamehubAnonymousApproveUndoQueryKey(options),
  });
};

export const postGamehubAnonymousApproveUndoMutation = (
  options?: Partial<OptionsLegacyParser<PostGamehubAnonymousApproveUndoData>>,
) => {
  const mutationOptions: UseMutationOptions<
    void,
    DefaultError,
    OptionsLegacyParser<PostGamehubAnonymousApproveUndoData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postGamehubAnonymousApproveUndo({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postGamehubAnonymousResignQueryKey = (
  options?: OptionsLegacyParser<PostGamehubAnonymousResignData>,
) => [createQueryKey("postGamehubAnonymousResign", options)];

export const postGamehubAnonymousResignOptions = (
  options?: OptionsLegacyParser<PostGamehubAnonymousResignData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postGamehubAnonymousResign({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGamehubAnonymousResignQueryKey(options),
  });
};

export const postGamehubAnonymousResignMutation = (
  options?: Partial<OptionsLegacyParser<PostGamehubAnonymousResignData>>,
) => {
  const mutationOptions: UseMutationOptions<
    void,
    DefaultError,
    OptionsLegacyParser<PostGamehubAnonymousResignData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postGamehubAnonymousResign({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postGamehubAnonymousRequestRematchQueryKey = (
  options?: OptionsLegacyParser<PostGamehubAnonymousRequestRematchData>,
) => [createQueryKey("postGamehubAnonymousRequestRematch", options)];

export const postGamehubAnonymousRequestRematchOptions = (
  options?: OptionsLegacyParser<PostGamehubAnonymousRequestRematchData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postGamehubAnonymousRequestRematch({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGamehubAnonymousRequestRematchQueryKey(options),
  });
};

export const postGamehubAnonymousRequestRematchMutation = (
  options?: Partial<
    OptionsLegacyParser<PostGamehubAnonymousRequestRematchData>
  >,
) => {
  const mutationOptions: UseMutationOptions<
    void,
    DefaultError,
    OptionsLegacyParser<PostGamehubAnonymousRequestRematchData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postGamehubAnonymousRequestRematch({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postGamehubAnonymousApproveRematchQueryKey = (
  options?: OptionsLegacyParser<PostGamehubAnonymousApproveRematchData>,
) => [createQueryKey("postGamehubAnonymousApproveRematch", options)];

export const postGamehubAnonymousApproveRematchOptions = (
  options?: OptionsLegacyParser<PostGamehubAnonymousApproveRematchData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postGamehubAnonymousApproveRematch({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGamehubAnonymousApproveRematchQueryKey(options),
  });
};

export const postGamehubAnonymousApproveRematchMutation = (
  options?: Partial<
    OptionsLegacyParser<PostGamehubAnonymousApproveRematchData>
  >,
) => {
  const mutationOptions: UseMutationOptions<
    void,
    DefaultError,
    OptionsLegacyParser<PostGamehubAnonymousApproveRematchData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postGamehubAnonymousApproveRematch({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postGamehubAnonymousSendMessageQueryKey = (
  options?: OptionsLegacyParser<PostGamehubAnonymousSendMessageData>,
) => [createQueryKey("postGamehubAnonymousSendMessage", options)];

export const postGamehubAnonymousSendMessageOptions = (
  options?: OptionsLegacyParser<PostGamehubAnonymousSendMessageData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postGamehubAnonymousSendMessage({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGamehubAnonymousSendMessageQueryKey(options),
  });
};

export const postGamehubAnonymousSendMessageMutation = (
  options?: Partial<OptionsLegacyParser<PostGamehubAnonymousSendMessageData>>,
) => {
  const mutationOptions: UseMutationOptions<
    void,
    DefaultError,
    OptionsLegacyParser<PostGamehubAnonymousSendMessageData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postGamehubAnonymousSendMessage({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postGamehubAnonymousSendInvitationToPlayQueryKey = (
  options?: OptionsLegacyParser<PostGamehubAnonymousSendInvitationToPlayData>,
) => [createQueryKey("postGamehubAnonymousSendInvitationToPlay", options)];

export const postGamehubAnonymousSendInvitationToPlayOptions = (
  options?: OptionsLegacyParser<PostGamehubAnonymousSendInvitationToPlayData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postGamehubAnonymousSendInvitationToPlay({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGamehubAnonymousSendInvitationToPlayQueryKey(options),
  });
};

export const postGamehubAnonymousSendInvitationToPlayMutation = (
  options?: Partial<
    OptionsLegacyParser<PostGamehubAnonymousSendInvitationToPlayData>
  >,
) => {
  const mutationOptions: UseMutationOptions<
    void,
    DefaultError,
    OptionsLegacyParser<PostGamehubAnonymousSendInvitationToPlayData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postGamehubAnonymousSendInvitationToPlay({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postGamehubRegisteredJoinGameGroupQueryKey = (
  options?: OptionsLegacyParser<PostGamehubRegisteredJoinGameGroupData>,
) => [createQueryKey("postGamehubRegisteredJoinGameGroup", options)];

export const postGamehubRegisteredJoinGameGroupOptions = (
  options?: OptionsLegacyParser<PostGamehubRegisteredJoinGameGroupData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postGamehubRegisteredJoinGameGroup({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGamehubRegisteredJoinGameGroupQueryKey(options),
  });
};

export const postGamehubRegisteredJoinGameGroupMutation = (
  options?: Partial<
    OptionsLegacyParser<PostGamehubRegisteredJoinGameGroupData>
  >,
) => {
  const mutationOptions: UseMutationOptions<
    void,
    DefaultError,
    OptionsLegacyParser<PostGamehubRegisteredJoinGameGroupData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postGamehubRegisteredJoinGameGroup({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postGamehubRegisteredGetClockQueryKey = (
  options?: OptionsLegacyParser<PostGamehubRegisteredGetClockData>,
) => [createQueryKey("postGamehubRegisteredGetClock", options)];

export const postGamehubRegisteredGetClockOptions = (
  options?: OptionsLegacyParser<PostGamehubRegisteredGetClockData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postGamehubRegisteredGetClock({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGamehubRegisteredGetClockQueryKey(options),
  });
};

export const postGamehubRegisteredGetClockMutation = (
  options?: Partial<OptionsLegacyParser<PostGamehubRegisteredGetClockData>>,
) => {
  const mutationOptions: UseMutationOptions<
    void,
    DefaultError,
    OptionsLegacyParser<PostGamehubRegisteredGetClockData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postGamehubRegisteredGetClock({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postGamehubRegisteredMakeMoveQueryKey = (
  options?: OptionsLegacyParser<PostGamehubRegisteredMakeMoveData>,
) => [createQueryKey("postGamehubRegisteredMakeMove", options)];

export const postGamehubRegisteredMakeMoveOptions = (
  options?: OptionsLegacyParser<PostGamehubRegisteredMakeMoveData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postGamehubRegisteredMakeMove({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGamehubRegisteredMakeMoveQueryKey(options),
  });
};

export const postGamehubRegisteredMakeMoveMutation = (
  options?: Partial<OptionsLegacyParser<PostGamehubRegisteredMakeMoveData>>,
) => {
  const mutationOptions: UseMutationOptions<
    void,
    DefaultError,
    OptionsLegacyParser<PostGamehubRegisteredMakeMoveData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postGamehubRegisteredMakeMove({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postGamehubRegisteredRequestUndoQueryKey = (
  options?: OptionsLegacyParser<PostGamehubRegisteredRequestUndoData>,
) => [createQueryKey("postGamehubRegisteredRequestUndo", options)];

export const postGamehubRegisteredRequestUndoOptions = (
  options?: OptionsLegacyParser<PostGamehubRegisteredRequestUndoData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postGamehubRegisteredRequestUndo({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGamehubRegisteredRequestUndoQueryKey(options),
  });
};

export const postGamehubRegisteredRequestUndoMutation = (
  options?: Partial<OptionsLegacyParser<PostGamehubRegisteredRequestUndoData>>,
) => {
  const mutationOptions: UseMutationOptions<
    void,
    DefaultError,
    OptionsLegacyParser<PostGamehubRegisteredRequestUndoData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postGamehubRegisteredRequestUndo({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postGamehubRegisteredApproveUndoQueryKey = (
  options?: OptionsLegacyParser<PostGamehubRegisteredApproveUndoData>,
) => [createQueryKey("postGamehubRegisteredApproveUndo", options)];

export const postGamehubRegisteredApproveUndoOptions = (
  options?: OptionsLegacyParser<PostGamehubRegisteredApproveUndoData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postGamehubRegisteredApproveUndo({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGamehubRegisteredApproveUndoQueryKey(options),
  });
};

export const postGamehubRegisteredApproveUndoMutation = (
  options?: Partial<OptionsLegacyParser<PostGamehubRegisteredApproveUndoData>>,
) => {
  const mutationOptions: UseMutationOptions<
    void,
    DefaultError,
    OptionsLegacyParser<PostGamehubRegisteredApproveUndoData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postGamehubRegisteredApproveUndo({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postGamehubRegisteredResignQueryKey = (
  options?: OptionsLegacyParser<PostGamehubRegisteredResignData>,
) => [createQueryKey("postGamehubRegisteredResign", options)];

export const postGamehubRegisteredResignOptions = (
  options?: OptionsLegacyParser<PostGamehubRegisteredResignData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postGamehubRegisteredResign({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGamehubRegisteredResignQueryKey(options),
  });
};

export const postGamehubRegisteredResignMutation = (
  options?: Partial<OptionsLegacyParser<PostGamehubRegisteredResignData>>,
) => {
  const mutationOptions: UseMutationOptions<
    void,
    DefaultError,
    OptionsLegacyParser<PostGamehubRegisteredResignData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postGamehubRegisteredResign({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postGamehubRegisteredRequestRematchQueryKey = (
  options?: OptionsLegacyParser<PostGamehubRegisteredRequestRematchData>,
) => [createQueryKey("postGamehubRegisteredRequestRematch", options)];

export const postGamehubRegisteredRequestRematchOptions = (
  options?: OptionsLegacyParser<PostGamehubRegisteredRequestRematchData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postGamehubRegisteredRequestRematch({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGamehubRegisteredRequestRematchQueryKey(options),
  });
};

export const postGamehubRegisteredRequestRematchMutation = (
  options?: Partial<
    OptionsLegacyParser<PostGamehubRegisteredRequestRematchData>
  >,
) => {
  const mutationOptions: UseMutationOptions<
    void,
    DefaultError,
    OptionsLegacyParser<PostGamehubRegisteredRequestRematchData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postGamehubRegisteredRequestRematch({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postGamehubRegisteredApproveRematchQueryKey = (
  options?: OptionsLegacyParser<PostGamehubRegisteredApproveRematchData>,
) => [createQueryKey("postGamehubRegisteredApproveRematch", options)];

export const postGamehubRegisteredApproveRematchOptions = (
  options?: OptionsLegacyParser<PostGamehubRegisteredApproveRematchData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postGamehubRegisteredApproveRematch({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGamehubRegisteredApproveRematchQueryKey(options),
  });
};

export const postGamehubRegisteredApproveRematchMutation = (
  options?: Partial<
    OptionsLegacyParser<PostGamehubRegisteredApproveRematchData>
  >,
) => {
  const mutationOptions: UseMutationOptions<
    void,
    DefaultError,
    OptionsLegacyParser<PostGamehubRegisteredApproveRematchData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postGamehubRegisteredApproveRematch({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postGamehubRegisteredSendMessageQueryKey = (
  options?: OptionsLegacyParser<PostGamehubRegisteredSendMessageData>,
) => [createQueryKey("postGamehubRegisteredSendMessage", options)];

export const postGamehubRegisteredSendMessageOptions = (
  options?: OptionsLegacyParser<PostGamehubRegisteredSendMessageData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postGamehubRegisteredSendMessage({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGamehubRegisteredSendMessageQueryKey(options),
  });
};

export const postGamehubRegisteredSendMessageMutation = (
  options?: Partial<OptionsLegacyParser<PostGamehubRegisteredSendMessageData>>,
) => {
  const mutationOptions: UseMutationOptions<
    void,
    DefaultError,
    OptionsLegacyParser<PostGamehubRegisteredSendMessageData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postGamehubRegisteredSendMessage({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postGamehubRegisteredSendInvitationToPlayQueryKey = (
  options?: OptionsLegacyParser<PostGamehubRegisteredSendInvitationToPlayData>,
) => [createQueryKey("postGamehubRegisteredSendInvitationToPlay", options)];

export const postGamehubRegisteredSendInvitationToPlayOptions = (
  options?: OptionsLegacyParser<PostGamehubRegisteredSendInvitationToPlayData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postGamehubRegisteredSendInvitationToPlay({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGamehubRegisteredSendInvitationToPlayQueryKey(options),
  });
};

export const postGamehubRegisteredSendInvitationToPlayMutation = (
  options?: Partial<
    OptionsLegacyParser<PostGamehubRegisteredSendInvitationToPlayData>
  >,
) => {
  const mutationOptions: UseMutationOptions<
    void,
    DefaultError,
    OptionsLegacyParser<PostGamehubRegisteredSendInvitationToPlayData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postGamehubRegisteredSendInvitationToPlay({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
