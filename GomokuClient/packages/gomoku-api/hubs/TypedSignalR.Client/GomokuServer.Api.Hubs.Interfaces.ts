/* THIS (.ts) FILE IS GENERATED BY TypedSignalR.Client.TypeScript */
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import type { IStreamResult, Subject } from "@microsoft/signalr";
import type { GameOptions } from "../GomokuServer.Api";
import type {
  MakeMoveClientMessage,
  ResignClientMessage,
  RequestUndoMessage,
  ApproveUndoMessage,
  RematchRequestMessage,
  ApproveRematchMessage,
  ChatMessageClientMessage,
  GetClockMessage,
  SendInvitationToPlayMessage,
  ReceiveInvitationToPlayMessage,
} from "../GomokuServer.Api.Hubs.Messages.Client";
import type {
  PlayerJoinedGameMessage,
  GameStartedMessage,
  BothPlayersJoinedMessage,
  UndoApprovedMessage,
  PlayerMadeMoveMessage,
  RematchApprovedMessage,
  GameIsOverMessage,
  ErrorMessage,
} from "../GomokuServer.Api.Hubs.Messages.Server";
import type { ClockDto } from "../GomokuServer.Application.Games.Dto";

export type IGameHub = {
  /**
   * @param gameOptions Transpiled from GomokuServer.Api.GameOptions
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  joinQueueWithMode(gameOptions: GameOptions): Promise<void>;
  /**
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  leaveQueue(): Promise<void>;
  /**
   * @param gameId Transpiled from string
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  joinGameGroup(gameId: string): Promise<void>;
  /**
   * @param makeMoveMessage Transpiled from GomokuServer.Api.Hubs.Messages.Client.MakeMoveClientMessage
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  makeMove(makeMoveMessage: MakeMoveClientMessage): Promise<void>;
  /**
   * @param message Transpiled from GomokuServer.Api.Hubs.Messages.Client.ResignClientMessage
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  resign(message: ResignClientMessage): Promise<void>;
  /**
   * @param message Transpiled from GomokuServer.Api.Hubs.Messages.Client.RequestUndoMessage
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  requestUndo(message: RequestUndoMessage): Promise<void>;
  /**
   * @param message Transpiled from GomokuServer.Api.Hubs.Messages.Client.ApproveUndoMessage
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  approveUndo(message: ApproveUndoMessage): Promise<void>;
  /**
   * @param message Transpiled from GomokuServer.Api.Hubs.Messages.Client.RematchRequestMessage
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  requestRematch(message: RematchRequestMessage): Promise<void>;
  /**
   * @param message Transpiled from GomokuServer.Api.Hubs.Messages.Client.ApproveRematchMessage
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  approveRematch(message: ApproveRematchMessage): Promise<void>;
  /**
   * @param messageRequest Transpiled from GomokuServer.Api.Hubs.Messages.Client.ChatMessageClientMessage
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  sendMessage(messageRequest: ChatMessageClientMessage): Promise<void>;
  /**
   * @param message Transpiled from GomokuServer.Api.Hubs.Messages.Client.GetClockMessage
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  getClock(message: GetClockMessage): Promise<void>;
  /**
   * @param message Transpiled from GomokuServer.Api.Hubs.Messages.Client.SendInvitationToPlayMessage
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  sendInvitationToPlay(message: SendInvitationToPlayMessage): Promise<void>;
};

export type IGameHubReceiver = {
  /**
   * @param userCount Transpiled from long
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  onOnlineUserCountChange(userCount: number): Promise<void>;
  /**
   * @param gameId Transpiled from string
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  onMatchingPlayerFound(gameId: string): Promise<void>;
  /**
   * @param gameId Transpiled from string
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  gameGroupJoined(gameId: string): Promise<void>;
  /**
   * @param playerJoinedGameMessage Transpiled from GomokuServer.Api.Hubs.Messages.Server.PlayerJoinedGameMessage
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  playerJoinedGame(
    playerJoinedGameMessage: PlayerJoinedGameMessage,
  ): Promise<void>;
  /**
   * @param gameStartedMessage Transpiled from GomokuServer.Api.Hubs.Messages.Server.GameStartedMessage
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  gameStarted(gameStartedMessage: GameStartedMessage): Promise<void>;
  /**
   * @param bothPlayersJoinedMessage Transpiled from GomokuServer.Api.Hubs.Messages.Server.BothPlayersJoinedMessage
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  bothPlayersJoined(
    bothPlayersJoinedMessage: BothPlayersJoinedMessage,
  ): Promise<void>;
  /**
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  undoRequested(): Promise<void>;
  /**
   * @param message Transpiled from GomokuServer.Api.Hubs.Messages.Server.UndoApprovedMessage
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  undoApproved(message: UndoApprovedMessage): Promise<void>;
  /**
   * @param playerMadeMoveMessage Transpiled from GomokuServer.Api.Hubs.Messages.Server.PlayerMadeMoveMessage
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  playerMadeMove(playerMadeMoveMessage: PlayerMadeMoveMessage): Promise<void>;
  /**
   * @param rematchApprovedMessage Transpiled from GomokuServer.Api.Hubs.Messages.Server.RematchApprovedMessage
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  rematchApproved(
    rematchApprovedMessage: RematchApprovedMessage,
  ): Promise<void>;
  /**
   * @param rematchRequestedMessage Transpiled from GomokuServer.Api.Hubs.Messages.Client.RematchRequestMessage
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  rematchRequested(
    rematchRequestedMessage: RematchRequestMessage,
  ): Promise<void>;
  /**
   * @param gameIsOverMessage Transpiled from GomokuServer.Api.Hubs.Messages.Server.GameIsOverMessage
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  gameIsOver(gameIsOverMessage: GameIsOverMessage): Promise<void>;
  /**
   * @param messageRequest Transpiled from GomokuServer.Api.Hubs.Messages.Client.ChatMessageClientMessage
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  sendMessage(messageRequest: ChatMessageClientMessage): Promise<void>;
  /**
   * @param clock Transpiled from GomokuServer.Application.Games.Dto.ClockDto
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  clock(clock: ClockDto): Promise<void>;
  /**
   * @param errorMessage Transpiled from GomokuServer.Api.Hubs.Messages.Server.ErrorMessage
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  gameHubError(errorMessage: ErrorMessage): Promise<void>;
  /**
   * @param message Transpiled from GomokuServer.Api.Hubs.Messages.Client.ReceiveInvitationToPlayMessage
   * @returns Transpiled from System.Threading.Tasks.Task
   */
  receiveInvitationToPlay(
    message: ReceiveInvitationToPlayMessage,
  ): Promise<void>;
};
