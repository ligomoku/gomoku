/* THIS (.ts) FILE IS GENERATED BY TypedSignalR.Client.TypeScript */
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import type { HubConnection, IStreamResult, Subject } from "@microsoft/signalr";
import type {
  IGameHub,
  IGameHubReceiver,
} from "./GomokuServer.Api.Hubs.Interfaces";
import type { GameOptions } from "../GomokuServer.Api.MatchingEngine";
import type {
  MakeMoveClientMessage,
  ResignClientMessage,
  RequestUndoMessage,
  ApproveUndoMessage,
  RematchRequestMessage,
  ApproveRematchMessage,
  ChatMessageClientMessage,
  GetClockMessage,
  SendInvitationToPlayMessage,
  ReceiveInvitationToPlayMessage,
} from "../GomokuServer.Api.Hubs.Messages.Client";
import type {
  PlayerJoinedGameMessage,
  GameStartedMessage,
  BothPlayersJoinedMessage,
  UndoApprovedMessage,
  PlayerMadeMoveMessage,
  RematchApprovedMessage,
  GameIsOverMessage,
  ErrorMessage,
} from "../GomokuServer.Api.Hubs.Messages.Server";
import type { ClockDto } from "../GomokuServer.Application.Games.Dto";

// components

export type Disposable = {
  dispose(): void;
};

export type HubProxyFactory<T> = {
  createHubProxy(connection: HubConnection): T;
};

export type ReceiverRegister<T> = {
  register(connection: HubConnection, receiver: T): Disposable;
};

type ReceiverMethod = {
  methodName: string;
  method: (...args: any[]) => void;
};

class ReceiverMethodSubscription implements Disposable {
  public constructor(
    private connection: HubConnection,
    private receiverMethod: ReceiverMethod[],
  ) {}

  public readonly dispose = () => {
    for (const it of this.receiverMethod) {
      this.connection.off(it.methodName, it.method);
    }
  };
}

// API

export type HubProxyFactoryProvider = {
  (hubType: "IGameHub"): HubProxyFactory<IGameHub>;
};

export const getHubProxyFactory = ((hubType: string) => {
  if (hubType === "IGameHub") {
    return IGameHub_HubProxyFactory.Instance;
  }
}) as HubProxyFactoryProvider;

export type ReceiverRegisterProvider = {
  (receiverType: "IGameHubReceiver"): ReceiverRegister<IGameHubReceiver>;
};

export const getReceiverRegister = ((receiverType: string) => {
  if (receiverType === "IGameHubReceiver") {
    return IGameHubReceiver_Binder.Instance;
  }
}) as ReceiverRegisterProvider;

// HubProxy

class IGameHub_HubProxyFactory implements HubProxyFactory<IGameHub> {
  public static Instance = new IGameHub_HubProxyFactory();

  private constructor() {}

  public readonly createHubProxy = (connection: HubConnection): IGameHub => {
    return new IGameHub_HubProxy(connection);
  };
}

class IGameHub_HubProxy implements IGameHub {
  public constructor(private connection: HubConnection) {}

  public readonly joinQueueWithMode = async (
    gameOptions: GameOptions,
  ): Promise<void> => {
    return await this.connection.invoke("JoinQueueWithMode", gameOptions);
  };

  public readonly leaveQueue = async (): Promise<void> => {
    return await this.connection.invoke("LeaveQueue");
  };

  public readonly joinGameGroup = async (gameId: string): Promise<void> => {
    return await this.connection.invoke("JoinGameGroup", gameId);
  };

  public readonly makeMove = async (
    makeMoveMessage: MakeMoveClientMessage,
  ): Promise<void> => {
    return await this.connection.invoke("MakeMove", makeMoveMessage);
  };

  public readonly resign = async (
    message: ResignClientMessage,
  ): Promise<void> => {
    return await this.connection.invoke("Resign", message);
  };

  public readonly requestUndo = async (
    message: RequestUndoMessage,
  ): Promise<void> => {
    return await this.connection.invoke("RequestUndo", message);
  };

  public readonly approveUndo = async (
    message: ApproveUndoMessage,
  ): Promise<void> => {
    return await this.connection.invoke("ApproveUndo", message);
  };

  public readonly requestRematch = async (
    message: RematchRequestMessage,
  ): Promise<void> => {
    return await this.connection.invoke("RequestRematch", message);
  };

  public readonly approveRematch = async (
    message: ApproveRematchMessage,
  ): Promise<void> => {
    return await this.connection.invoke("ApproveRematch", message);
  };

  public readonly sendMessage = async (
    messageRequest: ChatMessageClientMessage,
  ): Promise<void> => {
    return await this.connection.invoke("SendMessage", messageRequest);
  };

  public readonly getClock = async (
    message: GetClockMessage,
  ): Promise<void> => {
    return await this.connection.invoke("GetClock", message);
  };

  public readonly sendInvitationToPlay = async (
    message: SendInvitationToPlayMessage,
  ): Promise<void> => {
    return await this.connection.invoke("SendInvitationToPlay", message);
  };
}

// Receiver

class IGameHubReceiver_Binder implements ReceiverRegister<IGameHubReceiver> {
  public static Instance = new IGameHubReceiver_Binder();

  private constructor() {}

  public readonly register = (
    connection: HubConnection,
    receiver: IGameHubReceiver,
  ): Disposable => {
    const __onOnlineUserCountChange = (...args: [number]) =>
      receiver.onOnlineUserCountChange(...args);
    const __onMatchingPlayerFound = (...args: [string]) =>
      receiver.onMatchingPlayerFound(...args);
    const __gameGroupJoined = (...args: [string]) =>
      receiver.gameGroupJoined(...args);
    const __playerJoinedGame = (...args: [PlayerJoinedGameMessage]) =>
      receiver.playerJoinedGame(...args);
    const __gameStarted = (...args: [GameStartedMessage]) =>
      receiver.gameStarted(...args);
    const __bothPlayersJoined = (...args: [BothPlayersJoinedMessage]) =>
      receiver.bothPlayersJoined(...args);
    const __undoRequested = () => receiver.undoRequested();
    const __undoApproved = (...args: [UndoApprovedMessage]) =>
      receiver.undoApproved(...args);
    const __playerMadeMove = (...args: [PlayerMadeMoveMessage]) =>
      receiver.playerMadeMove(...args);
    const __rematchApproved = (...args: [RematchApprovedMessage]) =>
      receiver.rematchApproved(...args);
    const __rematchRequested = (...args: [RematchRequestMessage]) =>
      receiver.rematchRequested(...args);
    const __gameIsOver = (...args: [GameIsOverMessage]) =>
      receiver.gameIsOver(...args);
    const __sendMessage = (...args: [ChatMessageClientMessage]) =>
      receiver.sendMessage(...args);
    const __clock = (...args: [ClockDto]) => receiver.clock(...args);
    const __gameHubError = (...args: [ErrorMessage]) =>
      receiver.gameHubError(...args);
    const __receiveInvitationToPlay = (
      ...args: [ReceiveInvitationToPlayMessage]
    ) => receiver.receiveInvitationToPlay(...args);

    connection.on("OnOnlineUserCountChange", __onOnlineUserCountChange);
    connection.on("OnMatchingPlayerFound", __onMatchingPlayerFound);
    connection.on("GameGroupJoined", __gameGroupJoined);
    connection.on("PlayerJoinedGame", __playerJoinedGame);
    connection.on("GameStarted", __gameStarted);
    connection.on("BothPlayersJoined", __bothPlayersJoined);
    connection.on("UndoRequested", __undoRequested);
    connection.on("UndoApproved", __undoApproved);
    connection.on("PlayerMadeMove", __playerMadeMove);
    connection.on("RematchApproved", __rematchApproved);
    connection.on("RematchRequested", __rematchRequested);
    connection.on("GameIsOver", __gameIsOver);
    connection.on("SendMessage", __sendMessage);
    connection.on("Clock", __clock);
    connection.on("GameHubError", __gameHubError);
    connection.on("ReceiveInvitationToPlay", __receiveInvitationToPlay);

    const methodList: ReceiverMethod[] = [
      {
        methodName: "OnOnlineUserCountChange",
        method: __onOnlineUserCountChange,
      },
      { methodName: "OnMatchingPlayerFound", method: __onMatchingPlayerFound },
      { methodName: "GameGroupJoined", method: __gameGroupJoined },
      { methodName: "PlayerJoinedGame", method: __playerJoinedGame },
      { methodName: "GameStarted", method: __gameStarted },
      { methodName: "BothPlayersJoined", method: __bothPlayersJoined },
      { methodName: "UndoRequested", method: __undoRequested },
      { methodName: "UndoApproved", method: __undoApproved },
      { methodName: "PlayerMadeMove", method: __playerMadeMove },
      { methodName: "RematchApproved", method: __rematchApproved },
      { methodName: "RematchRequested", method: __rematchRequested },
      { methodName: "GameIsOver", method: __gameIsOver },
      { methodName: "SendMessage", method: __sendMessage },
      { methodName: "Clock", method: __clock },
      { methodName: "GameHubError", method: __gameHubError },
      {
        methodName: "ReceiveInvitationToPlay",
        method: __receiveInvitationToPlay,
      },
    ];

    return new ReceiverMethodSubscription(connection, methodList);
  };
}
