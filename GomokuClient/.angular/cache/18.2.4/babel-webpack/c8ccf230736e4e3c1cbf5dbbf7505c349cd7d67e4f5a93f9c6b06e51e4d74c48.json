{"ast":null,"code":"import { UserplayService } from '../userplay.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../userplay.service\";\nimport * as i2 from \"@angular/common\";\nfunction BoardComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\"Your opponent is \", ctx_r0.opponentName, \"\");\n  }\n}\nfunction BoardComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.winnerMessage);\n  }\n}\nfunction BoardComponent_tr_3_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\", 6);\n    i0.ɵɵlistener(\"click\", function BoardComponent_tr_3_td_1_Template_td_click_0_listener() {\n      const columnIndex_r3 = i0.ɵɵrestoreView(_r2).index;\n      const rowIndex_r4 = i0.ɵɵnextContext().index;\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.userPlayed(rowIndex_r4, columnIndex_r3));\n    });\n    i0.ɵɵelement(1, \"div\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const columnIndex_r3 = ctx.index;\n    const rowIndex_r4 = i0.ɵɵnextContext().index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵclassProp(\"circle\", ctx_r0.getSquare(rowIndex_r4, columnIndex_r3) > 0)(\"red\", ctx_r0.getSquare(rowIndex_r4, columnIndex_r3) == 1)(\"dark-red\", ctx_r0.getSquare(rowIndex_r4, columnIndex_r3) == 3)(\"blue\", ctx_r0.getSquare(rowIndex_r4, columnIndex_r3) == 2)(\"dark-blue\", ctx_r0.getSquare(rowIndex_r4, columnIndex_r3) == 4);\n  }\n}\nfunction BoardComponent_tr_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, BoardComponent_tr_3_td_1_Template, 2, 10, \"td\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r5 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", row_r5);\n  }\n}\nexport class BoardComponent {\n  userplayService;\n  player;\n  nameInserted;\n  board = [];\n  size = 19;\n  goal = 5;\n  gameId = 1;\n  myTurn = false;\n  gameStarted = false;\n  opponentName = \"\";\n  knownOpponentName = false;\n  winner = false;\n  winnerMessage = \"\";\n  constructor(userplayService) {\n    this.userplayService = userplayService;\n    for (let i = 0; i < this.size; i++) {\n      this.board[i] = [];\n      for (let j = 0; j < this.size; j++) {\n        this.board[i][j] = 0;\n      }\n    }\n    userplayService.getGameInfo().subscribe(gameInfo => {\n      this.gameId = gameInfo.gameId;\n      this.myTurn = gameInfo.yourTurn;\n      this.gameStarted = true;\n      console.log(\"Game number \" + this.gameId);\n    });\n    setInterval(() => {\n      if (!this.gameStarted) return;\n      userplayService.getLastMove(this.gameId).subscribe(move => {\n        console.log(move);\n        console.log(move.gameId + \" \" + this.gameId);\n        if (move.gameId != this.gameId) return;\n        if (this.board[move.row][move.column]) return;\n        if (move.player) {\n          console.log(move.player);\n          this.opponentName = move.player;\n          this.knownOpponentName = true;\n        }\n        this.board[move.row][move.column] = 2;\n        if (this.isWinner(move.row, move.column)) {\n          this.winnerMessage = \"You lost!\";\n          this.winner = true;\n          this.gameStarted = false;\n        }\n        ;\n        this.myTurn = true;\n      });\n    }, 1000);\n  }\n  ngOnInit() {}\n  getSquare(row, column) {\n    return this.board[row][column];\n  }\n  userPlayed(row, column) {\n    if (!this.myTurn || !this.gameStarted || !this.nameInserted) return;\n    if (this.board[row][column]) return;\n    this.board[row][column] = 1;\n    this.myTurn = false;\n    this.userplayService.userPlayed({\n      gameId: this.gameId,\n      player: this.player,\n      row: row,\n      column: column\n    });\n    if (this.isWinner(row, column)) {\n      this.winnerMessage = \"You won!\";\n      this.winner = true;\n      this.gameStarted = false;\n    }\n  }\n  isWinner(lastPlayedRow, lastPlayedColumn) {\n    return this.isVerticalWinner(lastPlayedRow, lastPlayedColumn) || this.isHorizontalWinner(lastPlayedRow, lastPlayedColumn) || this.isDiagonalWinner(lastPlayedRow, lastPlayedColumn) || this.isOppositeDiagonalWinner(lastPlayedRow, lastPlayedColumn);\n  }\n  isVerticalWinner(lastPlayedRow, lastPlayedColumn) {\n    let square = this.getSquare(lastPlayedRow, lastPlayedColumn);\n    let count = 1;\n    let top = lastPlayedRow;\n    let bottom = lastPlayedRow;\n    while (count < this.goal) {\n      top--;\n      if (top < 0 || this.board[top][lastPlayedColumn] != square) {\n        top++;\n        break;\n      }\n      count++;\n    }\n    while (count < this.goal) {\n      bottom++;\n      if (bottom >= this.size || this.board[bottom][lastPlayedColumn] != square) {\n        bottom--;\n        break;\n      }\n      count++;\n    }\n    if (count == this.goal) {\n      for (let row = top; row <= bottom; row++) {\n        this.board[row][lastPlayedColumn] += 2;\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n  isHorizontalWinner(lastPlayedRow, lastPlayedColumn) {\n    let square = this.getSquare(lastPlayedRow, lastPlayedColumn);\n    let count = 1;\n    let left = lastPlayedColumn;\n    let right = lastPlayedColumn;\n    while (count < this.goal) {\n      left--;\n      if (left < 0 || this.board[lastPlayedRow][left] != square) {\n        left++;\n        break;\n      }\n      count++;\n    }\n    while (count < this.goal) {\n      right++;\n      if (right >= this.size || this.board[lastPlayedRow][right] != square) {\n        right--;\n        break;\n      }\n      count++;\n    }\n    if (count == this.goal) {\n      for (let column = left; column <= right; column++) {\n        this.board[lastPlayedRow][column] += 2;\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n  isDiagonalWinner(lastPlayedRow, lastPlayedColumn) {\n    let square = this.getSquare(lastPlayedRow, lastPlayedColumn);\n    let count = 1;\n    let top = lastPlayedRow;\n    let bottom = lastPlayedRow;\n    let left = lastPlayedColumn;\n    let right = lastPlayedColumn;\n    while (count < this.goal) {\n      left--;\n      top--;\n      if (left < 0 || top < 0 || this.board[top][left] != square) {\n        left++;\n        top++;\n        break;\n      }\n      count++;\n    }\n    while (count < this.goal) {\n      right++;\n      bottom++;\n      if (right >= this.size || bottom >= this.size || this.board[bottom][right] != square) {\n        right--;\n        bottom--;\n        break;\n      }\n      count++;\n    }\n    if (count == this.goal) {\n      let row = top;\n      for (let column = left; column <= right; column++) {\n        this.board[top++][column] += 2;\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n  isOppositeDiagonalWinner(lastPlayedRow, lastPlayedColumn) {\n    let square = this.getSquare(lastPlayedRow, lastPlayedColumn);\n    let count = 1;\n    let top = lastPlayedRow;\n    let bottom = lastPlayedRow;\n    let left = lastPlayedColumn;\n    let right = lastPlayedColumn;\n    while (count < this.goal) {\n      left--;\n      bottom++;\n      if (left < 0 || bottom >= this.size || this.board[bottom][left] != square) {\n        left++;\n        bottom--;\n        break;\n      }\n      count++;\n    }\n    while (count < this.goal) {\n      right++;\n      top--;\n      if (right >= this.size || top < 0 || this.board[top][right] != square) {\n        right--;\n        top++;\n        break;\n      }\n      count++;\n    }\n    if (count == this.goal) {\n      let row = bottom;\n      for (let column = left; column <= right; column++) {\n        this.board[bottom--][column] += 2;\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n  static ɵfac = function BoardComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || BoardComponent)(i0.ɵɵdirectiveInject(i1.UserplayService));\n  };\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BoardComponent,\n    selectors: [[\"app-board\"]],\n    inputs: {\n      player: \"player\",\n      nameInserted: \"nameInserted\"\n    },\n    decls: 4,\n    vars: 3,\n    consts: [[4, \"ngIf\"], [\"class\", \"winner\", 4, \"ngIf\"], [\"border\", \"1\"], [4, \"ngFor\", \"ngForOf\"], [1, \"winner\"], [3, \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\"]],\n    template: function BoardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, BoardComponent_div_0_Template, 2, 1, \"div\", 0)(1, BoardComponent_div_1_Template, 2, 1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"table\", 2);\n        i0.ɵɵtemplate(3, BoardComponent_tr_3_Template, 2, 1, \"tr\", 3);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.knownOpponentName);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.winner);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.board);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf],\n    styles: [\"td[_ngcontent-%COMP%] {\\n    height: 20px;\\n    width: 20px;\\n}\\n\\ntable[_ngcontent-%COMP%] {\\n    border-collapse: collapse;\\n    width: 500px;\\n    margin: 0 auto;\\n}\\n\\n.circle[_ngcontent-%COMP%] {\\n    width: 75%;\\n    height: 75%;\\n    border-radius: 100%;\\n    margin: 0 auto;\\n}\\n\\n.red[_ngcontent-%COMP%] {\\n    background-color: red;\\n}\\n\\n.dark-red[_ngcontent-%COMP%] {\\n    background-color: darkred;\\n}\\n\\n.blue[_ngcontent-%COMP%] {\\n    background-color: lightblue;\\n}\\n\\n.dark-blue[_ngcontent-%COMP%] {\\n    background-color: blue;\\n}\\n\\n.winner[_ngcontent-%COMP%] {\\n    color: red;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJvYXJkLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxZQUFZO0lBQ1osV0FBVztBQUNmOztBQUVBO0lBQ0kseUJBQXlCO0lBQ3pCLFlBQVk7SUFDWixjQUFjO0FBQ2xCOztBQUVBO0lBQ0ksVUFBVTtJQUNWLFdBQVc7SUFDWCxtQkFBbUI7SUFDbkIsY0FBYztBQUNsQjs7QUFFQTtJQUNJLHFCQUFxQjtBQUN6Qjs7QUFFQTtJQUNJLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLDJCQUEyQjtBQUMvQjs7QUFFQTtJQUNJLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLFVBQVU7QUFDZCIsImZpbGUiOiJib2FyZC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsidGQge1xuICAgIGhlaWdodDogMjBweDtcbiAgICB3aWR0aDogMjBweDtcbn1cblxudGFibGUge1xuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gICAgd2lkdGg6IDUwMHB4O1xuICAgIG1hcmdpbjogMCBhdXRvO1xufVxuXG4uY2lyY2xlIHtcbiAgICB3aWR0aDogNzUlO1xuICAgIGhlaWdodDogNzUlO1xuICAgIGJvcmRlci1yYWRpdXM6IDEwMCU7XG4gICAgbWFyZ2luOiAwIGF1dG87XG59XG5cbi5yZWQge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcbn1cblxuLmRhcmstcmVkIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBkYXJrcmVkO1xufVxuXG4uYmx1ZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogbGlnaHRibHVlO1xufVxuXG4uZGFyay1ibHVlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibHVlO1xufVxuXG4ud2lubmVyIHtcbiAgICBjb2xvcjogcmVkO1xufSJdfQ== */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYm9hcmQvYm9hcmQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFlBQVk7SUFDWixXQUFXO0FBQ2Y7O0FBRUE7SUFDSSx5QkFBeUI7SUFDekIsWUFBWTtJQUNaLGNBQWM7QUFDbEI7O0FBRUE7SUFDSSxVQUFVO0lBQ1YsV0FBVztJQUNYLG1CQUFtQjtJQUNuQixjQUFjO0FBQ2xCOztBQUVBO0lBQ0kscUJBQXFCO0FBQ3pCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0ksMkJBQTJCO0FBQy9COztBQUVBO0lBQ0ksc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0ksVUFBVTtBQUNkO0FBQ0Esd25DQUF3bkMiLCJzb3VyY2VzQ29udGVudCI6WyJ0ZCB7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICAgIHdpZHRoOiAyMHB4O1xufVxuXG50YWJsZSB7XG4gICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgICB3aWR0aDogNTAwcHg7XG4gICAgbWFyZ2luOiAwIGF1dG87XG59XG5cbi5jaXJjbGUge1xuICAgIHdpZHRoOiA3NSU7XG4gICAgaGVpZ2h0OiA3NSU7XG4gICAgYm9yZGVyLXJhZGl1czogMTAwJTtcbiAgICBtYXJnaW46IDAgYXV0bztcbn1cblxuLnJlZCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xufVxuXG4uZGFyay1yZWQge1xuICAgIGJhY2tncm91bmQtY29sb3I6IGRhcmtyZWQ7XG59XG5cbi5ibHVlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGJsdWU7XG59XG5cbi5kYXJrLWJsdWUge1xuICAgIGJhY2tncm91bmQtY29sb3I6IGJsdWU7XG59XG5cbi53aW5uZXIge1xuICAgIGNvbG9yOiByZWQ7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["UserplayService","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r0","opponentName","ɵɵtextInterpolate","winnerMessage","ɵɵlistener","BoardComponent_tr_3_td_1_Template_td_click_0_listener","columnIndex_r3","ɵɵrestoreView","_r2","index","rowIndex_r4","ɵɵnextContext","ɵɵresetView","userPlayed","ɵɵelement","ɵɵclassProp","getSquare","ɵɵtemplate","BoardComponent_tr_3_td_1_Template","ɵɵproperty","row_r5","BoardComponent","userplayService","player","nameInserted","board","size","goal","gameId","myTurn","gameStarted","knownOpponentName","winner","constructor","i","j","getGameInfo","subscribe","gameInfo","yourTurn","console","log","setInterval","getLastMove","move","row","column","isWinner","ngOnInit","lastPlayedRow","lastPlayedColumn","isVerticalWinner","isHorizontalWinner","isDiagonalWinner","isOppositeDiagonalWinner","square","count","top","bottom","left","right","ɵɵdirectiveInject","i1","selectors","inputs","decls","vars","consts","template","BoardComponent_Template","rf","ctx","BoardComponent_div_0_Template","BoardComponent_div_1_Template","BoardComponent_tr_3_Template"],"sources":["/Users/kuprins/Desktop/Coding/gomoku/Gomoku/GomokuClient/src/app/board/board.component.ts","/Users/kuprins/Desktop/Coding/gomoku/Gomoku/GomokuClient/src/app/board/board.component.html"],"sourcesContent":["import { Component, OnInit, Input } from '@angular/core';\nimport { UserplayService } from '../userplay.service';\nimport { Move } from '../move';\nimport { GameInfo } from '../game-info';\n\n@Component({\n  selector: 'app-board',\n  templateUrl: './board.component.html',\n  styleUrls: ['./board.component.css']\n})\nexport class BoardComponent implements OnInit {\n  @Input() player: string;\n  @Input() nameInserted: boolean;\n\n  board: number[][] = [];\n  size: number = 19;\n  goal: number = 5;\n  gameId: number = 1;\n  myTurn: boolean = false;\n  gameStarted: boolean = false;\n  opponentName: string = \"\";\n  knownOpponentName: boolean = false;\n  winner: boolean = false;\n  winnerMessage: string = \"\";\n\n  constructor(private userplayService: UserplayService) {\n    for (let i:number = 0; i < this.size; i++) {\n      this.board[i] = [];\n      for (let j:number = 0; j < this.size; j++) {\n        this.board[i][j] = 0;\n      }\n    }\n\n    userplayService.getGameInfo().subscribe(gameInfo => {\n      this.gameId = gameInfo.gameId;\n      this.myTurn = gameInfo.yourTurn;\n      this.gameStarted = true;\n      console.log(\"Game number \" + this.gameId);\n    });\n\n    setInterval(\n      () => {\n        if (!this.gameStarted)\n          return;\n        userplayService.getLastMove(this.gameId).subscribe(move => {\n          console.log(move);\n          console.log(move.gameId + \" \" + this.gameId);\n          if (move.gameId != this.gameId)\n            return;\n          if (this.board[move.row][move.column])\n            return;\n          if (move.player) {\n              console.log(move.player);\n              this.opponentName = move.player;\n              this.knownOpponentName = true;\n            }\n          this.board[move.row][move.column] = 2;\n          if (this.isWinner(move.row, move.column)) {\n            this.winnerMessage = \"You lost!\";\n            this.winner = true;\n            this.gameStarted = false;\n          };\n          this.myTurn = true;\n        });\n      }\n      ,1000\n    );\n   }\n\n  ngOnInit() {  }\n\n  getSquare(row: number, column: number): number {\n    return this.board[row][column];\n  }\n\n  userPlayed(row: number, column: number): void {\n    if (!this.myTurn || !this.gameStarted || !this.nameInserted)\n      return;\n    if (this.board[row][column])\n      return;\n    this.board[row][column] = 1;\n    this.myTurn = false;\n    this.userplayService.userPlayed({\n      gameId: this.gameId,\n      player: this.player,\n      row: row,\n      column: column\n    });\n    if (this.isWinner(row, column)) {\n      this.winnerMessage = \"You won!\";\n      this.winner = true;\n      this.gameStarted = false;\n    }\n  }\n\n  isWinner(lastPlayedRow: number, lastPlayedColumn: number): boolean {\n    return this.isVerticalWinner(lastPlayedRow, lastPlayedColumn)\n      || this.isHorizontalWinner(lastPlayedRow, lastPlayedColumn)\n      || this.isDiagonalWinner(lastPlayedRow, lastPlayedColumn)\n      || this.isOppositeDiagonalWinner(lastPlayedRow, lastPlayedColumn);\n  }\n\n  isVerticalWinner(lastPlayedRow: number, lastPlayedColumn: number): boolean {\n    let square: number = this.getSquare(lastPlayedRow, lastPlayedColumn);\n    let count: number = 1;\n    let top: number = lastPlayedRow;\n    let bottom: number = lastPlayedRow;\n\n    while (count < this.goal) {\n      top--;\n      if (top < 0 || this.board[top][lastPlayedColumn] != square) {\n        top++;\n        break;\n      }\n      count++;\n    }\n\n    while (count < this.goal) {\n      bottom++;\n      if (bottom >= this.size || this.board[bottom][lastPlayedColumn] != square) {\n        bottom--;\n        break;\n      }\n      count++;\n    }\n\n    if (count == this.goal) {\n      for (let row: number = top; row <= bottom; row++) {\n        this.board[row][lastPlayedColumn] += 2;\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  isHorizontalWinner(lastPlayedRow: number, lastPlayedColumn: number): boolean {\n    let square: number = this.getSquare(lastPlayedRow, lastPlayedColumn);\n    let count: number = 1;\n    let left: number = lastPlayedColumn;\n    let right: number = lastPlayedColumn;\n\n    while (count < this.goal) {\n      left--;\n      if (left < 0 || this.board[lastPlayedRow][left] != square) {\n        left++;\n        break;\n      }\n      count++;\n    }\n\n    while (count < this.goal) {\n      right++;\n      if (right >= this.size || this.board[lastPlayedRow][right] != square) {\n        right--;\n        break;\n      }\n      count++;\n    }\n\n    if (count == this.goal) {\n      for (let column: number = left; column <= right; column++) {\n        this.board[lastPlayedRow][column] += 2;\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  isDiagonalWinner(lastPlayedRow: number, lastPlayedColumn: number): boolean {\n    let square: number = this.getSquare(lastPlayedRow, lastPlayedColumn);\n    let count: number = 1;\n    let top: number = lastPlayedRow;\n    let bottom: number = lastPlayedRow;\n    let left: number = lastPlayedColumn;\n    let right: number = lastPlayedColumn;\n\n    while (count < this.goal) {\n      left--;\n      top--;\n      if (left < 0 || top < 0 || this.board[top][left] != square) {\n        left++;\n        top++;\n        break;\n      }\n      count++;\n    }\n\n    while (count < this.goal) {\n      right++;\n      bottom++;\n      if (right >= this.size || bottom >= this.size || this.board[bottom][right] != square) {\n        right--;\n        bottom--;\n        break;\n      }\n      count++;\n    }\n\n    if (count == this.goal) {\n      let row: number = top;\n      for (let column: number = left; column <= right; column++) {\n        this.board[top++][column] += 2;\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  isOppositeDiagonalWinner(lastPlayedRow: number, lastPlayedColumn: number): boolean {\n    let square: number = this.getSquare(lastPlayedRow, lastPlayedColumn);\n    let count: number = 1;\n    let top: number = lastPlayedRow;\n    let bottom: number = lastPlayedRow;\n    let left: number = lastPlayedColumn;\n    let right: number = lastPlayedColumn;\n\n    while (count < this.goal) {\n      left--;\n      bottom++;\n      if (left < 0 || bottom >= this.size || this.board[bottom][left] != square) {\n        left++;\n        bottom--;\n        break;\n      }\n      count++;\n    }\n\n    while (count < this.goal) {\n      right++;\n      top--;\n      if (right >= this.size || top < 0 || this.board[top][right] != square) {\n        right--;\n        top++;\n        break;\n      }\n      count++;\n    }\n\n    if (count == this.goal) {\n      let row: number = bottom;\n      for (let column: number = left; column <= right; column++) {\n        this.board[bottom--][column] += 2;\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n","<div *ngIf=\"knownOpponentName\">Your opponent is {{opponentName}}</div>\n<div *ngIf=\"winner\" class=\"winner\">{{winnerMessage}}</div>\n<table border=\"1\">\n  <tr *ngFor=\"let row of board; let rowIndex = index\">\n    <td *ngFor=\"let cell of row; let columnIndex = index\" (click)=\"userPlayed(rowIndex,columnIndex);\">\n      <div [class.circle]=\"getSquare(rowIndex, columnIndex) > 0\" \n        [class.red]=\"getSquare(rowIndex, columnIndex) == 1\"\n        [class.dark-red]=\"getSquare(rowIndex, columnIndex) == 3\"\n        [class.blue]=\"getSquare(rowIndex, columnIndex) == 2\"\n        [class.dark-blue]=\"getSquare(rowIndex, columnIndex) == 4\"></div>\n    </td>\n  </tr>\n</table>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}