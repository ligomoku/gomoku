{"ast":null,"code":"import { UserplayService } from '../userplay.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../userplay.service\";\nimport * as i2 from \"@angular/common\";\nfunction BoardComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\"Your opponent is \", ctx_r0.opponentName, \"\");\n  }\n}\nfunction BoardComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.winnerMessage);\n  }\n}\nfunction BoardComponent_tr_3_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\", 6);\n    i0.ɵɵlistener(\"click\", function BoardComponent_tr_3_td_1_Template_td_click_0_listener() {\n      const columnIndex_r3 = i0.ɵɵrestoreView(_r2).index;\n      const rowIndex_r4 = i0.ɵɵnextContext().index;\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.userPlayed(rowIndex_r4, columnIndex_r3));\n    });\n    i0.ɵɵelement(1, \"div\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const columnIndex_r3 = ctx.index;\n    const rowIndex_r4 = i0.ɵɵnextContext().index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵclassProp(\"circle\", ctx_r0.getSquare(rowIndex_r4, columnIndex_r3) > 0)(\"red\", ctx_r0.getSquare(rowIndex_r4, columnIndex_r3) == 1)(\"dark-red\", ctx_r0.getSquare(rowIndex_r4, columnIndex_r3) == 3)(\"blue\", ctx_r0.getSquare(rowIndex_r4, columnIndex_r3) == 2)(\"dark-blue\", ctx_r0.getSquare(rowIndex_r4, columnIndex_r3) == 4);\n  }\n}\nfunction BoardComponent_tr_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, BoardComponent_tr_3_td_1_Template, 2, 10, \"td\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r5 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", row_r5);\n  }\n}\nexport let BoardComponent = /*#__PURE__*/(() => {\n  class BoardComponent {\n    userplayService;\n    player;\n    nameInserted;\n    board = [];\n    size = 19;\n    goal = 5;\n    gameId = 1;\n    myTurn = false;\n    gameStarted = false;\n    opponentName = \"\";\n    knownOpponentName = false;\n    winner = false;\n    winnerMessage = \"\";\n    constructor(userplayService) {\n      this.userplayService = userplayService;\n      for (let i = 0; i < this.size; i++) {\n        this.board[i] = [];\n        for (let j = 0; j < this.size; j++) {\n          this.board[i][j] = 0;\n        }\n      }\n      userplayService.getGameInfo().subscribe(gameInfo => {\n        this.gameId = gameInfo.gameId;\n        this.myTurn = gameInfo.yourTurn;\n        this.gameStarted = true;\n        console.log(\"Game number \" + this.gameId);\n      });\n      setInterval(() => {\n        if (!this.gameStarted) return;\n        userplayService.getLastMove(this.gameId).subscribe(move => {\n          console.log(move);\n          console.log(move.gameId + \" \" + this.gameId);\n          if (move.gameId != this.gameId) return;\n          if (this.board[move.row][move.column]) return;\n          if (move.player) {\n            console.log(move.player);\n            this.opponentName = move.player;\n            this.knownOpponentName = true;\n          }\n          this.board[move.row][move.column] = 2;\n          if (this.isWinner(move.row, move.column)) {\n            this.winnerMessage = \"You lost!\";\n            this.winner = true;\n            this.gameStarted = false;\n          }\n          ;\n          this.myTurn = true;\n        });\n      }, 1000);\n    }\n    ngOnInit() {}\n    getSquare(row, column) {\n      return this.board[row][column];\n    }\n    userPlayed(row, column) {\n      if (!this.myTurn || !this.gameStarted || !this.nameInserted) return;\n      if (this.board[row][column]) return;\n      this.board[row][column] = 1;\n      this.myTurn = false;\n      this.userplayService.userPlayed({\n        gameId: this.gameId,\n        player: this.player,\n        row: row,\n        column: column\n      });\n      if (this.isWinner(row, column)) {\n        this.winnerMessage = \"You won!\";\n        this.winner = true;\n        this.gameStarted = false;\n      }\n    }\n    isWinner(lastPlayedRow, lastPlayedColumn) {\n      return this.isVerticalWinner(lastPlayedRow, lastPlayedColumn) || this.isHorizontalWinner(lastPlayedRow, lastPlayedColumn) || this.isDiagonalWinner(lastPlayedRow, lastPlayedColumn) || this.isOppositeDiagonalWinner(lastPlayedRow, lastPlayedColumn);\n    }\n    isVerticalWinner(lastPlayedRow, lastPlayedColumn) {\n      let square = this.getSquare(lastPlayedRow, lastPlayedColumn);\n      let count = 1;\n      let top = lastPlayedRow;\n      let bottom = lastPlayedRow;\n      while (count < this.goal) {\n        top--;\n        if (top < 0 || this.board[top][lastPlayedColumn] != square) {\n          top++;\n          break;\n        }\n        count++;\n      }\n      while (count < this.goal) {\n        bottom++;\n        if (bottom >= this.size || this.board[bottom][lastPlayedColumn] != square) {\n          bottom--;\n          break;\n        }\n        count++;\n      }\n      if (count == this.goal) {\n        for (let row = top; row <= bottom; row++) {\n          this.board[row][lastPlayedColumn] += 2;\n        }\n        return true;\n      } else {\n        return false;\n      }\n    }\n    isHorizontalWinner(lastPlayedRow, lastPlayedColumn) {\n      let square = this.getSquare(lastPlayedRow, lastPlayedColumn);\n      let count = 1;\n      let left = lastPlayedColumn;\n      let right = lastPlayedColumn;\n      while (count < this.goal) {\n        left--;\n        if (left < 0 || this.board[lastPlayedRow][left] != square) {\n          left++;\n          break;\n        }\n        count++;\n      }\n      while (count < this.goal) {\n        right++;\n        if (right >= this.size || this.board[lastPlayedRow][right] != square) {\n          right--;\n          break;\n        }\n        count++;\n      }\n      if (count == this.goal) {\n        for (let column = left; column <= right; column++) {\n          this.board[lastPlayedRow][column] += 2;\n        }\n        return true;\n      } else {\n        return false;\n      }\n    }\n    isDiagonalWinner(lastPlayedRow, lastPlayedColumn) {\n      let square = this.getSquare(lastPlayedRow, lastPlayedColumn);\n      let count = 1;\n      let top = lastPlayedRow;\n      let bottom = lastPlayedRow;\n      let left = lastPlayedColumn;\n      let right = lastPlayedColumn;\n      while (count < this.goal) {\n        left--;\n        top--;\n        if (left < 0 || top < 0 || this.board[top][left] != square) {\n          left++;\n          top++;\n          break;\n        }\n        count++;\n      }\n      while (count < this.goal) {\n        right++;\n        bottom++;\n        if (right >= this.size || bottom >= this.size || this.board[bottom][right] != square) {\n          right--;\n          bottom--;\n          break;\n        }\n        count++;\n      }\n      if (count == this.goal) {\n        let row = top;\n        for (let column = left; column <= right; column++) {\n          this.board[top++][column] += 2;\n        }\n        return true;\n      } else {\n        return false;\n      }\n    }\n    isOppositeDiagonalWinner(lastPlayedRow, lastPlayedColumn) {\n      let square = this.getSquare(lastPlayedRow, lastPlayedColumn);\n      let count = 1;\n      let top = lastPlayedRow;\n      let bottom = lastPlayedRow;\n      let left = lastPlayedColumn;\n      let right = lastPlayedColumn;\n      while (count < this.goal) {\n        left--;\n        bottom++;\n        if (left < 0 || bottom >= this.size || this.board[bottom][left] != square) {\n          left++;\n          bottom--;\n          break;\n        }\n        count++;\n      }\n      while (count < this.goal) {\n        right++;\n        top--;\n        if (right >= this.size || top < 0 || this.board[top][right] != square) {\n          right--;\n          top++;\n          break;\n        }\n        count++;\n      }\n      if (count == this.goal) {\n        let row = bottom;\n        for (let column = left; column <= right; column++) {\n          this.board[bottom--][column] += 2;\n        }\n        return true;\n      } else {\n        return false;\n      }\n    }\n    static ɵfac = function BoardComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || BoardComponent)(i0.ɵɵdirectiveInject(i1.UserplayService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: BoardComponent,\n      selectors: [[\"app-board\"]],\n      inputs: {\n        player: \"player\",\n        nameInserted: \"nameInserted\"\n      },\n      decls: 4,\n      vars: 3,\n      consts: [[4, \"ngIf\"], [\"class\", \"winner\", 4, \"ngIf\"], [\"border\", \"1\"], [4, \"ngFor\", \"ngForOf\"], [1, \"winner\"], [3, \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\"]],\n      template: function BoardComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, BoardComponent_div_0_Template, 2, 1, \"div\", 0)(1, BoardComponent_div_1_Template, 2, 1, \"div\", 1);\n          i0.ɵɵelementStart(2, \"table\", 2);\n          i0.ɵɵtemplate(3, BoardComponent_tr_3_Template, 2, 1, \"tr\", 3);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", ctx.knownOpponentName);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.winner);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.board);\n        }\n      },\n      dependencies: [i2.NgForOf, i2.NgIf],\n      styles: [\"td[_ngcontent-%COMP%]{height:20px;width:20px}table[_ngcontent-%COMP%]{border-collapse:collapse;width:500px;margin:0 auto}.circle[_ngcontent-%COMP%]{width:75%;height:75%;border-radius:100%;margin:0 auto}.red[_ngcontent-%COMP%]{background-color:red}.dark-red[_ngcontent-%COMP%]{background-color:#8b0000}.blue[_ngcontent-%COMP%]{background-color:#add8e6}.dark-blue[_ngcontent-%COMP%]{background-color:#00f}.winner[_ngcontent-%COMP%]{color:red}\"]\n    });\n  }\n  return BoardComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}