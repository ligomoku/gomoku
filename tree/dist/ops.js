export function withMainlineChild(node, f) {
    const next = node.children[0];
    return next ? f(next) : undefined;
}
export function findInMainline(fromNode, predicate) {
    const findFrom = function (node) {
        if (predicate(node))
            return node;
        return withMainlineChild(node, findFrom);
    };
    return findFrom(fromNode);
}
// returns a list of nodes collected from the original one
export function collect(from, pickChild) {
    const nodes = [from];
    let n = from, c;
    while ((c = pickChild(n))) {
        nodes.push(c);
        n = c;
    }
    return nodes;
}
const pickFirstChild = (node) => node.children[0];
export const childById = (node, id) => node.children.find(child => child.id === id);
export const last = (nodeList) => nodeList[nodeList.length - 1];
export const nodeAtPly = (nodeList, ply) => nodeList.find(node => node.ply === ply);
export function takePathWhile(nodeList, predicate) {
    let path = '';
    for (const i in nodeList) {
        if (predicate(nodeList[i]))
            path += nodeList[i].id;
        else
            break;
    }
    return path;
}
export function removeChild(parent, id) {
    parent.children = parent.children.filter(function (n) {
        return n.id !== id;
    });
}
export function countChildrenAndComments(node) {
    const count = {
        nodes: 1,
        comments: (node.comments || []).length,
    };
    node.children.forEach(function (child) {
        const c = countChildrenAndComments(child);
        count.nodes += c.nodes;
        count.comments += c.comments;
    });
    return count;
}
// adds n2 into n1
export function merge(n1, n2) {
    if (n2.eval)
        n1.eval = n2.eval;
    if (n2.glyphs)
        n1.glyphs = n2.glyphs;
    n2.comments &&
        n2.comments.forEach(function (c) {
            if (!n1.comments)
                n1.comments = [c];
            else if (!n1.comments.some(function (d) {
                return d.text === c.text;
            }))
                n1.comments.push(c);
        });
    n2.children.forEach(function (c) {
        const existing = childById(n1, c.id);
        if (existing)
            merge(existing, c);
        else
            n1.children.push(c);
    });
}
export const hasBranching = (node, maxDepth) => maxDepth <= 0 || !!node.children[1] || (node.children[0] && hasBranching(node.children[0], maxDepth - 1));
export const mainlineNodeList = (from) => collect(from, pickFirstChild);
export function updateAll(root, f) {
    // applies f recursively to all nodes
    function update(node) {
        f(node);
        node.children.forEach(update);
    }
    update(root);
}
//# sourceMappingURL=data:application/json;base64,